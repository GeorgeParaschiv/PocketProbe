
ScopePen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800b078  0800b078  0000c078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b564  0800b564  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b564  0800b564  0000c564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b56c  0800b56c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b56c  0800b56c  0000c56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b570  0800b570  0000c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b574  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  200001d8  0800b74c  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  0800b74c  0000d53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f453  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002450  00000000  00000000  0001c65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0001eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9b  00000000  00000000  0001f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022df7  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116d9  00000000  00000000  000430da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0505  00000000  00000000  000547b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ecc  00000000  00000000  00124cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00129bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b060 	.word	0x0800b060

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800b060 	.word	0x0800b060

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001068:	1d39      	adds	r1, r7, #4
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	2201      	movs	r2, #1
 8001070:	4803      	ldr	r0, [pc, #12]	@ (8001080 <__io_putchar+0x20>)
 8001072:	f004 ffdf 	bl	8006034 <HAL_UART_Transmit>
	return ch;
 8001076:	687b      	ldr	r3, [r7, #4]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000360 	.word	0x20000360

08001084 <sample_gpio_dma>:
float convert(uint16_t data){
	return ((float) ((data & GPIO_MASK) - 2048) / 4096) * (2 * VREF);
}

void sample_gpio_dma()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	dma_done = 0;
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <sample_gpio_dma+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

	__HAL_DMA_ENABLE_IT(&hdma_memtomem_dma2_stream0, DMA_IT_TC);
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <sample_gpio_dma+0x44>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <sample_gpio_dma+0x44>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0210 	orr.w	r2, r2, #16
 800109c:	601a      	str	r2, [r3, #0]

	// Start DMA manually — source = GPIOC->IDR, destination = buffer
	HAL_DMA_Start_IT(
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <sample_gpio_dma+0x48>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
			&hdma_memtomem_dma2_stream0,
			(uint32_t)&GPIOC->IDR,           // Fake peripheral
			(uint32_t)gpio_buffer,
			NUM_SAMPLES * num_frames
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <sample_gpio_dma+0x4c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
	HAL_DMA_Start_IT(
 80010b4:	460a      	mov	r2, r1
 80010b6:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <sample_gpio_dma+0x50>)
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <sample_gpio_dma+0x44>)
 80010ba:	f001 fe6f 	bl	8002d9c <HAL_DMA_Start_IT>
	);

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200013ac 	.word	0x200013ac
 80010c8:	200003a8 	.word	0x200003a8
 80010cc:	20000408 	.word	0x20000408
 80010d0:	20000000 	.word	0x20000000
 80010d4:	40020810 	.word	0x40020810

080010d8 <window_scale>:

void voltage_gain(uint32_t voltage){
	return;
}

void window_scale(uint32_t frames){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	num_frames = frames;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <window_scale+0x1c>)
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20000000 	.word	0x20000000

080010f8 <handle_spi_received_data>:
void voltage_offset(uint32_t offset){

}

void handle_spi_received_data(uint16_t *rx_buf, size_t len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	if (len >= 3) {
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d948      	bls.n	800119a <handle_spi_received_data+0xa2>
		uint16_t identifier = (rx_buf[0] >> 8) | (rx_buf[0] << 8);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21a      	sxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b21b      	sxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	82fb      	strh	r3, [r7, #22]
		uint16_t rx1 = (rx_buf[1] >> 8) | (rx_buf[1] << 8);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3302      	adds	r3, #2
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b21a      	sxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3302      	adds	r3, #2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b21b      	sxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	82bb      	strh	r3, [r7, #20]
		uint16_t rx2 = (rx_buf[2] >> 8) | (rx_buf[2] << 8);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3304      	adds	r3, #4
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	b29b      	uxth	r3, r3
 800114a:	b21a      	sxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3304      	adds	r3, #4
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b21b      	sxth	r3, r3
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21b      	sxth	r3, r3
 800115c:	827b      	strh	r3, [r7, #18]
		uint32_t value = ((uint32_t)rx2 << 16 | ((uint32_t) rx1));
 800115e:	8a7b      	ldrh	r3, [r7, #18]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	8abb      	ldrh	r3, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
		printf("Identifier: %u, Value: %lu\r\n", (uint8_t)identifier, (uint32_t)value);
 8001168:	8afb      	ldrh	r3, [r7, #22]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4619      	mov	r1, r3
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <handle_spi_received_data+0xa8>)
 8001172:	f006 faf7 	bl	8007764 <iprintf>

		switch(identifier){
 8001176:	8afb      	ldrh	r3, [r7, #22]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d009      	beq.n	8001190 <handle_spi_received_data+0x98>
 800117c:	2b03      	cmp	r3, #3
 800117e:	dc09      	bgt.n	8001194 <handle_spi_received_data+0x9c>
 8001180:	2b01      	cmp	r3, #1
 8001182:	d009      	beq.n	8001198 <handle_spi_received_data+0xa0>
 8001184:	2b02      	cmp	r3, #2
 8001186:	d000      	beq.n	800118a <handle_spi_received_data+0x92>
			case 3:
				//voltage_offset(value);
				return;

			default:
				return;
 8001188:	e004      	b.n	8001194 <handle_spi_received_data+0x9c>
				window_scale(value);
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f7ff ffa4 	bl	80010d8 <window_scale>
				return;
 8001190:	bf00      	nop
 8001192:	e002      	b.n	800119a <handle_spi_received_data+0xa2>
				return;
 8001194:	bf00      	nop
 8001196:	e000      	b.n	800119a <handle_spi_received_data+0xa2>
				return;
 8001198:	bf00      	nop
		}

	}
}
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	0800b078 	.word	0x0800b078

080011a4 <setup_tx_buffer>:

void setup_tx_buffer() {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_SAMPLES; i++){
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	e012      	b.n	80011d6 <setup_tx_buffer+0x32>
		spi_tx_buffer[i] = gpio_buffer[i*num_frames];
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <setup_tx_buffer+0x48>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <setup_tx_buffer+0x4c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4619      	mov	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	8819      	ldrh	r1, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <setup_tx_buffer+0x50>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_SAMPLES; i++){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3301      	adds	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011dc:	dbe8      	blt.n	80011b0 <setup_tx_buffer+0xc>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000408 	.word	0x20000408
 80011f0:	20000000 	.word	0x20000000
 80011f4:	2000040c 	.word	0x2000040c

080011f8 <spi_gpio_transfer>:

void spi_gpio_transfer()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

	printf("Starting SPI Transfer\r\n");
 80011fe:	4817      	ldr	r0, [pc, #92]	@ (800125c <spi_gpio_transfer+0x64>)
 8001200:	f006 fb18 	bl	8007834 <puts>

	setup_tx_buffer();
 8001204:	f7ff ffce 	bl	80011a4 <setup_tx_buffer>

	tx_done = 0;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <spi_gpio_transfer+0x68>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

	// Start DMA transmit
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <spi_gpio_transfer+0x6c>)
 8001214:	4914      	ldr	r1, [pc, #80]	@ (8001268 <spi_gpio_transfer+0x70>)
 8001216:	4815      	ldr	r0, [pc, #84]	@ (800126c <spi_gpio_transfer+0x74>)
 8001218:	f004 fa6a 	bl	80056f0 <HAL_SPI_TransmitReceive_DMA>
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
        (uint8_t *)spi_tx_buffer,
        (uint8_t *)spi_rx_buffer,
        NUM_SAMPLES
    );
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // assert CS
 8001220:	2200      	movs	r2, #0
 8001222:	2110      	movs	r1, #16
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <spi_gpio_transfer+0x78>)
 8001226:	f002 fa85 	bl	8003734 <HAL_GPIO_WritePin>

	if (status != HAL_OK) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <spi_gpio_transfer+0x3e>
		printf("DMA TX FAILED\r\n");
 8001230:	4810      	ldr	r0, [pc, #64]	@ (8001274 <spi_gpio_transfer+0x7c>)
 8001232:	f006 faff 	bl	8007834 <puts>
	}

	while (!tx_done);  // Wait for TX complete
 8001236:	bf00      	nop
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <spi_gpio_transfer+0x68>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0fa      	beq.n	8001238 <spi_gpio_transfer+0x40>

	printf("Done SPI DMA\r\n");
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <spi_gpio_transfer+0x80>)
 8001244:	f006 faf6 	bl	8007834 <puts>

	handle_spi_received_data(spi_rx_buffer, NUM_SAMPLES);
 8001248:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <spi_gpio_transfer+0x6c>)
 800124e:	f7ff ff53 	bl	80010f8 <handle_spi_received_data>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	0800b098 	.word	0x0800b098
 8001260:	200013ad 	.word	0x200013ad
 8001264:	20000bdc 	.word	0x20000bdc
 8001268:	2000040c 	.word	0x2000040c
 800126c:	20000248 	.word	0x20000248
 8001270:	40020000 	.word	0x40020000
 8001274:	0800b0b0 	.word	0x0800b0b0
 8001278:	0800b0c0 	.word	0x0800b0c0

0800127c <HAL_SPI_TxRxCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *) &start_frame, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t *) buffer, 2 * length, HAL_MAX_DELAY);
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_SPI_TxRxCpltCallback+0x30>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10a      	bne.n	80012a4 <HAL_SPI_TxRxCpltCallback+0x28>
	{
		printf("SPI Transfer Complete\r\n");
 800128e:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8001290:	f006 fad0 	bl	8007834 <puts>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2110      	movs	r1, #16
 8001298:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <HAL_SPI_TxRxCpltCallback+0x38>)
 800129a:	f002 fa4b 	bl	8003734 <HAL_GPIO_WritePin>
		tx_done = 1;
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
	}
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013000 	.word	0x40013000
 80012b0:	0800b0d0 	.word	0x0800b0d0
 80012b4:	40020000 	.word	0x40020000
 80012b8:	200013ad 	.word	0x200013ad

080012bc <dma_transfer_complete_callback>:

void dma_transfer_complete_callback(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	dma_done = 1;
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <dma_transfer_complete_callback+0x1c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
	printf("DMA Complete\r\n");
 80012ca:	4804      	ldr	r0, [pc, #16]	@ (80012dc <dma_transfer_complete_callback+0x20>)
 80012cc:	f006 fab2 	bl	8007834 <puts>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200013ac 	.word	0x200013ac
 80012dc:	0800b0e8 	.word	0x0800b0e8

080012e0 <register_dma_callbacks>:

void register_dma_callbacks()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, dma_transfer_complete_callback);
 80012e4:	4a03      	ldr	r2, [pc, #12]	@ (80012f4 <register_dma_callbacks+0x14>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <register_dma_callbacks+0x18>)
 80012ea:	f001 ff5b 	bl	80031a4 <HAL_DMA_RegisterCallback>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	080012bd 	.word	0x080012bd
 80012f8:	200003a8 	.word	0x200003a8

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f001 faf5 	bl	80028f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f85d 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f000 f9bf 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 800130e:	f000 f957 	bl	80015c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001312:	f000 f8c5 	bl	80014a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001316:	f000 f929 	bl	800156c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800131a:	f000 f8ef 	bl	80014fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	si5351_Init();
 800131e:	f000 fa37 	bl	8001790 <si5351_Init>

	// Set clock 0 to 16MHz
	// 25mhz crystal osc * 32 == 800MHz
	// 800MHz / 50 = 16Mhz
	//
	si5351_setupPLLInt(SI5351_PLL_A, 32);
 8001322:	2120      	movs	r1, #32
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fae9 	bl	80018fc <si5351_setupPLLInt>
	si5351_setupMultisynthInt(0, SI5351_PLL_A, 20);
 800132a:	2214      	movs	r2, #20
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fcc2 	bl	8001cb8 <si5351_setupMultisynthInt>
	si5351_setupRdiv(0, SI5351_R_DIV_1);
 8001334:	2100      	movs	r1, #0
 8001336:	2000      	movs	r0, #0
 8001338:	f000 fcd4 	bl	8001ce4 <si5351_setupRdiv>

	si5351_enableOutputs(0xFF);
 800133c:	20ff      	movs	r0, #255	@ 0xff
 800133e:	f000 ff91 	bl	8002264 <si5351_enableOutputs>

	printf("Clock IC Programmed\r\n");
 8001342:	481b      	ldr	r0, [pc, #108]	@ (80013b0 <main+0xb4>)
 8001344:	f006 fa76 	bl	8007834 <puts>

	gpio_buffer = (uint16_t *)malloc(50000 * sizeof(uint16_t));
 8001348:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <main+0xb8>)
 800134a:	f005 fa2f 	bl	80067ac <malloc>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <main+0xbc>)
 8001354:	601a      	str	r2, [r3, #0]

	register_dma_callbacks();
 8001356:	f7ff ffc3 	bl	80012e0 <register_dma_callbacks>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		sample_gpio_dma();
 800135a:	f7ff fe93 	bl	8001084 <sample_gpio_dma>

		while(!dma_done);
 800135e:	bf00      	nop
 8001360:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <main+0xc0>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0fa      	beq.n	8001360 <main+0x64>

		for (int i = 0; i < 10; ++i){
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	e015      	b.n	800139c <main+0xa0>
			printf("%X %X\r\n", gpio_buffer[i], gpio_buffer[i] & GPIO_MASK);
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <main+0xbc>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <main+0xbc>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	461a      	mov	r2, r3
 8001390:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <main+0xc4>)
 8001392:	f006 f9e7 	bl	8007764 <iprintf>
		for (int i = 0; i < 10; ++i){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b09      	cmp	r3, #9
 80013a0:	dde6      	ble.n	8001370 <main+0x74>
		}
		spi_gpio_transfer();
 80013a2:	f7ff ff29 	bl	80011f8 <spi_gpio_transfer>
		HAL_Delay(200);
 80013a6:	20c8      	movs	r0, #200	@ 0xc8
 80013a8:	f001 fb14 	bl	80029d4 <HAL_Delay>
		sample_gpio_dma();
 80013ac:	e7d5      	b.n	800135a <main+0x5e>
 80013ae:	bf00      	nop
 80013b0:	0800b0f8 	.word	0x0800b0f8
 80013b4:	000186a0 	.word	0x000186a0
 80013b8:	20000408 	.word	0x20000408
 80013bc:	200013ac 	.word	0x200013ac
 80013c0:	0800b110 	.word	0x0800b110

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	@ 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2234      	movs	r2, #52	@ 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fb30 	bl	8007a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <SystemClock_Config+0xd4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a29      	ldr	r2, [pc, #164]	@ (8001498 <SystemClock_Config+0xd4>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <SystemClock_Config+0xd4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <SystemClock_Config+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <SystemClock_Config+0xd8>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <SystemClock_Config+0xd8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142c:	2310      	movs	r3, #16
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001434:	2300      	movs	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001438:	2310      	movs	r3, #16
 800143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800143c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001440:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001442:	2304      	movs	r3, #4
 8001444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fe24 	bl	80050a0 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800145e:	f000 f991 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fac4 	bl	8004a0c <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800148a:	f000 f97b 	bl	8001784 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	@ 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <MX_I2C1_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014ac:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_I2C1_Init+0x58>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014de:	f002 f943 	bl	8003768 <HAL_I2C_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 f94c 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200001f4 	.word	0x200001f4
 80014f4:	40005400 	.word	0x40005400
 80014f8:	000186a0 	.word	0x000186a0

080014fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001502:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <MX_SPI1_Init+0x6c>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800150c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800151a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_SPI1_Init+0x68>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_SPI1_Init+0x68>)
 800152a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800152e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001532:	2230      	movs	r2, #48	@ 0x30
 8001534:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_SPI1_Init+0x68>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_SPI1_Init+0x68>)
 800154a:	220a      	movs	r2, #10
 800154c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_SPI1_Init+0x68>)
 8001550:	f004 f844 	bl	80055dc <HAL_SPI_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800155a:	f000 f913 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000248 	.word	0x20000248
 8001568:	40013000 	.word	0x40013000

0800156c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_USART2_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f004 fcf6 	bl	8005f94 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f000 f8e9 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000360 	.word	0x20000360
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <MX_DMA_Init+0xc0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001680 <MX_DMA_Init+0xc0>)
 80015d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <MX_DMA_Init+0xc0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <MX_DMA_Init+0xc4>)
 80015e4:	4a28      	ldr	r2, [pc, #160]	@ (8001688 <MX_DMA_Init+0xc8>)
 80015e6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80015e8:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <MX_DMA_Init+0xc4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <MX_DMA_Init+0xc4>)
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_DMA_Init+0xc4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <MX_DMA_Init+0xc4>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001600:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <MX_DMA_Init+0xc4>)
 8001604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001608:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160a:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_DMA_Init+0xc4>)
 800160c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001610:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_DMA_Init+0xc4>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_DMA_Init+0xc4>)
 800161a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800161e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_DMA_Init+0xc4>)
 8001622:	2204      	movs	r2, #4
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_DMA_Init+0xc4>)
 8001628:	2203      	movs	r2, #3
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_DMA_Init+0xc4>)
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_DMA_Init+0xc4>)
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001638:	4812      	ldr	r0, [pc, #72]	@ (8001684 <MX_DMA_Init+0xc4>)
 800163a:	f001 fb01 	bl	8002c40 <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8001644:	f000 f89e 	bl	8001784 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2038      	movs	r0, #56	@ 0x38
 800164e:	f001 fac0 	bl	8002bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001652:	2038      	movs	r0, #56	@ 0x38
 8001654:	f001 fad9 	bl	8002c0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	203a      	movs	r0, #58	@ 0x3a
 800165e:	f001 fab8 	bl	8002bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001662:	203a      	movs	r0, #58	@ 0x3a
 8001664:	f001 fad1 	bl	8002c0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	203b      	movs	r0, #59	@ 0x3b
 800166e:	f001 fab0 	bl	8002bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001672:	203b      	movs	r0, #59	@ 0x3b
 8001674:	f001 fac9 	bl	8002c0a <HAL_NVIC_EnableIRQ>

}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	200003a8 	.word	0x200003a8
 8001688:	40026410 	.word	0x40026410

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a33      	ldr	r2, [pc, #204]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a25      	ldr	r2, [pc, #148]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <MX_GPIO_Init+0xec>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <MX_GPIO_Init+0xec>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2110      	movs	r1, #16
 8001716:	4819      	ldr	r0, [pc, #100]	@ (800177c <MX_GPIO_Init+0xf0>)
 8001718:	f002 f80c 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001722:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4813      	ldr	r0, [pc, #76]	@ (8001780 <MX_GPIO_Init+0xf4>)
 8001734:	f001 fe6a 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001738:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800173c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <MX_GPIO_Init+0xf4>)
 800174e:	f001 fe5d 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001752:	2310      	movs	r3, #16
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_GPIO_Init+0xf0>)
 800176a:	f001 fe4f 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020800 	.word	0x40020800

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <si5351_Init>:
    Initializes I2C and configures the breakout (call this function before
    doing anything else)
*/
/**************************************************************************/
err_t si5351_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

	/*!
	    Constructor
	*/
	  m_si5351Config.initialised     = 0;
 8001796:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <si5351_Init+0x164>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 800179c:	4b55      	ldr	r3, [pc, #340]	@ (80018f4 <si5351_Init+0x164>)
 800179e:	4a56      	ldr	r2, [pc, #344]	@ (80018f8 <si5351_Init+0x168>)
 80017a0:	605a      	str	r2, [r3, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 80017a2:	4b54      	ldr	r3, [pc, #336]	@ (80018f4 <si5351_Init+0x164>)
 80017a4:	22c0      	movs	r2, #192	@ 0xc0
 80017a6:	721a      	strb	r2, [r3, #8]
	  m_si5351Config.crystalPPM      = 30;
 80017a8:	4b52      	ldr	r3, [pc, #328]	@ (80018f4 <si5351_Init+0x164>)
 80017aa:	221e      	movs	r2, #30
 80017ac:	60da      	str	r2, [r3, #12]
	  m_si5351Config.plla_configured = 0;
 80017ae:	4b51      	ldr	r3, [pc, #324]	@ (80018f4 <si5351_Init+0x164>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	741a      	strb	r2, [r3, #16]
	  m_si5351Config.plla_freq       = 0;
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <si5351_Init+0x164>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
	  m_si5351Config.pllb_configured = 0;
 80017ba:	4b4e      	ldr	r3, [pc, #312]	@ (80018f4 <si5351_Init+0x164>)
 80017bc:	2200      	movs	r2, #0
 80017be:	761a      	strb	r2, [r3, #24]
	  m_si5351Config.pllb_freq       = 0;
 80017c0:	4b4c      	ldr	r3, [pc, #304]	@ (80018f4 <si5351_Init+0x164>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
	  m_si5351Config.ms0_freq		 = 0;
 80017c6:	4b4b      	ldr	r3, [pc, #300]	@ (80018f4 <si5351_Init+0x164>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
	  m_si5351Config.ms1_freq		 = 0;
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <si5351_Init+0x164>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
	  m_si5351Config.ms2_freq		 = 0;
 80017d2:	4b48      	ldr	r3, [pc, #288]	@ (80018f4 <si5351_Init+0x164>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
	  m_si5351Config.ms0_r_div		 = 0;
 80017d8:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <si5351_Init+0x164>)
 80017da:	2200      	movs	r2, #0
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	  m_si5351Config.ms1_r_div		 = 0;
 80017de:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <si5351_Init+0x164>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
	  m_si5351Config.ms2_r_div		 = 0;
 80017e4:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <si5351_Init+0x164>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	635a      	str	r2, [r3, #52]	@ 0x34



  /* Disable all outputs setting CLKx_DIS high */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 80017ea:	21ff      	movs	r1, #255	@ 0xff
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 fd5d 	bl	80022ac <si5351_write8>
 80017f2:	4603      	mov	r3, r0
 80017f4:	82fb      	strh	r3, [r7, #22]
 80017f6:	8afb      	ldrh	r3, [r7, #22]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <si5351_Init+0x70>
 80017fc:	8afb      	ldrh	r3, [r7, #22]
 80017fe:	e074      	b.n	80018ea <si5351_Init+0x15a>

  /* Power down all output drivers */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	2010      	movs	r0, #16
 8001804:	f000 fd52 	bl	80022ac <si5351_write8>
 8001808:	4603      	mov	r3, r0
 800180a:	82bb      	strh	r3, [r7, #20]
 800180c:	8abb      	ldrh	r3, [r7, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <si5351_Init+0x86>
 8001812:	8abb      	ldrh	r3, [r7, #20]
 8001814:	e069      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	2011      	movs	r0, #17
 800181a:	f000 fd47 	bl	80022ac <si5351_write8>
 800181e:	4603      	mov	r3, r0
 8001820:	827b      	strh	r3, [r7, #18]
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <si5351_Init+0x9c>
 8001828:	8a7b      	ldrh	r3, [r7, #18]
 800182a:	e05e      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	2012      	movs	r0, #18
 8001830:	f000 fd3c 	bl	80022ac <si5351_write8>
 8001834:	4603      	mov	r3, r0
 8001836:	823b      	strh	r3, [r7, #16]
 8001838:	8a3b      	ldrh	r3, [r7, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <si5351_Init+0xb2>
 800183e:	8a3b      	ldrh	r3, [r7, #16]
 8001840:	e053      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	2013      	movs	r0, #19
 8001846:	f000 fd31 	bl	80022ac <si5351_write8>
 800184a:	4603      	mov	r3, r0
 800184c:	81fb      	strh	r3, [r7, #14]
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <si5351_Init+0xc8>
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	e048      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	2014      	movs	r0, #20
 800185c:	f000 fd26 	bl	80022ac <si5351_write8>
 8001860:	4603      	mov	r3, r0
 8001862:	81bb      	strh	r3, [r7, #12]
 8001864:	89bb      	ldrh	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <si5351_Init+0xde>
 800186a:	89bb      	ldrh	r3, [r7, #12]
 800186c:	e03d      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 800186e:	2180      	movs	r1, #128	@ 0x80
 8001870:	2015      	movs	r0, #21
 8001872:	f000 fd1b 	bl	80022ac <si5351_write8>
 8001876:	4603      	mov	r3, r0
 8001878:	817b      	strh	r3, [r7, #10]
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <si5351_Init+0xf4>
 8001880:	897b      	ldrh	r3, [r7, #10]
 8001882:	e032      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	2016      	movs	r0, #22
 8001888:	f000 fd10 	bl	80022ac <si5351_write8>
 800188c:	4603      	mov	r3, r0
 800188e:	813b      	strh	r3, [r7, #8]
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <si5351_Init+0x10a>
 8001896:	893b      	ldrh	r3, [r7, #8]
 8001898:	e027      	b.n	80018ea <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	2017      	movs	r0, #23
 800189e:	f000 fd05 	bl	80022ac <si5351_write8>
 80018a2:	4603      	mov	r3, r0
 80018a4:	80fb      	strh	r3, [r7, #6]
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <si5351_Init+0x120>
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	e01c      	b.n	80018ea <si5351_Init+0x15a>

  /* Set the load capacitance for the XTAL */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <si5351_Init+0x164>)
 80018b2:	7a1b      	ldrb	r3, [r3, #8]
 80018b4:	4619      	mov	r1, r3
 80018b6:	20b7      	movs	r0, #183	@ 0xb7
 80018b8:	f000 fcf8 	bl	80022ac <si5351_write8>
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <si5351_Init+0x13a>
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	e00f      	b.n	80018ea <si5351_Init+0x15a>
     By default, ClockBuilder Desktop sets this register to 0x18.
     Note that the least significant nibble must remain 0x8, but the most
     significant nibble may be modified to suit your needs. */

  /* Reset the PLL config fields just in case we call init again */
  m_si5351Config.plla_configured = 0;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <si5351_Init+0x164>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	741a      	strb	r2, [r3, #16]
  m_si5351Config.plla_freq = 0;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <si5351_Init+0x164>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  m_si5351Config.pllb_configured = 0;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <si5351_Init+0x164>)
 80018d8:	2200      	movs	r2, #0
 80018da:	761a      	strb	r2, [r3, #24]
  m_si5351Config.pllb_freq = 0;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <si5351_Init+0x164>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]

  /* All done! */
  m_si5351Config.initialised = 1;
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <si5351_Init+0x164>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]

  return ERROR_NONE;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200013b0 	.word	0x200013b0
 80018f8:	017d7840 	.word	0x017d7840

080018fc <si5351_setupPLLInt>:
                - SI5351_PLL_B
  @param  mult  The PLL integer multiplier (must be between 15 and 90)
*/
/**************************************************************************/
err_t si5351_setupPLLInt(si5351PLL_t pll, uint8_t mult)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	4613      	mov	r3, r2
 800190a:	71bb      	strb	r3, [r7, #6]
  return si5351_setupPLL(pll, mult, 0, 1);
 800190c:	79b9      	ldrb	r1, [r7, #6]
 800190e:	79f8      	ldrb	r0, [r7, #7]
 8001910:	2301      	movs	r3, #1
 8001912:	2200      	movs	r2, #0
 8001914:	f000 f806 	bl	8001924 <si5351_setupPLL>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <si5351_setupPLL>:
/**************************************************************************/
err_t si5351_setupPLL(si5351PLL_t pll,
                                uint8_t     mult,
                                uint32_t    num,
                                uint32_t    denom)
{
 8001924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001928:	b08e      	sub	sp, #56	@ 0x38
 800192a:	af00      	add	r7, sp, #0
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	460b      	mov	r3, r1
 8001936:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* PLL config register P1 */
  uint32_t P2;	     /* PLL config register P2 */
  uint32_t P3;	     /* PLL config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8001938:	4ba5      	ldr	r3, [pc, #660]	@ (8001bd0 <si5351_setupPLL+0x2ac>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <si5351_setupPLL+0x20>
 8001940:	2305      	movs	r3, #5
 8001942:	e1b2      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	2b0e      	cmp	r3, #14
 8001948:	d902      	bls.n	8001950 <si5351_setupPLL+0x2c>
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	2b5a      	cmp	r3, #90	@ 0x5a
 800194e:	d901      	bls.n	8001954 <si5351_setupPLL+0x30>
 8001950:	2304      	movs	r3, #4
 8001952:	e1aa      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT( denom > 0,                  ERROR_INVALIDPARAMETER ); /* Avoid divide by zero */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <si5351_setupPLL+0x3a>
 800195a:	2304      	movs	r3, #4
 800195c:	e1a5      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001964:	d301      	bcc.n	800196a <si5351_setupPLL+0x46>
 8001966:	2304      	movs	r3, #4
 8001968:	e19f      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001970:	d301      	bcc.n	8001976 <si5351_setupPLL+0x52>
 8001972:	2304      	movs	r3, #4
 8001974:	e199      	b.n	8001caa <si5351_setupPLL+0x386>
   *
   * 	P3[19:0] = denom
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d108      	bne.n	800198e <si5351_setupPLL+0x6a>
  {
    /* Integer mode */
    P1 = 128 * mult - 512;
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	3b04      	subs	r3, #4
 8001980:	01db      	lsls	r3, r3, #7
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
    P2 = num;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
    P3 = denom;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198c:	e074      	b.n	8001a78 <si5351_setupPLL+0x154>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	01db      	lsls	r3, r3, #7
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fde6 	bl	8000564 <__aeabi_i2d>
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b4:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001bd4 <si5351_setupPLL+0x2b0>
 80019b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019bc:	ee17 0a90 	vmov	r0, s15
 80019c0:	f7fe fde2 	bl	8000588 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ec43 2b10 	vmov	d0, r2, r3
 80019cc:	f009 facc 	bl	800af68 <floor>
 80019d0:	ec53 2b10 	vmov	r2, r3, d0
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe fc78 	bl	80002cc <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80019ec:	f7fe fc6c 	bl	80002c8 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f8f6 	bl	8000be8 <__aeabi_d2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	01db      	lsls	r3, r3, #7
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd9d 	bl	8000544 <__aeabi_ui2d>
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460d      	mov	r5, r1
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fd98 	bl	8000544 <__aeabi_ui2d>
 8001a14:	4680      	mov	r8, r0
 8001a16:	4689      	mov	r9, r1
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001bd4 <si5351_setupPLL+0x2b0>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	ee17 0a90 	vmov	r0, s15
 8001a3c:	f7fe fda4 	bl	8000588 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	ec43 2b10 	vmov	d0, r2, r3
 8001a48:	f009 fa8e 	bl	800af68 <floor>
 8001a4c:	ec53 2b10 	vmov	r2, r3, d0
 8001a50:	4640      	mov	r0, r8
 8001a52:	4649      	mov	r1, r9
 8001a54:	f7fe fdf0 	bl	8000638 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fc32 	bl	80002c8 <__aeabi_dsub>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f8bc 	bl	8000be8 <__aeabi_d2uiz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
    P3 = denom;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <si5351_setupPLL+0x15e>
 8001a7e:	231a      	movs	r3, #26
 8001a80:	e000      	b.n	8001a84 <si5351_setupPLL+0x160>
 8001a82:	2322      	movs	r3, #34	@ 0x22
 8001a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* The datasheet is a nightmare of typos and inconsistencies here! */
  ASSERT_STATUS( si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8));
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fc09 	bl	80022ac <si5351_write8>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001a9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <si5351_setupPLL+0x184>
 8001aa4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001aa6:	e100      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+1, (P3 & 0x000000FF)));
 8001aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fbf8 	bl	80022ac <si5351_write8>
 8001abc:	4603      	mov	r3, r0
 8001abe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ac0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <si5351_setupPLL+0x1a6>
 8001ac6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ac8:	e0ef      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16));
 8001aca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ace:	3302      	adds	r3, #2
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f000 fbe3 	bl	80022ac <si5351_write8>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001aea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <si5351_setupPLL+0x1d0>
 8001af0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001af2:	e0da      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8));
 8001af4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001af8:	3303      	adds	r3, #3
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f000 fbd1 	bl	80022ac <si5351_write8>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001b0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <si5351_setupPLL+0x1f4>
 8001b14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b16:	e0c8      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+4, (P1 & 0x000000FF)));
 8001b18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fbc0 	bl	80022ac <si5351_write8>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	843b      	strh	r3, [r7, #32]
 8001b30:	8c3b      	ldrh	r3, [r7, #32]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <si5351_setupPLL+0x216>
 8001b36:	8c3b      	ldrh	r3, [r7, #32]
 8001b38:	e0b7      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) ));
 8001b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b3e:	3305      	adds	r3, #5
 8001b40:	b2d8      	uxtb	r0, r3
 8001b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b44:	0b1b      	lsrs	r3, r3, #12
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f000 fba4 	bl	80022ac <si5351_write8>
 8001b64:	4603      	mov	r3, r0
 8001b66:	83fb      	strh	r3, [r7, #30]
 8001b68:	8bfb      	ldrh	r3, [r7, #30]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <si5351_setupPLL+0x24e>
 8001b6e:	8bfb      	ldrh	r3, [r7, #30]
 8001b70:	e09b      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8));
 8001b72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b76:	3306      	adds	r3, #6
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f000 fb92 	bl	80022ac <si5351_write8>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	83bb      	strh	r3, [r7, #28]
 8001b8c:	8bbb      	ldrh	r3, [r7, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <si5351_setupPLL+0x272>
 8001b92:	8bbb      	ldrh	r3, [r7, #28]
 8001b94:	e089      	b.n	8001caa <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+7, (P2 & 0x000000FF)));
 8001b96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b9a:	3307      	adds	r3, #7
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fb81 	bl	80022ac <si5351_write8>
 8001baa:	4603      	mov	r3, r0
 8001bac:	837b      	strh	r3, [r7, #26]
 8001bae:	8b7b      	ldrh	r3, [r7, #26]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <si5351_setupPLL+0x294>
 8001bb4:	8b7b      	ldrh	r3, [r7, #26]
 8001bb6:	e078      	b.n	8001caa <si5351_setupPLL+0x386>

  /* Reset both PLLs */
  ASSERT_STATUS( si5351_write8(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) ));
 8001bb8:	21a0      	movs	r1, #160	@ 0xa0
 8001bba:	20b1      	movs	r0, #177	@ 0xb1
 8001bbc:	f000 fb76 	bl	80022ac <si5351_write8>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	833b      	strh	r3, [r7, #24]
 8001bc4:	8b3b      	ldrh	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <si5351_setupPLL+0x2b4>
 8001bca:	8b3b      	ldrh	r3, [r7, #24]
 8001bcc:	e06d      	b.n	8001caa <si5351_setupPLL+0x386>
 8001bce:	bf00      	nop
 8001bd0:	200013b0 	.word	0x200013b0
 8001bd4:	43000000 	.word	0x43000000

  /* Store the frequency settings for use with the Multisynth helper */
  if (pll == SI5351_PLL_A)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d132      	bne.n	8001c44 <si5351_setupPLL+0x320>
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001bde:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <si5351_setupPLL+0x390>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001c08:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	edc7 7a04 	vstr	s15, [r7, #16]
    m_si5351Config.plla_configured = 1; //true
 8001c18:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <si5351_setupPLL+0x390>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	741a      	strb	r2, [r3, #16]
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 8001c1e:	6938      	ldr	r0, [r7, #16]
 8001c20:	f7fe fcb2 	bl	8000588 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	ec43 2b10 	vmov	d0, r2, r3
 8001c2c:	f009 f99c 	bl	800af68 <floor>
 8001c30:	ec53 2b10 	vmov	r2, r3, d0
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ffd6 	bl	8000be8 <__aeabi_d2uiz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <si5351_setupPLL+0x390>)
 8001c40:	6153      	str	r3, [r2, #20]
 8001c42:	e031      	b.n	8001ca8 <si5351_setupPLL+0x384>
  }
  else
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <si5351_setupPLL+0x390>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c50:	7bbb      	ldrb	r3, [r7, #14]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001c6e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	edc7 7a05 	vstr	s15, [r7, #20]
    m_si5351Config.pllb_configured = 1; //true
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <si5351_setupPLL+0x390>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	761a      	strb	r2, [r3, #24]
    m_si5351Config.pllb_freq = (uint32_t)floor(fvco);
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fc7f 	bl	8000588 <__aeabi_f2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	ec43 2b10 	vmov	d0, r2, r3
 8001c92:	f009 f969 	bl	800af68 <floor>
 8001c96:	ec53 2b10 	vmov	r2, r3, d0
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ffa3 	bl	8000be8 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a03      	ldr	r2, [pc, #12]	@ (8001cb4 <si5351_setupPLL+0x390>)
 8001ca6:	61d3      	str	r3, [r2, #28]
  }

  return ERROR_NONE;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3738      	adds	r7, #56	@ 0x38
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cb4:	200013b0 	.word	0x200013b0

08001cb8 <si5351_setupMultisynthInt>:
*/
/**************************************************************************/
err_t si5351_setupMultisynthInt(uint8_t               output,
                                          si5351PLL_t           pllSource,
                                          si5351MultisynthDiv_t div)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	71bb      	strb	r3, [r7, #6]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	717b      	strb	r3, [r7, #5]
  return si5351_setupMultisynth(output, pllSource, div, 0, 1);
 8001cca:	797a      	ldrb	r2, [r7, #5]
 8001ccc:	79b9      	ldrb	r1, [r7, #6]
 8001cce:	79f8      	ldrb	r0, [r7, #7]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f000 f88d 	bl	8001df4 <si5351_setupMultisynth>
 8001cda:	4603      	mov	r3, r0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <si5351_setupRdiv>:


err_t si5351_setupRdiv(uint8_t  output, si5351RDiv_t div) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	460a      	mov	r2, r1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71bb      	strb	r3, [r7, #6]
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <si5351_setupRdiv+0x1a>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e073      	b.n	8001de6 <si5351_setupRdiv+0x102>
  
  uint8_t Rreg, regval, rDiv;

  if (output == 0) Rreg = SI5351_REGISTER_44_MULTISYNTH0_PARAMETERS_3;
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <si5351_setupRdiv+0x24>
 8001d04:	232c      	movs	r3, #44	@ 0x2c
 8001d06:	73fb      	strb	r3, [r7, #15]
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <si5351_setupRdiv+0x2e>
 8001d0e:	2334      	movs	r3, #52	@ 0x34
 8001d10:	73fb      	strb	r3, [r7, #15]
  if (output == 2) Rreg = SI5351_REGISTER_60_MULTISYNTH2_PARAMETERS_3;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d101      	bne.n	8001d1c <si5351_setupRdiv+0x38>
 8001d18:	233c      	movs	r3, #60	@ 0x3c
 8001d1a:	73fb      	strb	r3, [r7, #15]

  si5351_read8(Rreg, &regval);
 8001d1c:	f107 020c 	add.w	r2, r7, #12
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 faed 	bl	8002304 <si5351_read8>

  regval &= 0x0F;
 8001d2a:	7b3b      	ldrb	r3, [r7, #12]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	733b      	strb	r3, [r7, #12]
  uint8_t divider = div;
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	737b      	strb	r3, [r7, #13]
  divider &= 0x07;
 8001d38:	7b7b      	ldrb	r3, [r7, #13]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	737b      	strb	r3, [r7, #13]
  divider <<= 4;
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	737b      	strb	r3, [r7, #13]
  regval |= divider;
 8001d46:	7b3a      	ldrb	r2, [r7, #12]
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	733b      	strb	r3, [r7, #12]
  si5351_write8(Rreg, regval);
 8001d50:	7b3a      	ldrb	r2, [r7, #12]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 faa8 	bl	80022ac <si5351_write8>

  switch(div)
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	d82a      	bhi.n	8001db8 <si5351_setupRdiv+0xd4>
 8001d62:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <si5351_setupRdiv+0x84>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001d89 	.word	0x08001d89
 8001d6c:	08001d8f 	.word	0x08001d8f
 8001d70:	08001d95 	.word	0x08001d95
 8001d74:	08001d9b 	.word	0x08001d9b
 8001d78:	08001da1 	.word	0x08001da1
 8001d7c:	08001da7 	.word	0x08001da7
 8001d80:	08001dad 	.word	0x08001dad
 8001d84:	08001db3 	.word	0x08001db3
  {
  case 0:
  rDiv = 1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73bb      	strb	r3, [r7, #14]
  break;
 8001d8c:	e014      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 1:
  rDiv = 2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	73bb      	strb	r3, [r7, #14]
  break;
 8001d92:	e011      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 2:
  rDiv = 4;
 8001d94:	2304      	movs	r3, #4
 8001d96:	73bb      	strb	r3, [r7, #14]
  break;
 8001d98:	e00e      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 3:
  rDiv = 8;
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	73bb      	strb	r3, [r7, #14]
  break;
 8001d9e:	e00b      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 4:
  rDiv = 16;
 8001da0:	2310      	movs	r3, #16
 8001da2:	73bb      	strb	r3, [r7, #14]
  break;
 8001da4:	e008      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 5:
  rDiv = 32;
 8001da6:	2320      	movs	r3, #32
 8001da8:	73bb      	strb	r3, [r7, #14]
  break;
 8001daa:	e005      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 6:
  rDiv = 64;
 8001dac:	2340      	movs	r3, #64	@ 0x40
 8001dae:	73bb      	strb	r3, [r7, #14]
  break;
 8001db0:	e002      	b.n	8001db8 <si5351_setupRdiv+0xd4>

  case 7:
  rDiv = 128;
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	73bb      	strb	r3, [r7, #14]
  break;
 8001db6:	bf00      	nop
  }

  switch(output)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d00e      	beq.n	8001ddc <si5351_setupRdiv+0xf8>
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	dc10      	bgt.n	8001de4 <si5351_setupRdiv+0x100>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <si5351_setupRdiv+0xe8>
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d004      	beq.n	8001dd4 <si5351_setupRdiv+0xf0>
 8001dca:	e00b      	b.n	8001de4 <si5351_setupRdiv+0x100>
  {
  case 0:
  m_si5351Config.ms0_r_div = rDiv;
 8001dcc:	7bbb      	ldrb	r3, [r7, #14]
 8001dce:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <si5351_setupRdiv+0x10c>)
 8001dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  break;
 8001dd2:	e007      	b.n	8001de4 <si5351_setupRdiv+0x100>

  case 1:
  m_si5351Config.ms1_r_div = rDiv;
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <si5351_setupRdiv+0x10c>)
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
  break;
 8001dda:	e003      	b.n	8001de4 <si5351_setupRdiv+0x100>

  case 2:
  m_si5351Config.ms2_r_div = rDiv;
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <si5351_setupRdiv+0x10c>)
 8001de0:	6353      	str	r3, [r2, #52]	@ 0x34
  break;
 8001de2:	bf00      	nop
  }

  return ERROR_NONE;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200013b0 	.word	0x200013b0

08001df4 <si5351_setupMultisynth>:
err_t si5351_setupMultisynth(uint8_t     output,
                                       si5351PLL_t pllSource,
                                       uint32_t    div,
                                       uint32_t    num,
                                       uint32_t    denom)
{
 8001df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df8:	b08c      	sub	sp, #48	@ 0x30
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	460b      	mov	r3, r1
 8001e06:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* Multisynth config register P1 */
  uint32_t P2;	     /* Multisynth config register P2 */
  uint32_t P3;	     /* Multisynth config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 8001e08:	4bba      	ldr	r3, [pc, #744]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <si5351_setupMultisynth+0x20>
 8001e10:	2305      	movs	r3, #5
 8001e12:	e21f      	b.n	8002254 <si5351_setupMultisynth+0x460>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <si5351_setupMultisynth+0x2a>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e21a      	b.n	8002254 <si5351_setupMultisynth+0x460>
  //ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
  //ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */


  /* Make sure the requested PLL has been initialised */
  if (pllSource == SI5351_PLL_A)
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <si5351_setupMultisynth+0x38>
  {
    ASSERT(m_si5351Config.plla_configured = 1, ERROR_INVALIDPARAMETER);
 8001e24:	4bb3      	ldr	r3, [pc, #716]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	741a      	strb	r2, [r3, #16]
 8001e2a:	e002      	b.n	8001e32 <si5351_setupMultisynth+0x3e>
  }
  else
  {
    ASSERT(m_si5351Config.pllb_configured = 1, ERROR_INVALIDPARAMETER);
 8001e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	761a      	strb	r2, [r3, #24]
   *
   * 	P3[19:0] = c
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <si5351_setupMultisynth+0x5a>
  {
    /* Integer mode */
    P1 = 128 * div - 512;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    P2 = num;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    P3 = denom;
 8001e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4c:	e074      	b.n	8001f38 <si5351_setupMultisynth+0x144>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num/(float)denom)) - 512);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	01db      	lsls	r3, r3, #7
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb76 	bl	8000544 <__aeabi_ui2d>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	460d      	mov	r5, r1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e74:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80020f8 <si5351_setupMultisynth+0x304>
 8001e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7c:	ee17 0a90 	vmov	r0, s15
 8001e80:	f7fe fb82 	bl	8000588 <__aeabi_f2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	ec43 2b10 	vmov	d0, r2, r3
 8001e8c:	f009 f86c 	bl	800af68 <floor>
 8001e90:	ec53 2b10 	vmov	r2, r3, d0
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe fa18 	bl	80002cc <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001eac:	f7fe fa0c 	bl	80002c8 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe96 	bl	8000be8 <__aeabi_d2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb3d 	bl	8000544 <__aeabi_ui2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001ed0:	f7fe fb38 	bl	8000544 <__aeabi_ui2d>
 8001ed4:	4680      	mov	r8, r0
 8001ed6:	4689      	mov	r9, r1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef0:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80020f8 <si5351_setupMultisynth+0x304>
 8001ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef8:	ee17 0a90 	vmov	r0, s15
 8001efc:	f7fe fb44 	bl	8000588 <__aeabi_f2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	ec43 2b10 	vmov	d0, r2, r3
 8001f08:	f009 f82e 	bl	800af68 <floor>
 8001f0c:	ec53 2b10 	vmov	r2, r3, d0
 8001f10:	4640      	mov	r0, r8
 8001f12:	4649      	mov	r1, r9
 8001f14:	f7fe fb90 	bl	8000638 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe f9d2 	bl	80002c8 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe5c 	bl	8000be8 <__aeabi_d2uiz>
 8001f30:	4603      	mov	r3, r0
 8001f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    P3 = denom;
 8001f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  switch (output)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d00e      	beq.n	8001f62 <si5351_setupMultisynth+0x16e>
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	dc10      	bgt.n	8001f6a <si5351_setupMultisynth+0x176>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <si5351_setupMultisynth+0x15e>
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d004      	beq.n	8001f5a <si5351_setupMultisynth+0x166>
 8001f50:	e00b      	b.n	8001f6a <si5351_setupMultisynth+0x176>
  {
    case 0:
      baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8001f52:	232a      	movs	r3, #42	@ 0x2a
 8001f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 8001f58:	e007      	b.n	8001f6a <si5351_setupMultisynth+0x176>
    case 1:
      baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8001f5a:	2332      	movs	r3, #50	@ 0x32
 8001f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 8001f60:	e003      	b.n	8001f6a <si5351_setupMultisynth+0x176>
    case 2:
      baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8001f62:	233a      	movs	r3, #58	@ 0x3a
 8001f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 8001f68:	bf00      	nop
  }

  /* Set the MSx config registers */
  si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f998 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+1, (P3 & 0x000000FF));
 8001f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f98e 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16);	/* ToDo: Add DIVBY4 (>150MHz) and R0 support (<500kHz) later */
 8001f90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f94:	3302      	adds	r3, #2
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f000 f980 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8);
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	f000 f975 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+4, (P1 & 0x000000FF));
 8001fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f96b 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) );
 8001fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fda:	3305      	adds	r3, #5
 8001fdc:	b2d8      	uxtb	r0, r3
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	0b1b      	lsrs	r3, r3, #12
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f023 030f 	bic.w	r3, r3, #15
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f000 f956 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8);
 8002000:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002004:	3306      	adds	r3, #6
 8002006:	b2da      	uxtb	r2, r3
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f000 f94b 	bl	80022ac <si5351_write8>
  si5351_write8( baseaddr+7, (P2 & 0x000000FF));
 8002016:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800201a:	3307      	adds	r3, #7
 800201c:	b2db      	uxtb	r3, r3
 800201e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f941 	bl	80022ac <si5351_write8>


  if (pllSource == SI5351_PLL_A)
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d165      	bne.n	80020fc <si5351_setupMultisynth+0x308>
  {
          float fvco = m_si5351Config.plla_freq / (div + ( (float)num / (float)denom ));
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8002050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800205a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800205e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002066:	edc7 7a06 	vstr	s15, [r7, #24]
          switch (output)
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d02d      	beq.n	80020cc <si5351_setupMultisynth+0x2d8>
 8002070:	2b02      	cmp	r3, #2
 8002072:	f300 80a3 	bgt.w	80021bc <si5351_setupMultisynth+0x3c8>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <si5351_setupMultisynth+0x28c>
 800207a:	2b01      	cmp	r3, #1
 800207c:	d013      	beq.n	80020a6 <si5351_setupMultisynth+0x2b2>
 800207e:	e09d      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 8002080:	69b8      	ldr	r0, [r7, #24]
 8002082:	f7fe fa81 	bl	8000588 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ec43 2b10 	vmov	d0, r2, r3
 800208e:	f008 ff6b 	bl	800af68 <floor>
 8002092:	ec53 2b10 	vmov	r2, r3, d0
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fda5 	bl	8000be8 <__aeabi_d2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 80020a2:	6213      	str	r3, [r2, #32]
           break;
 80020a4:	e08a      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 80020a6:	69b8      	ldr	r0, [r7, #24]
 80020a8:	f7fe fa6e 	bl	8000588 <__aeabi_f2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f008 ff58 	bl	800af68 <floor>
 80020b8:	ec53 2b10 	vmov	r2, r3, d0
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fd92 	bl	8000be8 <__aeabi_d2uiz>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a0b      	ldr	r2, [pc, #44]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 80020c8:	6253      	str	r3, [r2, #36]	@ 0x24
           break;
 80020ca:	e077      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 80020cc:	69b8      	ldr	r0, [r7, #24]
 80020ce:	f7fe fa5b 	bl	8000588 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	ec43 2b10 	vmov	d0, r2, r3
 80020da:	f008 ff45 	bl	800af68 <floor>
 80020de:	ec53 2b10 	vmov	r2, r3, d0
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fd7f 	bl	8000be8 <__aeabi_d2uiz>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a01      	ldr	r2, [pc, #4]	@ (80020f4 <si5351_setupMultisynth+0x300>)
 80020ee:	6293      	str	r3, [r2, #40]	@ 0x28
           break;
 80020f0:	e064      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
 80020f2:	bf00      	nop
 80020f4:	200013b0 	.word	0x200013b0
 80020f8:	43000000 	.word	0x43000000
          }
  }
  else
  {
          float fvco = m_si5351Config.pllb_freq / (div + ( (float)num / (float)denom));
 80020fc:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <si5351_setupMultisynth+0x46c>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800211c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002126:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800212a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002132:	edc7 7a07 	vstr	s15, [r7, #28]
          switch (output)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d02c      	beq.n	8002196 <si5351_setupMultisynth+0x3a2>
 800213c:	2b02      	cmp	r3, #2
 800213e:	dc3d      	bgt.n	80021bc <si5351_setupMultisynth+0x3c8>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <si5351_setupMultisynth+0x356>
 8002144:	2b01      	cmp	r3, #1
 8002146:	d013      	beq.n	8002170 <si5351_setupMultisynth+0x37c>
 8002148:	e038      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 800214a:	69f8      	ldr	r0, [r7, #28]
 800214c:	f7fe fa1c 	bl	8000588 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	ec43 2b10 	vmov	d0, r2, r3
 8002158:	f008 ff06 	bl	800af68 <floor>
 800215c:	ec53 2b10 	vmov	r2, r3, d0
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fd40 	bl	8000be8 <__aeabi_d2uiz>
 8002168:	4603      	mov	r3, r0
 800216a:	4a3d      	ldr	r2, [pc, #244]	@ (8002260 <si5351_setupMultisynth+0x46c>)
 800216c:	6213      	str	r3, [r2, #32]
           break;
 800216e:	e025      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 8002170:	69f8      	ldr	r0, [r7, #28]
 8002172:	f7fe fa09 	bl	8000588 <__aeabi_f2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ec43 2b10 	vmov	d0, r2, r3
 800217e:	f008 fef3 	bl	800af68 <floor>
 8002182:	ec53 2b10 	vmov	r2, r3, d0
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fd2d 	bl	8000be8 <__aeabi_d2uiz>
 800218e:	4603      	mov	r3, r0
 8002190:	4a33      	ldr	r2, [pc, #204]	@ (8002260 <si5351_setupMultisynth+0x46c>)
 8002192:	6253      	str	r3, [r2, #36]	@ 0x24
           break;
 8002194:	e012      	b.n	80021bc <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8002196:	69f8      	ldr	r0, [r7, #28]
 8002198:	f7fe f9f6 	bl	8000588 <__aeabi_f2d>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	ec43 2b10 	vmov	d0, r2, r3
 80021a4:	f008 fee0 	bl	800af68 <floor>
 80021a8:	ec53 2b10 	vmov	r2, r3, d0
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fd1a 	bl	8000be8 <__aeabi_d2uiz>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002260 <si5351_setupMultisynth+0x46c>)
 80021b8:	6293      	str	r3, [r2, #40]	@ 0x28
           break;
 80021ba:	bf00      	nop
  }



  /* Configure the clk control and enable the output */
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 80021bc:	230f      	movs	r3, #15
 80021be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (pllSource == SI5351_PLL_B) clkControlReg |= (1 << 5); /* Uses PLLB */
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <si5351_setupMultisynth+0x3e0>
 80021c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <si5351_setupMultisynth+0x3f2>
 80021da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  switch (output)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d020      	beq.n	800222e <si5351_setupMultisynth+0x43a>
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	dc30      	bgt.n	8002252 <si5351_setupMultisynth+0x45e>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <si5351_setupMultisynth+0x406>
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d00d      	beq.n	8002214 <si5351_setupMultisynth+0x420>
 80021f8:	e02b      	b.n	8002252 <si5351_setupMultisynth+0x45e>
  {
    case 0:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg));
 80021fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021fe:	4619      	mov	r1, r3
 8002200:	2010      	movs	r0, #16
 8002202:	f000 f853 	bl	80022ac <si5351_write8>
 8002206:	4603      	mov	r3, r0
 8002208:	827b      	strh	r3, [r7, #18]
 800220a:	8a7b      	ldrh	r3, [r7, #18]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01b      	beq.n	8002248 <si5351_setupMultisynth+0x454>
 8002210:	8a7b      	ldrh	r3, [r7, #18]
 8002212:	e01f      	b.n	8002254 <si5351_setupMultisynth+0x460>
      break;
    case 1:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg));
 8002214:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002218:	4619      	mov	r1, r3
 800221a:	2011      	movs	r0, #17
 800221c:	f000 f846 	bl	80022ac <si5351_write8>
 8002220:	4603      	mov	r3, r0
 8002222:	82bb      	strh	r3, [r7, #20]
 8002224:	8abb      	ldrh	r3, [r7, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <si5351_setupMultisynth+0x458>
 800222a:	8abb      	ldrh	r3, [r7, #20]
 800222c:	e012      	b.n	8002254 <si5351_setupMultisynth+0x460>
      break;
    case 2:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 800222e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002232:	4619      	mov	r1, r3
 8002234:	2012      	movs	r0, #18
 8002236:	f000 f839 	bl	80022ac <si5351_write8>
 800223a:	4603      	mov	r3, r0
 800223c:	82fb      	strh	r3, [r7, #22]
 800223e:	8afb      	ldrh	r3, [r7, #22]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <si5351_setupMultisynth+0x45c>
 8002244:	8afb      	ldrh	r3, [r7, #22]
 8002246:	e005      	b.n	8002254 <si5351_setupMultisynth+0x460>
      break;
 8002248:	bf00      	nop
 800224a:	e002      	b.n	8002252 <si5351_setupMultisynth+0x45e>
      break;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <si5351_setupMultisynth+0x45e>
      break;
 8002250:	bf00      	nop
  }

  return ERROR_NONE;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3730      	adds	r7, #48	@ 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800225e:	bf00      	nop
 8002260:	200013b0 	.word	0x200013b0

08002264 <si5351_enableOutputs>:
/*!
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t si5351_enableOutputs(uint8_t enabled)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  /* Make sure we've called init first */
  ASSERT(m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <si5351_enableOutputs+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <si5351_enableOutputs+0x16>
 8002276:	2305      	movs	r3, #5
 8002278:	e011      	b.n	800229e <si5351_enableOutputs+0x3a>

  /* Enabled desired outputs (see Register 3) */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00: 0xFF));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <si5351_enableOutputs+0x20>
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <si5351_enableOutputs+0x22>
 8002284:	23ff      	movs	r3, #255	@ 0xff
 8002286:	4619      	mov	r1, r3
 8002288:	2003      	movs	r0, #3
 800228a:	f000 f80f 	bl	80022ac <si5351_write8>
 800228e:	4603      	mov	r3, r0
 8002290:	81fb      	strh	r3, [r7, #14]
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <si5351_enableOutputs+0x38>
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	e000      	b.n	800229e <si5351_enableOutputs+0x3a>

  return ERROR_NONE;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200013b0 	.word	0x200013b0

080022ac <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af04      	add	r7, sp, #16
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  
	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 80022c0:	bf00      	nop
 80022c2:	2364      	movs	r3, #100	@ 0x64
 80022c4:	2203      	movs	r2, #3
 80022c6:	21c0      	movs	r1, #192	@ 0xc0
 80022c8:	480d      	ldr	r0, [pc, #52]	@ (8002300 <si5351_write8+0x54>)
 80022ca:	f001 febd 	bl	8004048 <HAL_I2C_IsDeviceReady>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f6      	bne.n	80022c2 <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	2364      	movs	r3, #100	@ 0x64
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2301      	movs	r3, #1
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	1dbb      	adds	r3, r7, #6
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	21c0      	movs	r1, #192	@ 0xc0
 80022e8:	4805      	ldr	r0, [pc, #20]	@ (8002300 <si5351_write8+0x54>)
 80022ea:	f001 fb81 	bl	80039f0 <HAL_I2C_Mem_Write>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return status;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	b29b      	uxth	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001f4 	.word	0x200001f4

08002304 <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af04      	add	r7, sp, #16
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8002314:	bf00      	nop
 8002316:	2364      	movs	r3, #100	@ 0x64
 8002318:	2203      	movs	r2, #3
 800231a:	21c0      	movs	r1, #192	@ 0xc0
 800231c:	480d      	ldr	r0, [pc, #52]	@ (8002354 <si5351_read8+0x50>)
 800231e:	f001 fe93 	bl	8004048 <HAL_I2C_IsDeviceReady>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f6      	bne.n	8002316 <si5351_read8+0x12>

    status = HAL_I2C_Mem_Read(&hi2c1,							// i2c handle
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	b29a      	uxth	r2, r3
 800232c:	2364      	movs	r3, #100	@ 0x64
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	2301      	movs	r3, #1
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	463b      	mov	r3, r7
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2301      	movs	r3, #1
 800233a:	21c0      	movs	r1, #192	@ 0xc0
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <si5351_read8+0x50>)
 800233e:	f001 fc51 	bl	8003be4 <HAL_I2C_Mem_Read>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	b29b      	uxth	r3, r3
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200001f4 	.word	0x200001f4

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800236c:	6453      	str	r3, [r2, #68]	@ 0x44
 800236e:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_MspInit+0x4c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002396:	2007      	movs	r0, #7
 8002398:	f000 fc10 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	@ (800242c <HAL_I2C_MspInit+0x84>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12c      	bne.n	8002424 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ec:	2312      	movs	r3, #18
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f8:	2304      	movs	r3, #4
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	480c      	ldr	r0, [pc, #48]	@ (8002434 <HAL_I2C_MspInit+0x8c>)
 8002404:	f001 f802 	bl	800340c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	4a07      	ldr	r2, [pc, #28]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 8002412:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002416:	6413      	str	r3, [r2, #64]	@ 0x40
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	@ 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40005400 	.word	0x40005400
 8002430:	40023800 	.word	0x40023800
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <HAL_SPI_MspInit+0x158>)
 8002456:	4293      	cmp	r3, r2
 8002458:	f040 8096 	bne.w	8002588 <HAL_SPI_MspInit+0x150>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <HAL_SPI_MspInit+0x15c>)
 8002462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002464:	4a4b      	ldr	r2, [pc, #300]	@ (8002594 <HAL_SPI_MspInit+0x15c>)
 8002466:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800246a:	6453      	str	r3, [r2, #68]	@ 0x44
 800246c:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <HAL_SPI_MspInit+0x15c>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <HAL_SPI_MspInit+0x15c>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	4a44      	ldr	r2, [pc, #272]	@ (8002594 <HAL_SPI_MspInit+0x15c>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6313      	str	r3, [r2, #48]	@ 0x30
 8002488:	4b42      	ldr	r3, [pc, #264]	@ (8002594 <HAL_SPI_MspInit+0x15c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002494:	23e0      	movs	r3, #224	@ 0xe0
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a4:	2305      	movs	r3, #5
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	483a      	ldr	r0, [pc, #232]	@ (8002598 <HAL_SPI_MspInit+0x160>)
 80024b0:	f000 ffac 	bl	800340c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80024b4:	4b39      	ldr	r3, [pc, #228]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024b6:	4a3a      	ldr	r2, [pc, #232]	@ (80025a0 <HAL_SPI_MspInit+0x168>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80024c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c2:	4b36      	ldr	r3, [pc, #216]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024c4:	2240      	movs	r2, #64	@ 0x40
 80024c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c8:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ce:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024d6:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024de:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024e6:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024ec:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024f2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f4:	4b29      	ldr	r3, [pc, #164]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024fa:	4828      	ldr	r0, [pc, #160]	@ (800259c <HAL_SPI_MspInit+0x164>)
 80024fc:	f000 fba0 	bl	8002c40 <HAL_DMA_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8002506:	f7ff f93d 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a23      	ldr	r2, [pc, #140]	@ (800259c <HAL_SPI_MspInit+0x164>)
 800250e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_SPI_MspInit+0x164>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002516:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002518:	4a23      	ldr	r2, [pc, #140]	@ (80025a8 <HAL_SPI_MspInit+0x170>)
 800251a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800251c:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 800251e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002522:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002530:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002536:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 800253a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800253e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002542:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002546:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002548:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002550:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002554:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800255c:	4811      	ldr	r0, [pc, #68]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 800255e:	f000 fb6f 	bl	8002c40 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_SPI_MspInit+0x134>
    {
      Error_Handler();
 8002568:	f7ff f90c 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002570:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002572:	4a0c      	ldr	r2, [pc, #48]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2023      	movs	r0, #35	@ 0x23
 800257e:	f000 fb28 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002582:	2023      	movs	r0, #35	@ 0x23
 8002584:	f000 fb41 	bl	8002c0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	@ 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40013000 	.word	0x40013000
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	200002a0 	.word	0x200002a0
 80025a0:	40026458 	.word	0x40026458
 80025a4:	20000300 	.word	0x20000300
 80025a8:	40026440 	.word	0x40026440

080025ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	@ (8002630 <HAL_UART_MspInit+0x84>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d12b      	bne.n	8002626 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	4b18      	ldr	r3, [pc, #96]	@ (8002634 <HAL_UART_MspInit+0x88>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <HAL_UART_MspInit+0x88>)
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <HAL_UART_MspInit+0x88>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_UART_MspInit+0x88>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a10      	ldr	r2, [pc, #64]	@ (8002634 <HAL_UART_MspInit+0x88>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_UART_MspInit+0x88>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002606:	230c      	movs	r3, #12
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002616:	2307      	movs	r3, #7
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	@ (8002638 <HAL_UART_MspInit+0x8c>)
 8002622:	f000 fef3 	bl	800340c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	@ 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40004400 	.word	0x40004400
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <NMI_Handler+0x4>

08002644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <HardFault_Handler+0x4>

0800264c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <MemManage_Handler+0x4>

08002654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <BusFault_Handler+0x4>

0800265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <UsageFault_Handler+0x4>

08002664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002692:	f000 f97f 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <SPI1_IRQHandler+0x10>)
 80026a2:	f003 f921 	bl	80058e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000248 	.word	0x20000248

080026b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <DMA2_Stream0_IRQHandler+0x10>)
 80026b6:	f000 fbeb 	bl	8002e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200003a8 	.word	0x200003a8

080026c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <DMA2_Stream2_IRQHandler+0x10>)
 80026ca:	f000 fbe1 	bl	8002e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000300 	.word	0x20000300

080026d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <DMA2_Stream3_IRQHandler+0x10>)
 80026de:	f000 fbd7 	bl	8002e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200002a0 	.word	0x200002a0

080026ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return 1;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_kill>:

int _kill(int pid, int sig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002706:	f005 f9f9 	bl	8007afc <__errno>
 800270a:	4603      	mov	r3, r0
 800270c:	2216      	movs	r2, #22
 800270e:	601a      	str	r2, [r3, #0]
  return -1;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_exit>:

void _exit (int status)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ffe7 	bl	80026fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <_exit+0x12>

08002732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e00a      	b.n	800275a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002744:	f3af 8000 	nop.w
 8002748:	4601      	mov	r1, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	dbf0      	blt.n	8002744 <_read+0x12>
  }

  return len;
 8002762:	687b      	ldr	r3, [r7, #4]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e009      	b.n	8002792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fc6a 	bl	8001060 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbf1      	blt.n	800277e <_write+0x12>
  }
  return len;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_close>:

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027cc:	605a      	str	r2, [r3, #4]
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <_sbrk+0x5c>)
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <_sbrk+0x60>)
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <_sbrk+0x64>)
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <_sbrk+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800283c:	f005 f95e 	bl	8007afc <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	220c      	movs	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <_sbrk+0x64>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <_sbrk+0x64>)
 800285c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20020000 	.word	0x20020000
 800286c:	00000400 	.word	0x00000400
 8002870:	200013e8 	.word	0x200013e8
 8002874:	20001540 	.word	0x20001540

08002878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <SystemInit+0x20>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <SystemInit+0x20>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800289c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028a0:	f7ff ffea 	bl	8002878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028a6:	490d      	ldr	r1, [pc, #52]	@ (80028dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028bc:	4c0a      	ldr	r4, [pc, #40]	@ (80028e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028ca:	f005 f91d 	bl	8007b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ce:	f7fe fd15 	bl	80012fc <main>
  bx  lr    
 80028d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80028e0:	0800b574 	.word	0x0800b574
  ldr r2, =_sbss
 80028e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80028e8:	2000153c 	.word	0x2000153c

080028ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC_IRQHandler>
	...

080028f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <HAL_Init+0x40>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_Init+0x40>)
 8002906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_Init+0x40>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 f94f 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	2000      	movs	r0, #0
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7ff fd18 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f967 	bl	8002c26 <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 f92f 	bl	8002bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000004 	.word	0x20000004
 800298c:	2000000c 	.word	0x2000000c
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c
 80029b8:	200013ec 	.word	0x200013ec

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200013ec 	.word	0x200013ec

080029d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ffee 	bl	80029bc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d005      	beq.n	80029fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_Delay+0x44>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029fa:	bf00      	nop
 80029fc:	f7ff ffde 	bl	80029bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d8f7      	bhi.n	80029fc <HAL_Delay+0x28>
  {
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c

08002a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db0b      	blt.n	8002aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	4907      	ldr	r1, [pc, #28]	@ (8002ab8 <__NVIC_EnableIRQ+0x38>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000e100 	.word	0xe000e100

08002abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	@ (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	@ (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
         );
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	@ 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ff8e 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff29 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff3e 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff8e 	bl	8002b10 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff31 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa2 	bl	8002b78 <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff feb6 	bl	80029bc <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e099      	b.n	8002d90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c7c:	e00f      	b.n	8002c9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7e:	f7ff fe9d 	bl	80029bc <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d908      	bls.n	8002c9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2203      	movs	r2, #3
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e078      	b.n	8002d90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e8      	bne.n	8002c7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_DMA_Init+0x158>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	4313      	orrs	r3, r2
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0307 	bic.w	r3, r3, #7
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d117      	bne.n	8002d62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fae5 	bl	8003314 <DMA_CheckFifoParam>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2240      	movs	r2, #64	@ 0x40
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e016      	b.n	8002d90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa9c 	bl	80032a8 <DMA_CalcBaseAndBitshift>
 8002d70:	4603      	mov	r3, r0
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	223f      	movs	r2, #63	@ 0x3f
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	f010803f 	.word	0xf010803f

08002d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Start_IT+0x26>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e040      	b.n	8002e44 <HAL_DMA_Start_IT+0xa8>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d12f      	bne.n	8002e36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fa2e 	bl	800324c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	223f      	movs	r2, #63	@ 0x3f
 8002df6:	409a      	lsls	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0216 	orr.w	r2, r2, #22
 8002e0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0208 	orr.w	r2, r2, #8
 8002e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e005      	b.n	8002e42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d004      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00c      	b.n	8002e84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80030d8 <HAL_DMA_IRQHandler+0x248>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a8e      	ldr	r2, [pc, #568]	@ (80030dc <HAL_DMA_IRQHandler+0x24c>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	2208      	movs	r2, #8
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01a      	beq.n	8002efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0204 	bic.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2208      	movs	r2, #8
 8002eea:	409a      	lsls	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	f043 0202 	orr.w	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2204      	movs	r2, #4
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	2204      	movs	r2, #4
 8002f56:	409a      	lsls	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d043      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03c      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d108      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d024      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
 8002fbe:	e01f      	b.n	8003000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
 8002fd0:	e016      	b.n	8003000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0208 	bic.w	r2, r2, #8
 8002fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	2220      	movs	r2, #32
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 808f 	beq.w	8003130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8087 	beq.w	8003130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2220      	movs	r2, #32
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b05      	cmp	r3, #5
 8003038:	d136      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0216 	bic.w	r2, r2, #22
 8003048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <HAL_DMA_IRQHandler+0x1da>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0208 	bic.w	r2, r2, #8
 8003078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	223f      	movs	r2, #63	@ 0x3f
 8003080:	409a      	lsls	r2, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309a:	2b00      	cmp	r3, #0
 800309c:	d07e      	beq.n	800319c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
        }
        return;
 80030a6:	e079      	b.n	800319c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01d      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10d      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d031      	beq.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
 80030d4:	e02c      	b.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
 80030d6:	bf00      	nop
 80030d8:	20000004 	.word	0x20000004
 80030dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e01e      	b.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0210 	bic.w	r2, r2, #16
 800310e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	2b00      	cmp	r3, #0
 8003136:	d032      	beq.n	800319e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d022      	beq.n	800318a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2205      	movs	r2, #5
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3301      	adds	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	d307      	bcc.n	8003178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f2      	bne.n	800315c <HAL_DMA_IRQHandler+0x2cc>
 8003176:	e000      	b.n	800317a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e000      	b.n	800319e <HAL_DMA_IRQHandler+0x30e>
        return;
 800319c:	bf00      	nop
    }
  }
}
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	460b      	mov	r3, r1
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_DMA_RegisterCallback+0x20>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e03d      	b.n	8003240 <HAL_DMA_RegisterCallback+0x9c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d12c      	bne.n	8003232 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80031d8:	7afb      	ldrb	r3, [r7, #11]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d826      	bhi.n	800322c <HAL_DMA_RegisterCallback+0x88>
 80031de:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <HAL_DMA_RegisterCallback+0x40>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031fd 	.word	0x080031fd
 80031e8:	08003205 	.word	0x08003205
 80031ec:	0800320d 	.word	0x0800320d
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003225 	.word	0x08003225
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8003202:	e018      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800320a:	e014      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8003212:	e010      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800321a:	e00c      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8003222:	e008      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800322a:	e004      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	75fb      	strb	r3, [r7, #23]
      break;
 8003230:	e001      	b.n	8003236 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003268:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b40      	cmp	r3, #64	@ 0x40
 8003278:	d108      	bne.n	800328c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800328a:	e007      	b.n	800329c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3b10      	subs	r3, #16
 80032b8:	4a14      	ldr	r2, [pc, #80]	@ (800330c <DMA_CalcBaseAndBitshift+0x64>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032c2:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <DMA_CalcBaseAndBitshift+0x68>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d909      	bls.n	80032ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	1d1a      	adds	r2, r3, #4
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80032e8:	e007      	b.n	80032fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	aaaaaaab 	.word	0xaaaaaaab
 8003310:	0800b130 	.word	0x0800b130

08003314 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11f      	bne.n	800336e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d856      	bhi.n	80033e2 <DMA_CheckFifoParam+0xce>
 8003334:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <DMA_CheckFifoParam+0x28>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	0800334d 	.word	0x0800334d
 8003340:	0800335f 	.word	0x0800335f
 8003344:	0800334d 	.word	0x0800334d
 8003348:	080033e3 	.word	0x080033e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d046      	beq.n	80033e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800335c:	e043      	b.n	80033e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003366:	d140      	bne.n	80033ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e03d      	b.n	80033ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003376:	d121      	bne.n	80033bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d837      	bhi.n	80033ee <DMA_CheckFifoParam+0xda>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <DMA_CheckFifoParam+0x70>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	08003395 	.word	0x08003395
 8003388:	0800339b 	.word	0x0800339b
 800338c:	08003395 	.word	0x08003395
 8003390:	080033ad 	.word	0x080033ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      break;
 8003398:	e030      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d025      	beq.n	80033f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033aa:	e022      	b.n	80033f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b4:	d11f      	bne.n	80033f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ba:	e01c      	b.n	80033f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d903      	bls.n	80033ca <DMA_CheckFifoParam+0xb6>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d003      	beq.n	80033d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033c8:	e018      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      break;
 80033ce:	e015      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00e      	beq.n	80033fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e00b      	b.n	80033fa <DMA_CheckFifoParam+0xe6>
      break;
 80033e2:	bf00      	nop
 80033e4:	e00a      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
 80033e8:	e008      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      break;
 80033ea:	bf00      	nop
 80033ec:	e006      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e004      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      break;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      break;   
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
    }
  } 
  
  return status; 
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	@ 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e165      	b.n	80036f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	f040 8154 	bne.w	80036ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d005      	beq.n	800345e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	2b02      	cmp	r3, #2
 800345c:	d130      	bne.n	80034c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003494:	2201      	movs	r2, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 0201 	and.w	r2, r3, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d017      	beq.n	80034fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d123      	bne.n	8003550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	08da      	lsrs	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3208      	adds	r2, #8
 8003510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	220f      	movs	r2, #15
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	08da      	lsrs	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3208      	adds	r2, #8
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0203 	and.w	r2, r3, #3
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80ae 	beq.w	80036ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b5d      	ldr	r3, [pc, #372]	@ (800370c <HAL_GPIO_Init+0x300>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	4a5c      	ldr	r2, [pc, #368]	@ (800370c <HAL_GPIO_Init+0x300>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a2:	4b5a      	ldr	r3, [pc, #360]	@ (800370c <HAL_GPIO_Init+0x300>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ae:	4a58      	ldr	r2, [pc, #352]	@ (8003710 <HAL_GPIO_Init+0x304>)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003714 <HAL_GPIO_Init+0x308>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x21a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003718 <HAL_GPIO_Init+0x30c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x216>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4d      	ldr	r2, [pc, #308]	@ (800371c <HAL_GPIO_Init+0x310>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x212>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003720 <HAL_GPIO_Init+0x314>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x20e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003724 <HAL_GPIO_Init+0x318>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x20a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003728 <HAL_GPIO_Init+0x31c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x206>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a49      	ldr	r2, [pc, #292]	@ (800372c <HAL_GPIO_Init+0x320>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x202>
 800360a:	2306      	movs	r3, #6
 800360c:	e00c      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 800360e:	2307      	movs	r3, #7
 8003610:	e00a      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 8003612:	2305      	movs	r3, #5
 8003614:	e008      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 8003616:	2304      	movs	r3, #4
 8003618:	e006      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 800361a:	2303      	movs	r3, #3
 800361c:	e004      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 800361e:	2302      	movs	r3, #2
 8003620:	e002      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_GPIO_Init+0x21c>
 8003626:	2300      	movs	r3, #0
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	f002 0203 	and.w	r2, r2, #3
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	4093      	lsls	r3, r2
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003638:	4935      	ldr	r1, [pc, #212]	@ (8003710 <HAL_GPIO_Init+0x304>)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	3302      	adds	r3, #2
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003646:	4b3a      	ldr	r3, [pc, #232]	@ (8003730 <HAL_GPIO_Init+0x324>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366a:	4a31      	ldr	r2, [pc, #196]	@ (8003730 <HAL_GPIO_Init+0x324>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003670:	4b2f      	ldr	r3, [pc, #188]	@ (8003730 <HAL_GPIO_Init+0x324>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <HAL_GPIO_Init+0x324>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800369a:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_GPIO_Init+0x324>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036be:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <HAL_GPIO_Init+0x324>)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <HAL_GPIO_Init+0x324>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e8:	4a11      	ldr	r2, [pc, #68]	@ (8003730 <HAL_GPIO_Init+0x324>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3301      	adds	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b0f      	cmp	r3, #15
 80036f8:	f67f ae96 	bls.w	8003428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	3724      	adds	r7, #36	@ 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
 8003710:	40013800 	.word	0x40013800
 8003714:	40020000 	.word	0x40020000
 8003718:	40020400 	.word	0x40020400
 800371c:	40020800 	.word	0x40020800
 8003720:	40020c00 	.word	0x40020c00
 8003724:	40021000 	.word	0x40021000
 8003728:	40021400 	.word	0x40021400
 800372c:	40021800 	.word	0x40021800
 8003730:	40013c00 	.word	0x40013c00

08003734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
 8003740:	4613      	mov	r3, r2
 8003742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003744:	787b      	ldrb	r3, [r7, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	041a      	lsls	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	619a      	str	r2, [r3, #24]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e12b      	b.n	80039d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe fe0a 	bl	80023a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	@ 0x24
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037cc:	f001 fa10 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 80037d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a81      	ldr	r2, [pc, #516]	@ (80039dc <HAL_I2C_Init+0x274>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d807      	bhi.n	80037ec <HAL_I2C_Init+0x84>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a80      	ldr	r2, [pc, #512]	@ (80039e0 <HAL_I2C_Init+0x278>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e006      	b.n	80037fa <HAL_I2C_Init+0x92>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a7d      	ldr	r2, [pc, #500]	@ (80039e4 <HAL_I2C_Init+0x27c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0e7      	b.n	80039d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a78      	ldr	r2, [pc, #480]	@ (80039e8 <HAL_I2C_Init+0x280>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0c9b      	lsrs	r3, r3, #18
 800380c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a6a      	ldr	r2, [pc, #424]	@ (80039dc <HAL_I2C_Init+0x274>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d802      	bhi.n	800383c <HAL_I2C_Init+0xd4>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	e009      	b.n	8003850 <HAL_I2C_Init+0xe8>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	4a69      	ldr	r2, [pc, #420]	@ (80039ec <HAL_I2C_Init+0x284>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	3301      	adds	r3, #1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003862:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	495c      	ldr	r1, [pc, #368]	@ (80039dc <HAL_I2C_Init+0x274>)
 800386c:	428b      	cmp	r3, r1
 800386e:	d819      	bhi.n	80038a4 <HAL_I2C_Init+0x13c>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e59      	subs	r1, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fbb1 f3f3 	udiv	r3, r1, r3
 800387e:	1c59      	adds	r1, r3, #1
 8003880:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003884:	400b      	ands	r3, r1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_I2C_Init+0x138>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1e59      	subs	r1, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fbb1 f3f3 	udiv	r3, r1, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	e051      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e04f      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <HAL_I2C_Init+0x168>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e012      	b.n	80038f6 <HAL_I2C_Init+0x18e>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	0099      	lsls	r1, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x196>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e022      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10e      	bne.n	8003924 <HAL_I2C_Init+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e58      	subs	r0, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	440b      	add	r3, r1
 8003914:	fbb0 f3f3 	udiv	r3, r0, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	6809      	ldr	r1, [r1, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003972:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6911      	ldr	r1, [r2, #16]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	000186a0 	.word	0x000186a0
 80039e0:	001e847f 	.word	0x001e847f
 80039e4:	003d08ff 	.word	0x003d08ff
 80039e8:	431bde83 	.word	0x431bde83
 80039ec:	10624dd3 	.word	0x10624dd3

080039f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0a:	f7fe ffd7 	bl	80029bc <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	f040 80d9 	bne.w	8003bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2319      	movs	r3, #25
 8003a24:	2201      	movs	r2, #1
 8003a26:	496d      	ldr	r1, [pc, #436]	@ (8003bdc <HAL_I2C_Mem_Write+0x1ec>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fdb9 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0cc      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_I2C_Mem_Write+0x56>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0c5      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d007      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2221      	movs	r2, #33	@ 0x21
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2240      	movs	r2, #64	@ 0x40
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8003be0 <HAL_I2C_Mem_Write+0x1f0>)
 8003aac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aae:	88f8      	ldrh	r0, [r7, #6]
 8003ab0:	893a      	ldrh	r2, [r7, #8]
 8003ab2:	8979      	ldrh	r1, [r7, #10]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4603      	mov	r3, r0
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fbf0 	bl	80042a4 <I2C_RequestMemoryWrite>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d052      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e081      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fe7e 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e06b      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d11b      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x180>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d017      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1aa      	bne.n	8003ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fe71 	bl	8004864 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d107      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e016      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	00100002 	.word	0x00100002
 8003be0:	ffff0000 	.word	0xffff0000

08003be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	@ 0x30
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfe:	f7fe fedd 	bl	80029bc <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	f040 8214 	bne.w	800403a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2319      	movs	r3, #25
 8003c18:	2201      	movs	r2, #1
 8003c1a:	497b      	ldr	r1, [pc, #492]	@ (8003e08 <HAL_I2C_Mem_Read+0x224>)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fcbf 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e207      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x56>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e200      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d007      	beq.n	8003c60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2222      	movs	r2, #34	@ 0x22
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e0c <HAL_I2C_Mem_Read+0x228>)
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca2:	88f8      	ldrh	r0, [r7, #6]
 8003ca4:	893a      	ldrh	r2, [r7, #8]
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fb8c 	bl	80043d0 <I2C_RequestMemoryRead>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1bc      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e190      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11b      	bne.n	8003d32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e170      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d11b      	bne.n	8003d72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	e150      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d88:	e144      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	f200 80f1 	bhi.w	8003f76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d123      	bne.n	8003de4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fda7 	bl	80048f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e145      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de2:	e117      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d14e      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df2:	2200      	movs	r2, #0
 8003df4:	4906      	ldr	r1, [pc, #24]	@ (8003e10 <HAL_I2C_Mem_Read+0x22c>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fbd2 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e11a      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
 8003e06:	bf00      	nop
 8003e08:	00100002 	.word	0x00100002
 8003e0c:	ffff0000 	.word	0xffff0000
 8003e10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e88:	e0c4      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	496c      	ldr	r1, [pc, #432]	@ (8004044 <HAL_I2C_Mem_Read+0x460>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fb83 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cb      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eec:	2200      	movs	r2, #0
 8003eee:	4955      	ldr	r1, [pc, #340]	@ (8004044 <HAL_I2C_Mem_Read+0x460>)
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fb55 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e09d      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f74:	e04e      	b.n	8004014 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fcba 	bl	80048f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e058      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d124      	bne.n	8004014 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d107      	bne.n	8003fe2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f aeb6 	bne.w	8003d8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3728      	adds	r7, #40	@ 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010004 	.word	0x00010004

08004048 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	@ 0x28
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004058:	f7fe fcb0 	bl	80029bc <HAL_GetTick>
 800405c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	f040 8111 	bne.w	8004292 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2319      	movs	r3, #25
 8004076:	2201      	movs	r2, #1
 8004078:	4988      	ldr	r1, [pc, #544]	@ (800429c <HAL_I2C_IsDeviceReady+0x254>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fa90 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	e104      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_I2C_IsDeviceReady+0x50>
 8004094:	2302      	movs	r3, #2
 8004096:	e0fd      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d007      	beq.n	80040be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2224      	movs	r2, #36	@ 0x24
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a70      	ldr	r2, [pc, #448]	@ (80042a0 <HAL_I2C_IsDeviceReady+0x258>)
 80040e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa4e 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004118:	d103      	bne.n	8004122 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0b6      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004134:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004136:	f7fe fc41 	bl	80029bc <HAL_GetTick>
 800413a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800416a:	e025      	b.n	80041b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fe fc26 	bl	80029bc <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <HAL_I2C_IsDeviceReady+0x13a>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	22a0      	movs	r2, #160	@ 0xa0
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80041c2:	d005      	beq.n	80041d0 <HAL_I2C_IsDeviceReady+0x188>
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_I2C_IsDeviceReady+0x188>
 80041ca:	7dbb      	ldrb	r3, [r7, #22]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0cd      	beq.n	800416c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d129      	bne.n	800423a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2319      	movs	r3, #25
 8004212:	2201      	movs	r2, #1
 8004214:	4921      	ldr	r1, [pc, #132]	@ (800429c <HAL_I2C_IsDeviceReady+0x254>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f9c2 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e036      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e02c      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004248:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004252:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2319      	movs	r3, #25
 800425a:	2201      	movs	r2, #1
 800425c:	490f      	ldr	r1, [pc, #60]	@ (800429c <HAL_I2C_IsDeviceReady+0x254>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f99e 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e012      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	3301      	adds	r3, #1
 8004272:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	f4ff af32 	bcc.w	80040e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	00100002 	.word	0x00100002
 80042a0:	ffff0000 	.word	0xffff0000

080042a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f960 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00d      	beq.n	8004302 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f4:	d103      	bne.n	80042fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e05f      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	492d      	ldr	r1, [pc, #180]	@ (80043cc <I2C_RequestMemoryWrite+0x128>)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f9bb 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e04c      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004340:	6a39      	ldr	r1, [r7, #32]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fa46 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	2b04      	cmp	r3, #4
 8004354:	d107      	bne.n	8004366 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e02b      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]
 800437a:	e021      	b.n	80043c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	b29b      	uxth	r3, r3
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	6a39      	ldr	r1, [r7, #32]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fa20 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d107      	bne.n	80043b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e005      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043b6:	893b      	ldrh	r3, [r7, #8]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	00010002 	.word	0x00010002

080043d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	817b      	strh	r3, [r7, #10]
 80043e2:	460b      	mov	r3, r1
 80043e4:	813b      	strh	r3, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2200      	movs	r2, #0
 8004412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f8c2 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004430:	d103      	bne.n	800443a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0aa      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800444c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	4952      	ldr	r1, [pc, #328]	@ (800459c <I2C_RequestMemoryRead+0x1cc>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f91d 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e097      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f9a8 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e076      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	e021      	b.n	80044fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b29b      	uxth	r3, r3
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f982 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e050      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f2:	893b      	ldrh	r3, [r7, #8]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fe:	6a39      	ldr	r1, [r7, #32]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f967 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	2b04      	cmp	r3, #4
 8004512:	d107      	bne.n	8004524 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004522:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e035      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004536:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2200      	movs	r2, #0
 8004540:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f82b 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455e:	d103      	bne.n	8004568 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e013      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	4906      	ldr	r1, [pc, #24]	@ (800459c <I2C_RequestMemoryRead+0x1cc>)
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f886 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	00010002 	.word	0x00010002

080045a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b0:	e048      	b.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d044      	beq.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fe f9ff 	bl	80029bc <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d139      	bne.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10d      	bne.n	80045f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	43da      	mvns	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	e00c      	b.n	8004610 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	43da      	mvns	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d116      	bne.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e023      	b.n	800468c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10d      	bne.n	800466a <I2C_WaitOnFlagUntilTimeout+0xca>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	43da      	mvns	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	e00c      	b.n	8004684 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	43da      	mvns	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	429a      	cmp	r2, r3
 8004688:	d093      	beq.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a2:	e071      	b.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b2:	d123      	bne.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	f043 0204 	orr.w	r2, r3, #4
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e067      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d041      	beq.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7fe f95a 	bl	80029bc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d136      	bne.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10c      	bne.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	43da      	mvns	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e00b      	b.n	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	43da      	mvns	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d016      	beq.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e021      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d10c      	bne.n	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	43da      	mvns	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e00b      	b.n	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f af6d 	bne.w	80046a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e0:	e034      	b.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8e3 	bl	80049ae <I2C_IsAcknowledgeFailed>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e034      	b.n	800485c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d028      	beq.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fe f8df 	bl	80029bc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11d      	bne.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d016      	beq.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b80      	cmp	r3, #128	@ 0x80
 8004858:	d1c3      	bne.n	80047e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004870:	e034      	b.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f89b 	bl	80049ae <I2C_IsAcknowledgeFailed>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e034      	b.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d028      	beq.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fe f897 	bl	80029bc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d016      	beq.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e007      	b.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d1c3      	bne.n	8004872 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004900:	e049      	b.n	8004996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	d119      	bne.n	8004944 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0210 	mvn.w	r2, #16
 8004918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e030      	b.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fe f83a 	bl	80029bc <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d016      	beq.n	8004996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e007      	b.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d1ae      	bne.n	8004902 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c4:	d11b      	bne.n	80049fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0cc      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b68      	ldr	r3, [pc, #416]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d90c      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b65      	ldr	r3, [pc, #404]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b63      	ldr	r3, [pc, #396]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0b8      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a60:	4b59      	ldr	r3, [pc, #356]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a58      	ldr	r2, [pc, #352]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a78:	4b53      	ldr	r3, [pc, #332]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b50      	ldr	r3, [pc, #320]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	494d      	ldr	r1, [pc, #308]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d044      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	4b47      	ldr	r3, [pc, #284]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d119      	bne.n	8004aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e07f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d107      	bne.n	8004ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aca:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e06f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e067      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aea:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 0203 	bic.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4934      	ldr	r1, [pc, #208]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004afc:	f7fd ff5e 	bl	80029bc <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fd ff5a 	bl	80029bc <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e04f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 020c 	and.w	r2, r3, #12
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d1eb      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b25      	ldr	r3, [pc, #148]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d20c      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b22      	ldr	r3, [pc, #136]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b20      	ldr	r3, [pc, #128]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e032      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4916      	ldr	r1, [pc, #88]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7e:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	490e      	ldr	r1, [pc, #56]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b92:	f000 f855 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	490a      	ldr	r1, [pc, #40]	@ (8004bcc <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	4a09      	ldr	r2, [pc, #36]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bae:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd febe 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023c00 	.word	0x40023c00
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800b118 	.word	0x0800b118
 8004bd0:	20000004 	.word	0x20000004
 8004bd4:	20000008 	.word	0x20000008

08004bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	@ (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000004 	.word	0x20000004

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf4:	f7ff fff0 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800b128 	.word	0x0800b128

08004c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c1c:	f7ff ffdc 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0b5b      	lsrs	r3, r3, #13
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	0800b128 	.word	0x0800b128

08004c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b0ae      	sub	sp, #184	@ 0xb8
 8004c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c66:	4bcb      	ldr	r3, [pc, #812]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	f200 8206 	bhi.w	8005080 <HAL_RCC_GetSysClockFreq+0x440>
 8004c74:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08005081 	.word	0x08005081
 8004c84:	08005081 	.word	0x08005081
 8004c88:	08005081 	.word	0x08005081
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08005081 	.word	0x08005081
 8004c94:	08005081 	.word	0x08005081
 8004c98:	08005081 	.word	0x08005081
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08005081 	.word	0x08005081
 8004ca4:	08005081 	.word	0x08005081
 8004ca8:	08005081 	.word	0x08005081
 8004cac:	08004eb1 	.word	0x08004eb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cb6:	e1e7      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cb8:	4bb8      	ldr	r3, [pc, #736]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cbe:	e1e3      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d071      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4bae      	ldr	r3, [pc, #696]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ce4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	0159      	lsls	r1, r3, #5
 8004d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d10:	0150      	lsls	r0, r2, #5
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4621      	mov	r1, r4
 8004d18:	1a51      	subs	r1, r2, r1
 8004d1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004d30:	4649      	mov	r1, r9
 8004d32:	018b      	lsls	r3, r1, #6
 8004d34:	4641      	mov	r1, r8
 8004d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	018a      	lsls	r2, r1, #6
 8004d3e:	4641      	mov	r1, r8
 8004d40:	1a51      	subs	r1, r2, r1
 8004d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d44:	4649      	mov	r1, r9
 8004d46:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004d58:	4649      	mov	r1, r9
 8004d5a:	00cb      	lsls	r3, r1, #3
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d62:	4641      	mov	r1, r8
 8004d64:	00ca      	lsls	r2, r1, #3
 8004d66:	4610      	mov	r0, r2
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	189b      	adds	r3, r3, r2
 8004d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d72:	462b      	mov	r3, r5
 8004d74:	460a      	mov	r2, r1
 8004d76:	eb42 0303 	adc.w	r3, r2, r3
 8004d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d88:	4629      	mov	r1, r5
 8004d8a:	024b      	lsls	r3, r1, #9
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d92:	4621      	mov	r1, r4
 8004d94:	024a      	lsls	r2, r1, #9
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004da4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004dac:	f7fb ff8c 	bl	8000cc8 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dba:	e067      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbc:	4b75      	ldr	r3, [pc, #468]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	0159      	lsls	r1, r3, #5
 8004dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df0:	0150      	lsls	r0, r2, #5
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4621      	mov	r1, r4
 8004df8:	1a51      	subs	r1, r2, r1
 8004dfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004e10:	4649      	mov	r1, r9
 8004e12:	018b      	lsls	r3, r1, #6
 8004e14:	4641      	mov	r1, r8
 8004e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	018a      	lsls	r2, r1, #6
 8004e1e:	4641      	mov	r1, r8
 8004e20:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e24:	4649      	mov	r1, r9
 8004e26:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e3e:	4692      	mov	sl, r2
 8004e40:	469b      	mov	fp, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	eb1a 0303 	adds.w	r3, sl, r3
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	028b      	lsls	r3, r1, #10
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e68:	4621      	mov	r1, r4
 8004e6a:	028a      	lsls	r2, r1, #10
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e74:	2200      	movs	r2, #0
 8004e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e78:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004e7e:	f7fb ff23 	bl	8000cc8 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4613      	mov	r3, r2
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e8c:	4b41      	ldr	r3, [pc, #260]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	3301      	adds	r3, #1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eae:	e0eb      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb0:	4b38      	ldr	r3, [pc, #224]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ebc:	4b35      	ldr	r3, [pc, #212]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d06b      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec8:	4b32      	ldr	r3, [pc, #200]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	2200      	movs	r2, #0
 8004ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8004edc:	2300      	movs	r3, #0
 8004ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ee0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	f04f 0000 	mov.w	r0, #0
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	0159      	lsls	r1, r3, #5
 8004ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef6:	0150      	lsls	r0, r2, #5
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4621      	mov	r1, r4
 8004efe:	1a51      	subs	r1, r2, r1
 8004f00:	61b9      	str	r1, [r7, #24]
 8004f02:	4629      	mov	r1, r5
 8004f04:	eb63 0301 	sbc.w	r3, r3, r1
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004f16:	4659      	mov	r1, fp
 8004f18:	018b      	lsls	r3, r1, #6
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f20:	4651      	mov	r1, sl
 8004f22:	018a      	lsls	r2, r1, #6
 8004f24:	4651      	mov	r1, sl
 8004f26:	ebb2 0801 	subs.w	r8, r2, r1
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	eb63 0901 	sbc.w	r9, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f44:	4690      	mov	r8, r2
 8004f46:	4699      	mov	r9, r3
 8004f48:	4623      	mov	r3, r4
 8004f4a:	eb18 0303 	adds.w	r3, r8, r3
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	462b      	mov	r3, r5
 8004f52:	eb49 0303 	adc.w	r3, r9, r3
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004f64:	4629      	mov	r1, r5
 8004f66:	024b      	lsls	r3, r1, #9
 8004f68:	4621      	mov	r1, r4
 8004f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f6e:	4621      	mov	r1, r4
 8004f70:	024a      	lsls	r2, r1, #9
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f84:	f7fb fea0 	bl	8000cc8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f92:	e065      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x420>
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x458>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4611      	mov	r1, r2
 8004fac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004fba:	4642      	mov	r2, r8
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	f04f 0000 	mov.w	r0, #0
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	0159      	lsls	r1, r3, #5
 8004fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fcc:	0150      	lsls	r0, r2, #5
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	1a51      	subs	r1, r2, r1
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4649      	mov	r1, r9
 8004fda:	eb63 0301 	sbc.w	r3, r3, r1
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004fec:	4659      	mov	r1, fp
 8004fee:	018b      	lsls	r3, r1, #6
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	018a      	lsls	r2, r1, #6
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	1a54      	subs	r4, r2, r1
 8004ffe:	4659      	mov	r1, fp
 8005000:	eb63 0501 	sbc.w	r5, r3, r1
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	00eb      	lsls	r3, r5, #3
 800500e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005012:	00e2      	lsls	r2, r4, #3
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	4643      	mov	r3, r8
 800501a:	18e3      	adds	r3, r4, r3
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	464b      	mov	r3, r9
 8005020:	eb45 0303 	adc.w	r3, r5, r3
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005032:	4629      	mov	r1, r5
 8005034:	028b      	lsls	r3, r1, #10
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800503c:	4621      	mov	r1, r4
 800503e:	028a      	lsls	r2, r1, #10
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005048:	2200      	movs	r2, #0
 800504a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800504c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800504e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005052:	f7fb fe39 	bl	8000cc8 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4613      	mov	r3, r2
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005060:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x458>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0f1b      	lsrs	r3, r3, #28
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800506e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005076:	fbb2 f3f3 	udiv	r3, r2, r3
 800507a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800507e:	e003      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800508c:	4618      	mov	r0, r3
 800508e:	37b8      	adds	r7, #184	@ 0xb8
 8005090:	46bd      	mov	sp, r7
 8005092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
 800509c:	00f42400 	.word	0x00f42400

080050a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e28d      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8083 	beq.w	80051c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050c0:	4b94      	ldr	r3, [pc, #592]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d019      	beq.n	8005100 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050cc:	4b91      	ldr	r3, [pc, #580]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e4:	d00c      	beq.n	8005100 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d112      	bne.n	8005118 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f2:	4b88      	ldr	r3, [pc, #544]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050fe:	d10b      	bne.n	8005118 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	4b84      	ldr	r3, [pc, #528]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d05b      	beq.n	80051c4 <HAL_RCC_OscConfig+0x124>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d157      	bne.n	80051c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e25a      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005120:	d106      	bne.n	8005130 <HAL_RCC_OscConfig+0x90>
 8005122:	4b7c      	ldr	r3, [pc, #496]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a7b      	ldr	r2, [pc, #492]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e01d      	b.n	800516c <HAL_RCC_OscConfig+0xcc>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0xb4>
 800513a:	4b76      	ldr	r3, [pc, #472]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a75      	ldr	r2, [pc, #468]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b73      	ldr	r3, [pc, #460]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a72      	ldr	r2, [pc, #456]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0xcc>
 8005154:	4b6f      	ldr	r3, [pc, #444]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6e      	ldr	r2, [pc, #440]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b6c      	ldr	r3, [pc, #432]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a6b      	ldr	r2, [pc, #428]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800516a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fd fc22 	bl	80029bc <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd fc1e 	bl	80029bc <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	@ 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e21f      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	4b61      	ldr	r3, [pc, #388]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0xdc>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fd fc0e 	bl	80029bc <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fd fc0a 	bl	80029bc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e20b      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b6:	4b57      	ldr	r3, [pc, #348]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x104>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d06f      	beq.n	80052b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051d2:	4b50      	ldr	r3, [pc, #320]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d017      	beq.n	800520e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051de:	4b4d      	ldr	r3, [pc, #308]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d105      	bne.n	80051f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b47      	ldr	r3, [pc, #284]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d11c      	bne.n	800523c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005202:	4b44      	ldr	r3, [pc, #272]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d116      	bne.n	800523c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520e:	4b41      	ldr	r3, [pc, #260]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_RCC_OscConfig+0x186>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d001      	beq.n	8005226 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e1d3      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005226:	4b3b      	ldr	r3, [pc, #236]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4937      	ldr	r1, [pc, #220]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523a:	e03a      	b.n	80052b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005244:	4b34      	ldr	r3, [pc, #208]	@ (8005318 <HAL_RCC_OscConfig+0x278>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7fd fbb7 	bl	80029bc <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005252:	f7fd fbb3 	bl	80029bc <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e1b4      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005264:	4b2b      	ldr	r3, [pc, #172]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005270:	4b28      	ldr	r3, [pc, #160]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4925      	ldr	r1, [pc, #148]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]
 8005284:	e015      	b.n	80052b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005286:	4b24      	ldr	r3, [pc, #144]	@ (8005318 <HAL_RCC_OscConfig+0x278>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd fb96 	bl	80029bc <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005294:	f7fd fb92 	bl	80029bc <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e193      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d036      	beq.n	800532c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052c6:	4b15      	ldr	r3, [pc, #84]	@ (800531c <HAL_RCC_OscConfig+0x27c>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052cc:	f7fd fb76 	bl	80029bc <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d4:	f7fd fb72 	bl	80029bc <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e173      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_RCC_OscConfig+0x274>)
 80052e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x234>
 80052f2:	e01b      	b.n	800532c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052f4:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_OscConfig+0x27c>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fa:	f7fd fb5f 	bl	80029bc <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005300:	e00e      	b.n	8005320 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005302:	f7fd fb5b 	bl	80029bc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d907      	bls.n	8005320 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e15c      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
 8005314:	40023800 	.word	0x40023800
 8005318:	42470000 	.word	0x42470000
 800531c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005320:	4b8a      	ldr	r3, [pc, #552]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ea      	bne.n	8005302 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8097 	beq.w	8005468 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533e:	4b83      	ldr	r3, [pc, #524]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10f      	bne.n	800536a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	4b7f      	ldr	r3, [pc, #508]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	4a7e      	ldr	r2, [pc, #504]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005358:	6413      	str	r3, [r2, #64]	@ 0x40
 800535a:	4b7c      	ldr	r3, [pc, #496]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536a:	4b79      	ldr	r3, [pc, #484]	@ (8005550 <HAL_RCC_OscConfig+0x4b0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d118      	bne.n	80053a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005376:	4b76      	ldr	r3, [pc, #472]	@ (8005550 <HAL_RCC_OscConfig+0x4b0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a75      	ldr	r2, [pc, #468]	@ (8005550 <HAL_RCC_OscConfig+0x4b0>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005382:	f7fd fb1b 	bl	80029bc <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538a:	f7fd fb17 	bl	80029bc <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e118      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	4b6c      	ldr	r3, [pc, #432]	@ (8005550 <HAL_RCC_OscConfig+0x4b0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d106      	bne.n	80053be <HAL_RCC_OscConfig+0x31e>
 80053b0:	4b66      	ldr	r3, [pc, #408]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b4:	4a65      	ldr	r2, [pc, #404]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80053bc:	e01c      	b.n	80053f8 <HAL_RCC_OscConfig+0x358>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCC_OscConfig+0x340>
 80053c6:	4b61      	ldr	r3, [pc, #388]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	4a60      	ldr	r2, [pc, #384]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053cc:	f043 0304 	orr.w	r3, r3, #4
 80053d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d2:	4b5e      	ldr	r3, [pc, #376]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d6:	4a5d      	ldr	r2, [pc, #372]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053de:	e00b      	b.n	80053f8 <HAL_RCC_OscConfig+0x358>
 80053e0:	4b5a      	ldr	r3, [pc, #360]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	4a59      	ldr	r2, [pc, #356]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ec:	4b57      	ldr	r3, [pc, #348]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	4a56      	ldr	r2, [pc, #344]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80053f2:	f023 0304 	bic.w	r3, r3, #4
 80053f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d015      	beq.n	800542c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fd fadc 	bl	80029bc <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005406:	e00a      	b.n	800541e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fd fad8 	bl	80029bc <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0d7      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541e:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0ee      	beq.n	8005408 <HAL_RCC_OscConfig+0x368>
 800542a:	e014      	b.n	8005456 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fd fac6 	bl	80029bc <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005432:	e00a      	b.n	800544a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005434:	f7fd fac2 	bl	80029bc <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e0c1      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544a:	4b40      	ldr	r3, [pc, #256]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1ee      	bne.n	8005434 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d105      	bne.n	8005468 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545c:	4b3b      	ldr	r3, [pc, #236]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	4a3a      	ldr	r2, [pc, #232]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80ad 	beq.w	80055cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005472:	4b36      	ldr	r3, [pc, #216]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b08      	cmp	r3, #8
 800547c:	d060      	beq.n	8005540 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d145      	bne.n	8005512 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b33      	ldr	r3, [pc, #204]	@ (8005554 <HAL_RCC_OscConfig+0x4b4>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fd fa96 	bl	80029bc <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd fa92 	bl	80029bc <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e093      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a6:	4b29      	ldr	r3, [pc, #164]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	3b01      	subs	r3, #1
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	491b      	ldr	r1, [pc, #108]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005554 <HAL_RCC_OscConfig+0x4b4>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fd fa67 	bl	80029bc <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fd fa63 	bl	80029bc <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e064      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x452>
 8005510:	e05c      	b.n	80055cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <HAL_RCC_OscConfig+0x4b4>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fd fa50 	bl	80029bc <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7fd fa4c 	bl	80029bc <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e04d      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005532:	4b06      	ldr	r3, [pc, #24]	@ (800554c <HAL_RCC_OscConfig+0x4ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x480>
 800553e:	e045      	b.n	80055cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d107      	bne.n	8005558 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e040      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000
 8005554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005558:	4b1f      	ldr	r3, [pc, #124]	@ (80055d8 <HAL_RCC_OscConfig+0x538>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d030      	beq.n	80055c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d129      	bne.n	80055c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d122      	bne.n	80055c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800558e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005590:	4293      	cmp	r3, r2
 8005592:	d119      	bne.n	80055c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d10f      	bne.n	80055c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800

080055dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e07b      	b.n	80056e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fe:	d009      	beq.n	8005614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	61da      	str	r2, [r3, #28]
 8005606:	e005      	b.n	8005614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc ff02 	bl	8002438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800564a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005698:	ea42 0103 	orr.w	r1, r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f003 0104 	and.w	r1, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	f003 0210 	and.w	r2, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005704:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800570c:	7dfb      	ldrb	r3, [r7, #23]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d00c      	beq.n	800572c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005718:	d106      	bne.n	8005728 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d001      	beq.n	800572c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
 800572a:	e0cf      	b.n	80058cc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005738:	887b      	ldrh	r3, [r7, #2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e0c4      	b.n	80058cc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_SPI_TransmitReceive_DMA+0x60>
 800574c:	2302      	movs	r3, #2
 800574e:	e0bd      	b.n	80058cc <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b04      	cmp	r3, #4
 8005762:	d003      	beq.n	800576c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2205      	movs	r2, #5
 8005768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	887a      	ldrh	r2, [r7, #2]
 800577c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	887a      	ldrh	r2, [r7, #2]
 8005782:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	887a      	ldrh	r2, [r7, #2]
 800578e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d108      	bne.n	80057c0 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b2:	4a48      	ldr	r2, [pc, #288]	@ (80058d4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80057b4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	4a47      	ldr	r2, [pc, #284]	@ (80058d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80057bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057be:	e007      	b.n	80057d0 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c4:	4a45      	ldr	r2, [pc, #276]	@ (80058dc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80057c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057cc:	4a44      	ldr	r2, [pc, #272]	@ (80058e0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80057ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d4:	4a43      	ldr	r2, [pc, #268]	@ (80058e4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80057d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057dc:	2200      	movs	r2, #0
 80057de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	4619      	mov	r1, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80057f8:	f7fd fad0 	bl	8002d9c <HAL_DMA_Start_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	f043 0210 	orr.w	r2, r3, #16
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e058      	b.n	80058cc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0201 	orr.w	r2, r2, #1
 8005828:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582e:	2200      	movs	r2, #0
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005836:	2200      	movs	r2, #0
 8005838:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583e:	2200      	movs	r2, #0
 8005840:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005846:	2200      	movs	r2, #0
 8005848:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	4619      	mov	r1, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005860:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005862:	f7fd fa9b 	bl	8002d9c <HAL_DMA_Start_IT>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005870:	f043 0210 	orr.w	r2, r3, #16
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e023      	b.n	80058cc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	2b40      	cmp	r3, #64	@ 0x40
 8005890:	d007      	beq.n	80058a2 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058a0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0220 	orr.w	r2, r2, #32
 80058b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0202 	orr.w	r2, r2, #2
 80058c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	08005c71 	.word	0x08005c71
 80058d8:	08005b39 	.word	0x08005b39
 80058dc:	08005c8d 	.word	0x08005c8d
 80058e0:	08005be1 	.word	0x08005be1
 80058e4:	08005ca9 	.word	0x08005ca9

080058e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	099b      	lsrs	r3, r3, #6
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10f      	bne.n	800592c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	099b      	lsrs	r3, r3, #6
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
    return;
 800592a:	e0d7      	b.n	8005adc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_SPI_IRQHandler+0x66>
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
    return;
 800594c:	e0c6      	b.n	8005adc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10c      	bne.n	8005974 <HAL_SPI_IRQHandler+0x8c>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	099b      	lsrs	r3, r3, #6
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80b4 	beq.w	8005adc <HAL_SPI_IRQHandler+0x1f4>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80ad 	beq.w	8005adc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	099b      	lsrs	r3, r3, #6
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d023      	beq.n	80059d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b03      	cmp	r3, #3
 8005998:	d011      	beq.n	80059be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599e:	f043 0204 	orr.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	e00b      	b.n	80059d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	693b      	ldr	r3, [r7, #16]
        return;
 80059d4:	e082      	b.n	8005adc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d014      	beq.n	8005a0c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1c:	f043 0208 	orr.w	r2, r3, #8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a24:	2300      	movs	r3, #0
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d04f      	beq.n	8005ada <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a48:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_SPI_IRQHandler+0x17e>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d034      	beq.n	8005ad0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0203 	bic.w	r2, r2, #3
 8005a74:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a82:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <HAL_SPI_IRQHandler+0x1fc>)
 8005a84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fd f9de 	bl	8002e4c <HAL_DMA_Abort_IT>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aae:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae4 <HAL_SPI_IRQHandler+0x1fc>)
 8005ab0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fd f9c8 	bl	8002e4c <HAL_DMA_Abort_IT>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005ace:	e003      	b.n	8005ad8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f827 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ad6:	e000      	b.n	8005ada <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005ad8:	bf00      	nop
    return;
 8005ada:	bf00      	nop
  }
}
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08005ce9 	.word	0x08005ce9

08005ae8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b46:	f7fc ff39 	bl	80029bc <HAL_GetTick>
 8005b4a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5a:	d03b      	beq.n	8005bd4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0220 	bic.w	r2, r2, #32
 8005b6a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10d      	bne.n	8005b90 <SPI_DMAReceiveCplt+0x58>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b7c:	d108      	bne.n	8005b90 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0203 	bic.w	r2, r2, #3
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	e007      	b.n	8005ba0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	2164      	movs	r1, #100	@ 0x64
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f93b 	bl	8005e20 <SPI_EndRxTransaction>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff ffa9 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005bd2:	e002      	b.n	8005bda <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff ff87 	bl	8005ae8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bee:	f7fc fee5 	bl	80029bc <HAL_GetTick>
 8005bf2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c02:	d02f      	beq.n	8005c64 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0220 	bic.w	r2, r2, #32
 8005c12:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	2164      	movs	r1, #100	@ 0x64
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f967 	bl	8005eec <SPI_EndRxTxTransaction>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0203 	bic.w	r2, r2, #3
 8005c3e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff ff61 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c62:	e002      	b.n	8005c6a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7fb fb09 	bl	800127c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff ff3c 	bl	8005afc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff38 	bl	8005b10 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0203 	bic.w	r2, r2, #3
 8005cc4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f043 0210 	orr.w	r2, r3, #16
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff22 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff ff0e 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d20:	f7fc fe4c 	bl	80029bc <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d30:	f7fc fe44 	bl	80029bc <HAL_GetTick>
 8005d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d36:	4b39      	ldr	r3, [pc, #228]	@ (8005e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	015b      	lsls	r3, r3, #5
 8005d3c:	0d1b      	lsrs	r3, r3, #20
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d46:	e055      	b.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d051      	beq.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d50:	f7fc fe34 	bl	80029bc <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d902      	bls.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d13d      	bne.n	8005de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d7e:	d111      	bne.n	8005da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d88:	d004      	beq.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d92:	d107      	bne.n	8005da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dac:	d10f      	bne.n	8005dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e018      	b.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	e002      	b.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d19a      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000004 	.word	0x20000004

08005e20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e34:	d111      	bne.n	8005e5a <SPI_EndRxTransaction+0x3a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3e:	d004      	beq.n	8005e4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e48:	d107      	bne.n	8005e5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e62:	d12a      	bne.n	8005eba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6c:	d012      	beq.n	8005e94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	2180      	movs	r1, #128	@ 0x80
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ff49 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d02d      	beq.n	8005ee0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e026      	b.n	8005ee2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ff36 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01a      	beq.n	8005ee0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e013      	b.n	8005ee2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff ff23 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e000      	b.n	8005ee2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2201      	movs	r2, #1
 8005f00:	2102      	movs	r1, #2
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff ff04 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e032      	b.n	8005f84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f8c <SPI_EndRxTxTransaction+0xa0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1b      	ldr	r2, [pc, #108]	@ (8005f90 <SPI_EndRxTxTransaction+0xa4>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	0d5b      	lsrs	r3, r3, #21
 8005f2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3c:	d112      	bne.n	8005f64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	@ 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff fee1 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d016      	beq.n	8005f82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e00f      	b.n	8005f84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7a:	2b80      	cmp	r3, #128	@ 0x80
 8005f7c:	d0f2      	beq.n	8005f64 <SPI_EndRxTxTransaction+0x78>
 8005f7e:	e000      	b.n	8005f82 <SPI_EndRxTxTransaction+0x96>
        break;
 8005f80:	bf00      	nop
  }

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000004 	.word	0x20000004
 8005f90:	165e9f81 	.word	0x165e9f81

08005f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e042      	b.n	800602c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc faf6 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	@ 0x24
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f973 	bl	80062c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800600c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	@ 0x28
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d175      	bne.n	8006140 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Transmit+0x2c>
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e06e      	b.n	8006142 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2221      	movs	r2, #33	@ 0x21
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006072:	f7fc fca3 	bl	80029bc <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608c:	d108      	bne.n	80060a0 <HAL_UART_Transmit+0x6c>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e003      	b.n	80060a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060a8:	e02e      	b.n	8006108 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	@ 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f848 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e03a      	b.n	8006142 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	3302      	adds	r3, #2
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e007      	b.n	80060fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1cb      	bne.n	80060aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2200      	movs	r2, #0
 800611a:	2140      	movs	r1, #64	@ 0x40
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f814 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e006      	b.n	8006142 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615a:	e03b      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d037      	beq.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006164:	f7fc fc2a 	bl	80029bc <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <UART_WaitOnFlagUntilTimeout+0x30>
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e03a      	b.n	80061f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d023      	beq.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b80      	cmp	r3, #128	@ 0x80
 8006190:	d020      	beq.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b40      	cmp	r3, #64	@ 0x40
 8006196:	d01d      	beq.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d116      	bne.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f81d 	bl	80061fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2208      	movs	r2, #8
 80061c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e00f      	b.n	80061f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4013      	ands	r3, r2
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d0b4      	beq.n	800615c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b095      	sub	sp, #84	@ 0x54
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006224:	643a      	str	r2, [r7, #64]	@ 0x40
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800622a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	61fb      	str	r3, [r7, #28]
   return(result);
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	2b01      	cmp	r3, #1
 8006272:	d119      	bne.n	80062a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60bb      	str	r3, [r7, #8]
   return(result);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	647b      	str	r3, [r7, #68]	@ 0x44
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006294:	61ba      	str	r2, [r7, #24]
 8006296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6979      	ldr	r1, [r7, #20]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	613b      	str	r3, [r7, #16]
   return(result);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062b6:	bf00      	nop
 80062b8:	3754      	adds	r7, #84	@ 0x54
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c8:	b0c0      	sub	sp, #256	@ 0x100
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	68d9      	ldr	r1, [r3, #12]
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	ea40 0301 	orr.w	r3, r0, r1
 80062ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	431a      	orrs	r2, r3
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800631c:	f021 010c 	bic.w	r1, r1, #12
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800632a:	430b      	orrs	r3, r1
 800632c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633e:	6999      	ldr	r1, [r3, #24]
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	ea40 0301 	orr.w	r3, r0, r1
 800634a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b8f      	ldr	r3, [pc, #572]	@ (8006590 <UART_SetConfig+0x2cc>)
 8006354:	429a      	cmp	r2, r3
 8006356:	d005      	beq.n	8006364 <UART_SetConfig+0xa0>
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4b8d      	ldr	r3, [pc, #564]	@ (8006594 <UART_SetConfig+0x2d0>)
 8006360:	429a      	cmp	r2, r3
 8006362:	d104      	bne.n	800636e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006364:	f7fe fc58 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8006368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800636c:	e003      	b.n	8006376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800636e:	f7fe fc3f 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8006372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006380:	f040 810c 	bne.w	800659c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800638e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	1891      	adds	r1, r2, r2
 800639c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800639e:	415b      	adcs	r3, r3
 80063a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063a6:	4621      	mov	r1, r4
 80063a8:	eb12 0801 	adds.w	r8, r2, r1
 80063ac:	4629      	mov	r1, r5
 80063ae:	eb43 0901 	adc.w	r9, r3, r1
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063c6:	4690      	mov	r8, r2
 80063c8:	4699      	mov	r9, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	eb18 0303 	adds.w	r3, r8, r3
 80063d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063d4:	462b      	mov	r3, r5
 80063d6:	eb49 0303 	adc.w	r3, r9, r3
 80063da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063f2:	460b      	mov	r3, r1
 80063f4:	18db      	adds	r3, r3, r3
 80063f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063f8:	4613      	mov	r3, r2
 80063fa:	eb42 0303 	adc.w	r3, r2, r3
 80063fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006408:	f7fa fc5e 	bl	8000cc8 <__aeabi_uldivmod>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4b61      	ldr	r3, [pc, #388]	@ (8006598 <UART_SetConfig+0x2d4>)
 8006412:	fba3 2302 	umull	r2, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	011c      	lsls	r4, r3, #4
 800641a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641e:	2200      	movs	r2, #0
 8006420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	1891      	adds	r1, r2, r2
 8006432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006434:	415b      	adcs	r3, r3
 8006436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800643c:	4641      	mov	r1, r8
 800643e:	eb12 0a01 	adds.w	sl, r2, r1
 8006442:	4649      	mov	r1, r9
 8006444:	eb43 0b01 	adc.w	fp, r3, r1
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800645c:	4692      	mov	sl, r2
 800645e:	469b      	mov	fp, r3
 8006460:	4643      	mov	r3, r8
 8006462:	eb1a 0303 	adds.w	r3, sl, r3
 8006466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800646a:	464b      	mov	r3, r9
 800646c:	eb4b 0303 	adc.w	r3, fp, r3
 8006470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006488:	460b      	mov	r3, r1
 800648a:	18db      	adds	r3, r3, r3
 800648c:	643b      	str	r3, [r7, #64]	@ 0x40
 800648e:	4613      	mov	r3, r2
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	647b      	str	r3, [r7, #68]	@ 0x44
 8006496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800649a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800649e:	f7fa fc13 	bl	8000cc8 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006598 <UART_SetConfig+0x2d4>)
 80064aa:	fba3 2301 	umull	r2, r3, r3, r1
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	2264      	movs	r2, #100	@ 0x64
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	1acb      	subs	r3, r1, r3
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064be:	4b36      	ldr	r3, [pc, #216]	@ (8006598 <UART_SetConfig+0x2d4>)
 80064c0:	fba3 2302 	umull	r2, r3, r3, r2
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064cc:	441c      	add	r4, r3
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	1891      	adds	r1, r2, r2
 80064e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064e8:	415b      	adcs	r3, r3
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064f0:	4641      	mov	r1, r8
 80064f2:	1851      	adds	r1, r2, r1
 80064f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80064f6:	4649      	mov	r1, r9
 80064f8:	414b      	adcs	r3, r1
 80064fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006508:	4659      	mov	r1, fp
 800650a:	00cb      	lsls	r3, r1, #3
 800650c:	4651      	mov	r1, sl
 800650e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006512:	4651      	mov	r1, sl
 8006514:	00ca      	lsls	r2, r1, #3
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	4603      	mov	r3, r0
 800651c:	4642      	mov	r2, r8
 800651e:	189b      	adds	r3, r3, r2
 8006520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006524:	464b      	mov	r3, r9
 8006526:	460a      	mov	r2, r1
 8006528:	eb42 0303 	adc.w	r3, r2, r3
 800652c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800653c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006544:	460b      	mov	r3, r1
 8006546:	18db      	adds	r3, r3, r3
 8006548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800654a:	4613      	mov	r3, r2
 800654c:	eb42 0303 	adc.w	r3, r2, r3
 8006550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800655a:	f7fa fbb5 	bl	8000cc8 <__aeabi_uldivmod>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <UART_SetConfig+0x2d4>)
 8006564:	fba3 1302 	umull	r1, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	2164      	movs	r1, #100	@ 0x64
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	3332      	adds	r3, #50	@ 0x32
 8006576:	4a08      	ldr	r2, [pc, #32]	@ (8006598 <UART_SetConfig+0x2d4>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 0207 	and.w	r2, r3, #7
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4422      	add	r2, r4
 800658a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800658c:	e106      	b.n	800679c <UART_SetConfig+0x4d8>
 800658e:	bf00      	nop
 8006590:	40011000 	.word	0x40011000
 8006594:	40011400 	.word	0x40011400
 8006598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800659c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065ae:	4642      	mov	r2, r8
 80065b0:	464b      	mov	r3, r9
 80065b2:	1891      	adds	r1, r2, r2
 80065b4:	6239      	str	r1, [r7, #32]
 80065b6:	415b      	adcs	r3, r3
 80065b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065be:	4641      	mov	r1, r8
 80065c0:	1854      	adds	r4, r2, r1
 80065c2:	4649      	mov	r1, r9
 80065c4:	eb43 0501 	adc.w	r5, r3, r1
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	00eb      	lsls	r3, r5, #3
 80065d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d6:	00e2      	lsls	r2, r4, #3
 80065d8:	4614      	mov	r4, r2
 80065da:	461d      	mov	r5, r3
 80065dc:	4643      	mov	r3, r8
 80065de:	18e3      	adds	r3, r4, r3
 80065e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065e4:	464b      	mov	r3, r9
 80065e6:	eb45 0303 	adc.w	r3, r5, r3
 80065ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	f04f 0300 	mov.w	r3, #0
 8006606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800660a:	4629      	mov	r1, r5
 800660c:	008b      	lsls	r3, r1, #2
 800660e:	4621      	mov	r1, r4
 8006610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006614:	4621      	mov	r1, r4
 8006616:	008a      	lsls	r2, r1, #2
 8006618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800661c:	f7fa fb54 	bl	8000cc8 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4b60      	ldr	r3, [pc, #384]	@ (80067a8 <UART_SetConfig+0x4e4>)
 8006626:	fba3 2302 	umull	r2, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	011c      	lsls	r4, r3, #4
 800662e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800663c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	1891      	adds	r1, r2, r2
 8006646:	61b9      	str	r1, [r7, #24]
 8006648:	415b      	adcs	r3, r3
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006650:	4641      	mov	r1, r8
 8006652:	1851      	adds	r1, r2, r1
 8006654:	6139      	str	r1, [r7, #16]
 8006656:	4649      	mov	r1, r9
 8006658:	414b      	adcs	r3, r1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006668:	4659      	mov	r1, fp
 800666a:	00cb      	lsls	r3, r1, #3
 800666c:	4651      	mov	r1, sl
 800666e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006672:	4651      	mov	r1, sl
 8006674:	00ca      	lsls	r2, r1, #3
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	4603      	mov	r3, r0
 800667c:	4642      	mov	r2, r8
 800667e:	189b      	adds	r3, r3, r2
 8006680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006684:	464b      	mov	r3, r9
 8006686:	460a      	mov	r2, r1
 8006688:	eb42 0303 	adc.w	r3, r2, r3
 800668c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800669a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066a8:	4649      	mov	r1, r9
 80066aa:	008b      	lsls	r3, r1, #2
 80066ac:	4641      	mov	r1, r8
 80066ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066b2:	4641      	mov	r1, r8
 80066b4:	008a      	lsls	r2, r1, #2
 80066b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066ba:	f7fa fb05 	bl	8000cc8 <__aeabi_uldivmod>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	4b38      	ldr	r3, [pc, #224]	@ (80067a8 <UART_SetConfig+0x4e4>)
 80066c6:	fba3 2301 	umull	r2, r3, r3, r1
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	2264      	movs	r2, #100	@ 0x64
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	1acb      	subs	r3, r1, r3
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	3332      	adds	r3, #50	@ 0x32
 80066d8:	4a33      	ldr	r2, [pc, #204]	@ (80067a8 <UART_SetConfig+0x4e4>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066e4:	441c      	add	r4, r3
 80066e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ea:	2200      	movs	r2, #0
 80066ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80066ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80066f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	415b      	adcs	r3, r3
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006704:	4641      	mov	r1, r8
 8006706:	1851      	adds	r1, r2, r1
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	4649      	mov	r1, r9
 800670c:	414b      	adcs	r3, r1
 800670e:	607b      	str	r3, [r7, #4]
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800671c:	4659      	mov	r1, fp
 800671e:	00cb      	lsls	r3, r1, #3
 8006720:	4651      	mov	r1, sl
 8006722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006726:	4651      	mov	r1, sl
 8006728:	00ca      	lsls	r2, r1, #3
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	4603      	mov	r3, r0
 8006730:	4642      	mov	r2, r8
 8006732:	189b      	adds	r3, r3, r2
 8006734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006736:	464b      	mov	r3, r9
 8006738:	460a      	mov	r2, r1
 800673a:	eb42 0303 	adc.w	r3, r2, r3
 800673e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	663b      	str	r3, [r7, #96]	@ 0x60
 800674a:	667a      	str	r2, [r7, #100]	@ 0x64
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006758:	4649      	mov	r1, r9
 800675a:	008b      	lsls	r3, r1, #2
 800675c:	4641      	mov	r1, r8
 800675e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006762:	4641      	mov	r1, r8
 8006764:	008a      	lsls	r2, r1, #2
 8006766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800676a:	f7fa faad 	bl	8000cc8 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4b0d      	ldr	r3, [pc, #52]	@ (80067a8 <UART_SetConfig+0x4e4>)
 8006774:	fba3 1302 	umull	r1, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	2164      	movs	r1, #100	@ 0x64
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	3332      	adds	r3, #50	@ 0x32
 8006786:	4a08      	ldr	r2, [pc, #32]	@ (80067a8 <UART_SetConfig+0x4e4>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4422      	add	r2, r4
 800679a:	609a      	str	r2, [r3, #8]
}
 800679c:	bf00      	nop
 800679e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067a2:	46bd      	mov	sp, r7
 80067a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a8:	51eb851f 	.word	0x51eb851f

080067ac <malloc>:
 80067ac:	4b02      	ldr	r3, [pc, #8]	@ (80067b8 <malloc+0xc>)
 80067ae:	4601      	mov	r1, r0
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f000 b825 	b.w	8006800 <_malloc_r>
 80067b6:	bf00      	nop
 80067b8:	2000001c 	.word	0x2000001c

080067bc <sbrk_aligned>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4e0f      	ldr	r6, [pc, #60]	@ (80067fc <sbrk_aligned+0x40>)
 80067c0:	460c      	mov	r4, r1
 80067c2:	6831      	ldr	r1, [r6, #0]
 80067c4:	4605      	mov	r5, r0
 80067c6:	b911      	cbnz	r1, 80067ce <sbrk_aligned+0x12>
 80067c8:	f001 f976 	bl	8007ab8 <_sbrk_r>
 80067cc:	6030      	str	r0, [r6, #0]
 80067ce:	4621      	mov	r1, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	f001 f971 	bl	8007ab8 <_sbrk_r>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	d103      	bne.n	80067e2 <sbrk_aligned+0x26>
 80067da:	f04f 34ff 	mov.w	r4, #4294967295
 80067de:	4620      	mov	r0, r4
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	1cc4      	adds	r4, r0, #3
 80067e4:	f024 0403 	bic.w	r4, r4, #3
 80067e8:	42a0      	cmp	r0, r4
 80067ea:	d0f8      	beq.n	80067de <sbrk_aligned+0x22>
 80067ec:	1a21      	subs	r1, r4, r0
 80067ee:	4628      	mov	r0, r5
 80067f0:	f001 f962 	bl	8007ab8 <_sbrk_r>
 80067f4:	3001      	adds	r0, #1
 80067f6:	d1f2      	bne.n	80067de <sbrk_aligned+0x22>
 80067f8:	e7ef      	b.n	80067da <sbrk_aligned+0x1e>
 80067fa:	bf00      	nop
 80067fc:	200013f0 	.word	0x200013f0

08006800 <_malloc_r>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	1ccd      	adds	r5, r1, #3
 8006806:	f025 0503 	bic.w	r5, r5, #3
 800680a:	3508      	adds	r5, #8
 800680c:	2d0c      	cmp	r5, #12
 800680e:	bf38      	it	cc
 8006810:	250c      	movcc	r5, #12
 8006812:	2d00      	cmp	r5, #0
 8006814:	4606      	mov	r6, r0
 8006816:	db01      	blt.n	800681c <_malloc_r+0x1c>
 8006818:	42a9      	cmp	r1, r5
 800681a:	d904      	bls.n	8006826 <_malloc_r+0x26>
 800681c:	230c      	movs	r3, #12
 800681e:	6033      	str	r3, [r6, #0]
 8006820:	2000      	movs	r0, #0
 8006822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068fc <_malloc_r+0xfc>
 800682a:	f000 f869 	bl	8006900 <__malloc_lock>
 800682e:	f8d8 3000 	ldr.w	r3, [r8]
 8006832:	461c      	mov	r4, r3
 8006834:	bb44      	cbnz	r4, 8006888 <_malloc_r+0x88>
 8006836:	4629      	mov	r1, r5
 8006838:	4630      	mov	r0, r6
 800683a:	f7ff ffbf 	bl	80067bc <sbrk_aligned>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	4604      	mov	r4, r0
 8006842:	d158      	bne.n	80068f6 <_malloc_r+0xf6>
 8006844:	f8d8 4000 	ldr.w	r4, [r8]
 8006848:	4627      	mov	r7, r4
 800684a:	2f00      	cmp	r7, #0
 800684c:	d143      	bne.n	80068d6 <_malloc_r+0xd6>
 800684e:	2c00      	cmp	r4, #0
 8006850:	d04b      	beq.n	80068ea <_malloc_r+0xea>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	4639      	mov	r1, r7
 8006856:	4630      	mov	r0, r6
 8006858:	eb04 0903 	add.w	r9, r4, r3
 800685c:	f001 f92c 	bl	8007ab8 <_sbrk_r>
 8006860:	4581      	cmp	r9, r0
 8006862:	d142      	bne.n	80068ea <_malloc_r+0xea>
 8006864:	6821      	ldr	r1, [r4, #0]
 8006866:	1a6d      	subs	r5, r5, r1
 8006868:	4629      	mov	r1, r5
 800686a:	4630      	mov	r0, r6
 800686c:	f7ff ffa6 	bl	80067bc <sbrk_aligned>
 8006870:	3001      	adds	r0, #1
 8006872:	d03a      	beq.n	80068ea <_malloc_r+0xea>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	442b      	add	r3, r5
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	f8d8 3000 	ldr.w	r3, [r8]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	bb62      	cbnz	r2, 80068dc <_malloc_r+0xdc>
 8006882:	f8c8 7000 	str.w	r7, [r8]
 8006886:	e00f      	b.n	80068a8 <_malloc_r+0xa8>
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	1b52      	subs	r2, r2, r5
 800688c:	d420      	bmi.n	80068d0 <_malloc_r+0xd0>
 800688e:	2a0b      	cmp	r2, #11
 8006890:	d917      	bls.n	80068c2 <_malloc_r+0xc2>
 8006892:	1961      	adds	r1, r4, r5
 8006894:	42a3      	cmp	r3, r4
 8006896:	6025      	str	r5, [r4, #0]
 8006898:	bf18      	it	ne
 800689a:	6059      	strne	r1, [r3, #4]
 800689c:	6863      	ldr	r3, [r4, #4]
 800689e:	bf08      	it	eq
 80068a0:	f8c8 1000 	streq.w	r1, [r8]
 80068a4:	5162      	str	r2, [r4, r5]
 80068a6:	604b      	str	r3, [r1, #4]
 80068a8:	4630      	mov	r0, r6
 80068aa:	f000 f82f 	bl	800690c <__malloc_unlock>
 80068ae:	f104 000b 	add.w	r0, r4, #11
 80068b2:	1d23      	adds	r3, r4, #4
 80068b4:	f020 0007 	bic.w	r0, r0, #7
 80068b8:	1ac2      	subs	r2, r0, r3
 80068ba:	bf1c      	itt	ne
 80068bc:	1a1b      	subne	r3, r3, r0
 80068be:	50a3      	strne	r3, [r4, r2]
 80068c0:	e7af      	b.n	8006822 <_malloc_r+0x22>
 80068c2:	6862      	ldr	r2, [r4, #4]
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	bf0c      	ite	eq
 80068c8:	f8c8 2000 	streq.w	r2, [r8]
 80068cc:	605a      	strne	r2, [r3, #4]
 80068ce:	e7eb      	b.n	80068a8 <_malloc_r+0xa8>
 80068d0:	4623      	mov	r3, r4
 80068d2:	6864      	ldr	r4, [r4, #4]
 80068d4:	e7ae      	b.n	8006834 <_malloc_r+0x34>
 80068d6:	463c      	mov	r4, r7
 80068d8:	687f      	ldr	r7, [r7, #4]
 80068da:	e7b6      	b.n	800684a <_malloc_r+0x4a>
 80068dc:	461a      	mov	r2, r3
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d1fb      	bne.n	80068dc <_malloc_r+0xdc>
 80068e4:	2300      	movs	r3, #0
 80068e6:	6053      	str	r3, [r2, #4]
 80068e8:	e7de      	b.n	80068a8 <_malloc_r+0xa8>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	4630      	mov	r0, r6
 80068f0:	f000 f80c 	bl	800690c <__malloc_unlock>
 80068f4:	e794      	b.n	8006820 <_malloc_r+0x20>
 80068f6:	6005      	str	r5, [r0, #0]
 80068f8:	e7d6      	b.n	80068a8 <_malloc_r+0xa8>
 80068fa:	bf00      	nop
 80068fc:	200013f4 	.word	0x200013f4

08006900 <__malloc_lock>:
 8006900:	4801      	ldr	r0, [pc, #4]	@ (8006908 <__malloc_lock+0x8>)
 8006902:	f001 b926 	b.w	8007b52 <__retarget_lock_acquire_recursive>
 8006906:	bf00      	nop
 8006908:	20001538 	.word	0x20001538

0800690c <__malloc_unlock>:
 800690c:	4801      	ldr	r0, [pc, #4]	@ (8006914 <__malloc_unlock+0x8>)
 800690e:	f001 b921 	b.w	8007b54 <__retarget_lock_release_recursive>
 8006912:	bf00      	nop
 8006914:	20001538 	.word	0x20001538

08006918 <__cvt>:
 8006918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	ec57 6b10 	vmov	r6, r7, d0
 8006920:	2f00      	cmp	r7, #0
 8006922:	460c      	mov	r4, r1
 8006924:	4619      	mov	r1, r3
 8006926:	463b      	mov	r3, r7
 8006928:	bfbb      	ittet	lt
 800692a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800692e:	461f      	movlt	r7, r3
 8006930:	2300      	movge	r3, #0
 8006932:	232d      	movlt	r3, #45	@ 0x2d
 8006934:	700b      	strb	r3, [r1, #0]
 8006936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800693c:	4691      	mov	r9, r2
 800693e:	f023 0820 	bic.w	r8, r3, #32
 8006942:	bfbc      	itt	lt
 8006944:	4632      	movlt	r2, r6
 8006946:	4616      	movlt	r6, r2
 8006948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800694c:	d005      	beq.n	800695a <__cvt+0x42>
 800694e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006952:	d100      	bne.n	8006956 <__cvt+0x3e>
 8006954:	3401      	adds	r4, #1
 8006956:	2102      	movs	r1, #2
 8006958:	e000      	b.n	800695c <__cvt+0x44>
 800695a:	2103      	movs	r1, #3
 800695c:	ab03      	add	r3, sp, #12
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	ab02      	add	r3, sp, #8
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	ec47 6b10 	vmov	d0, r6, r7
 8006968:	4653      	mov	r3, sl
 800696a:	4622      	mov	r2, r4
 800696c:	f001 f984 	bl	8007c78 <_dtoa_r>
 8006970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006974:	4605      	mov	r5, r0
 8006976:	d119      	bne.n	80069ac <__cvt+0x94>
 8006978:	f019 0f01 	tst.w	r9, #1
 800697c:	d00e      	beq.n	800699c <__cvt+0x84>
 800697e:	eb00 0904 	add.w	r9, r0, r4
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7fa f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800698e:	b108      	cbz	r0, 8006994 <__cvt+0x7c>
 8006990:	f8cd 900c 	str.w	r9, [sp, #12]
 8006994:	2230      	movs	r2, #48	@ 0x30
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	454b      	cmp	r3, r9
 800699a:	d31e      	bcc.n	80069da <__cvt+0xc2>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069a0:	1b5b      	subs	r3, r3, r5
 80069a2:	4628      	mov	r0, r5
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	b004      	add	sp, #16
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069b0:	eb00 0904 	add.w	r9, r0, r4
 80069b4:	d1e5      	bne.n	8006982 <__cvt+0x6a>
 80069b6:	7803      	ldrb	r3, [r0, #0]
 80069b8:	2b30      	cmp	r3, #48	@ 0x30
 80069ba:	d10a      	bne.n	80069d2 <__cvt+0xba>
 80069bc:	2200      	movs	r2, #0
 80069be:	2300      	movs	r3, #0
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7fa f8a0 	bl	8000b08 <__aeabi_dcmpeq>
 80069c8:	b918      	cbnz	r0, 80069d2 <__cvt+0xba>
 80069ca:	f1c4 0401 	rsb	r4, r4, #1
 80069ce:	f8ca 4000 	str.w	r4, [sl]
 80069d2:	f8da 3000 	ldr.w	r3, [sl]
 80069d6:	4499      	add	r9, r3
 80069d8:	e7d3      	b.n	8006982 <__cvt+0x6a>
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	9103      	str	r1, [sp, #12]
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	e7d9      	b.n	8006996 <__cvt+0x7e>

080069e2 <__exponent>:
 80069e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e4:	2900      	cmp	r1, #0
 80069e6:	bfba      	itte	lt
 80069e8:	4249      	neglt	r1, r1
 80069ea:	232d      	movlt	r3, #45	@ 0x2d
 80069ec:	232b      	movge	r3, #43	@ 0x2b
 80069ee:	2909      	cmp	r1, #9
 80069f0:	7002      	strb	r2, [r0, #0]
 80069f2:	7043      	strb	r3, [r0, #1]
 80069f4:	dd29      	ble.n	8006a4a <__exponent+0x68>
 80069f6:	f10d 0307 	add.w	r3, sp, #7
 80069fa:	461d      	mov	r5, r3
 80069fc:	270a      	movs	r7, #10
 80069fe:	461a      	mov	r2, r3
 8006a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a04:	fb07 1416 	mls	r4, r7, r6, r1
 8006a08:	3430      	adds	r4, #48	@ 0x30
 8006a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a0e:	460c      	mov	r4, r1
 8006a10:	2c63      	cmp	r4, #99	@ 0x63
 8006a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a16:	4631      	mov	r1, r6
 8006a18:	dcf1      	bgt.n	80069fe <__exponent+0x1c>
 8006a1a:	3130      	adds	r1, #48	@ 0x30
 8006a1c:	1e94      	subs	r4, r2, #2
 8006a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a22:	1c41      	adds	r1, r0, #1
 8006a24:	4623      	mov	r3, r4
 8006a26:	42ab      	cmp	r3, r5
 8006a28:	d30a      	bcc.n	8006a40 <__exponent+0x5e>
 8006a2a:	f10d 0309 	add.w	r3, sp, #9
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	42ac      	cmp	r4, r5
 8006a32:	bf88      	it	hi
 8006a34:	2300      	movhi	r3, #0
 8006a36:	3302      	adds	r3, #2
 8006a38:	4403      	add	r3, r0
 8006a3a:	1a18      	subs	r0, r3, r0
 8006a3c:	b003      	add	sp, #12
 8006a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a48:	e7ed      	b.n	8006a26 <__exponent+0x44>
 8006a4a:	2330      	movs	r3, #48	@ 0x30
 8006a4c:	3130      	adds	r1, #48	@ 0x30
 8006a4e:	7083      	strb	r3, [r0, #2]
 8006a50:	70c1      	strb	r1, [r0, #3]
 8006a52:	1d03      	adds	r3, r0, #4
 8006a54:	e7f1      	b.n	8006a3a <__exponent+0x58>
	...

08006a58 <_printf_float>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	b08d      	sub	sp, #52	@ 0x34
 8006a5e:	460c      	mov	r4, r1
 8006a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a64:	4616      	mov	r6, r2
 8006a66:	461f      	mov	r7, r3
 8006a68:	4605      	mov	r5, r0
 8006a6a:	f000 ffed 	bl	8007a48 <_localeconv_r>
 8006a6e:	6803      	ldr	r3, [r0, #0]
 8006a70:	9304      	str	r3, [sp, #16]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7f9 fc1c 	bl	80002b0 <strlen>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a80:	9005      	str	r0, [sp, #20]
 8006a82:	3307      	adds	r3, #7
 8006a84:	f023 0307 	bic.w	r3, r3, #7
 8006a88:	f103 0208 	add.w	r2, r3, #8
 8006a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a90:	f8d4 b000 	ldr.w	fp, [r4]
 8006a94:	f8c8 2000 	str.w	r2, [r8]
 8006a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aae:	4b9c      	ldr	r3, [pc, #624]	@ (8006d20 <_printf_float+0x2c8>)
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	f7fa f85a 	bl	8000b6c <__aeabi_dcmpun>
 8006ab8:	bb70      	cbnz	r0, 8006b18 <_printf_float+0xc0>
 8006aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006abe:	4b98      	ldr	r3, [pc, #608]	@ (8006d20 <_printf_float+0x2c8>)
 8006ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac4:	f7fa f834 	bl	8000b30 <__aeabi_dcmple>
 8006ac8:	bb30      	cbnz	r0, 8006b18 <_printf_float+0xc0>
 8006aca:	2200      	movs	r2, #0
 8006acc:	2300      	movs	r3, #0
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	f7fa f823 	bl	8000b1c <__aeabi_dcmplt>
 8006ad6:	b110      	cbz	r0, 8006ade <_printf_float+0x86>
 8006ad8:	232d      	movs	r3, #45	@ 0x2d
 8006ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ade:	4a91      	ldr	r2, [pc, #580]	@ (8006d24 <_printf_float+0x2cc>)
 8006ae0:	4b91      	ldr	r3, [pc, #580]	@ (8006d28 <_printf_float+0x2d0>)
 8006ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ae6:	bf8c      	ite	hi
 8006ae8:	4690      	movhi	r8, r2
 8006aea:	4698      	movls	r8, r3
 8006aec:	2303      	movs	r3, #3
 8006aee:	6123      	str	r3, [r4, #16]
 8006af0:	f02b 0304 	bic.w	r3, fp, #4
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	9700      	str	r7, [sp, #0]
 8006afc:	4633      	mov	r3, r6
 8006afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b00:	4621      	mov	r1, r4
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f9d2 	bl	8006eac <_printf_common>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f040 808d 	bne.w	8006c28 <_printf_float+0x1d0>
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b12:	b00d      	add	sp, #52	@ 0x34
 8006b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7fa f824 	bl	8000b6c <__aeabi_dcmpun>
 8006b24:	b140      	cbz	r0, 8006b38 <_printf_float+0xe0>
 8006b26:	464b      	mov	r3, r9
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfbc      	itt	lt
 8006b2c:	232d      	movlt	r3, #45	@ 0x2d
 8006b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b32:	4a7e      	ldr	r2, [pc, #504]	@ (8006d2c <_printf_float+0x2d4>)
 8006b34:	4b7e      	ldr	r3, [pc, #504]	@ (8006d30 <_printf_float+0x2d8>)
 8006b36:	e7d4      	b.n	8006ae2 <_printf_float+0x8a>
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b3e:	9206      	str	r2, [sp, #24]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	d13b      	bne.n	8006bbc <_printf_float+0x164>
 8006b44:	2306      	movs	r3, #6
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	6022      	str	r2, [r4, #0]
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b58:	ab09      	add	r3, sp, #36	@ 0x24
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	6861      	ldr	r1, [r4, #4]
 8006b5e:	ec49 8b10 	vmov	d0, r8, r9
 8006b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7ff fed6 	bl	8006918 <__cvt>
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b70:	2b47      	cmp	r3, #71	@ 0x47
 8006b72:	4680      	mov	r8, r0
 8006b74:	d129      	bne.n	8006bca <_printf_float+0x172>
 8006b76:	1cc8      	adds	r0, r1, #3
 8006b78:	db02      	blt.n	8006b80 <_printf_float+0x128>
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	dd41      	ble.n	8006c04 <_printf_float+0x1ac>
 8006b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b84:	fa5f fa8a 	uxtb.w	sl, sl
 8006b88:	3901      	subs	r1, #1
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b92:	f7ff ff26 	bl	80069e2 <__exponent>
 8006b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b98:	1813      	adds	r3, r2, r0
 8006b9a:	2a01      	cmp	r2, #1
 8006b9c:	4681      	mov	r9, r0
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	dc02      	bgt.n	8006ba8 <_printf_float+0x150>
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	07d2      	lsls	r2, r2, #31
 8006ba6:	d501      	bpl.n	8006bac <_printf_float+0x154>
 8006ba8:	3301      	adds	r3, #1
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0a2      	beq.n	8006afa <_printf_float+0xa2>
 8006bb4:	232d      	movs	r3, #45	@ 0x2d
 8006bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bba:	e79e      	b.n	8006afa <_printf_float+0xa2>
 8006bbc:	9a06      	ldr	r2, [sp, #24]
 8006bbe:	2a47      	cmp	r2, #71	@ 0x47
 8006bc0:	d1c2      	bne.n	8006b48 <_printf_float+0xf0>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1c0      	bne.n	8006b48 <_printf_float+0xf0>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e7bd      	b.n	8006b46 <_printf_float+0xee>
 8006bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bce:	d9db      	bls.n	8006b88 <_printf_float+0x130>
 8006bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bd4:	d118      	bne.n	8006c08 <_printf_float+0x1b0>
 8006bd6:	2900      	cmp	r1, #0
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	dd0b      	ble.n	8006bf4 <_printf_float+0x19c>
 8006bdc:	6121      	str	r1, [r4, #16]
 8006bde:	b913      	cbnz	r3, 8006be6 <_printf_float+0x18e>
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	07d0      	lsls	r0, r2, #31
 8006be4:	d502      	bpl.n	8006bec <_printf_float+0x194>
 8006be6:	3301      	adds	r3, #1
 8006be8:	440b      	add	r3, r1
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bee:	f04f 0900 	mov.w	r9, #0
 8006bf2:	e7db      	b.n	8006bac <_printf_float+0x154>
 8006bf4:	b913      	cbnz	r3, 8006bfc <_printf_float+0x1a4>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d2      	lsls	r2, r2, #31
 8006bfa:	d501      	bpl.n	8006c00 <_printf_float+0x1a8>
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	e7f4      	b.n	8006bea <_printf_float+0x192>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e7f2      	b.n	8006bea <_printf_float+0x192>
 8006c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	db05      	blt.n	8006c1a <_printf_float+0x1c2>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	6121      	str	r1, [r4, #16]
 8006c12:	07d8      	lsls	r0, r3, #31
 8006c14:	d5ea      	bpl.n	8006bec <_printf_float+0x194>
 8006c16:	1c4b      	adds	r3, r1, #1
 8006c18:	e7e7      	b.n	8006bea <_printf_float+0x192>
 8006c1a:	2900      	cmp	r1, #0
 8006c1c:	bfd4      	ite	le
 8006c1e:	f1c1 0202 	rsble	r2, r1, #2
 8006c22:	2201      	movgt	r2, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	e7e0      	b.n	8006bea <_printf_float+0x192>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	055a      	lsls	r2, r3, #21
 8006c2c:	d407      	bmi.n	8006c3e <_printf_float+0x1e6>
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	4642      	mov	r2, r8
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d12b      	bne.n	8006c94 <_printf_float+0x23c>
 8006c3c:	e767      	b.n	8006b0e <_printf_float+0xb6>
 8006c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c42:	f240 80dd 	bls.w	8006e00 <_printf_float+0x3a8>
 8006c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f7f9 ff5b 	bl	8000b08 <__aeabi_dcmpeq>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d033      	beq.n	8006cbe <_printf_float+0x266>
 8006c56:	4a37      	ldr	r2, [pc, #220]	@ (8006d34 <_printf_float+0x2dc>)
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f af54 	beq.w	8006b0e <_printf_float+0xb6>
 8006c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c6a:	4543      	cmp	r3, r8
 8006c6c:	db02      	blt.n	8006c74 <_printf_float+0x21c>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	07d8      	lsls	r0, r3, #31
 8006c72:	d50f      	bpl.n	8006c94 <_printf_float+0x23c>
 8006c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f43f af45 	beq.w	8006b0e <_printf_float+0xb6>
 8006c84:	f04f 0900 	mov.w	r9, #0
 8006c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c8c:	f104 0a1a 	add.w	sl, r4, #26
 8006c90:	45c8      	cmp	r8, r9
 8006c92:	dc09      	bgt.n	8006ca8 <_printf_float+0x250>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	079b      	lsls	r3, r3, #30
 8006c98:	f100 8103 	bmi.w	8006ea2 <_printf_float+0x44a>
 8006c9c:	68e0      	ldr	r0, [r4, #12]
 8006c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ca0:	4298      	cmp	r0, r3
 8006ca2:	bfb8      	it	lt
 8006ca4:	4618      	movlt	r0, r3
 8006ca6:	e734      	b.n	8006b12 <_printf_float+0xba>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4652      	mov	r2, sl
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f af2b 	beq.w	8006b0e <_printf_float+0xb6>
 8006cb8:	f109 0901 	add.w	r9, r9, #1
 8006cbc:	e7e8      	b.n	8006c90 <_printf_float+0x238>
 8006cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc39      	bgt.n	8006d38 <_printf_float+0x2e0>
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d34 <_printf_float+0x2dc>)
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af1d 	beq.w	8006b0e <_printf_float+0xb6>
 8006cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8006cdc:	d102      	bne.n	8006ce4 <_printf_float+0x28c>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	07d9      	lsls	r1, r3, #31
 8006ce2:	d5d7      	bpl.n	8006c94 <_printf_float+0x23c>
 8006ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	47b8      	blx	r7
 8006cee:	3001      	adds	r0, #1
 8006cf0:	f43f af0d 	beq.w	8006b0e <_printf_float+0xb6>
 8006cf4:	f04f 0a00 	mov.w	sl, #0
 8006cf8:	f104 0b1a 	add.w	fp, r4, #26
 8006cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfe:	425b      	negs	r3, r3
 8006d00:	4553      	cmp	r3, sl
 8006d02:	dc01      	bgt.n	8006d08 <_printf_float+0x2b0>
 8006d04:	464b      	mov	r3, r9
 8006d06:	e793      	b.n	8006c30 <_printf_float+0x1d8>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	465a      	mov	r2, fp
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	f43f aefb 	beq.w	8006b0e <_printf_float+0xb6>
 8006d18:	f10a 0a01 	add.w	sl, sl, #1
 8006d1c:	e7ee      	b.n	8006cfc <_printf_float+0x2a4>
 8006d1e:	bf00      	nop
 8006d20:	7fefffff 	.word	0x7fefffff
 8006d24:	0800b13c 	.word	0x0800b13c
 8006d28:	0800b138 	.word	0x0800b138
 8006d2c:	0800b144 	.word	0x0800b144
 8006d30:	0800b140 	.word	0x0800b140
 8006d34:	0800b148 	.word	0x0800b148
 8006d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d3e:	4553      	cmp	r3, sl
 8006d40:	bfa8      	it	ge
 8006d42:	4653      	movge	r3, sl
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	4699      	mov	r9, r3
 8006d48:	dc36      	bgt.n	8006db8 <_printf_float+0x360>
 8006d4a:	f04f 0b00 	mov.w	fp, #0
 8006d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d52:	f104 021a 	add.w	r2, r4, #26
 8006d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d58:	9306      	str	r3, [sp, #24]
 8006d5a:	eba3 0309 	sub.w	r3, r3, r9
 8006d5e:	455b      	cmp	r3, fp
 8006d60:	dc31      	bgt.n	8006dc6 <_printf_float+0x36e>
 8006d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d64:	459a      	cmp	sl, r3
 8006d66:	dc3a      	bgt.n	8006dde <_printf_float+0x386>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	07da      	lsls	r2, r3, #31
 8006d6c:	d437      	bmi.n	8006dde <_printf_float+0x386>
 8006d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d70:	ebaa 0903 	sub.w	r9, sl, r3
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	ebaa 0303 	sub.w	r3, sl, r3
 8006d7a:	4599      	cmp	r9, r3
 8006d7c:	bfa8      	it	ge
 8006d7e:	4699      	movge	r9, r3
 8006d80:	f1b9 0f00 	cmp.w	r9, #0
 8006d84:	dc33      	bgt.n	8006dee <_printf_float+0x396>
 8006d86:	f04f 0800 	mov.w	r8, #0
 8006d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d8e:	f104 0b1a 	add.w	fp, r4, #26
 8006d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d94:	ebaa 0303 	sub.w	r3, sl, r3
 8006d98:	eba3 0309 	sub.w	r3, r3, r9
 8006d9c:	4543      	cmp	r3, r8
 8006d9e:	f77f af79 	ble.w	8006c94 <_printf_float+0x23c>
 8006da2:	2301      	movs	r3, #1
 8006da4:	465a      	mov	r2, fp
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b8      	blx	r7
 8006dac:	3001      	adds	r0, #1
 8006dae:	f43f aeae 	beq.w	8006b0e <_printf_float+0xb6>
 8006db2:	f108 0801 	add.w	r8, r8, #1
 8006db6:	e7ec      	b.n	8006d92 <_printf_float+0x33a>
 8006db8:	4642      	mov	r2, r8
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d1c2      	bne.n	8006d4a <_printf_float+0x2f2>
 8006dc4:	e6a3      	b.n	8006b0e <_printf_float+0xb6>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	9206      	str	r2, [sp, #24]
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f ae9c 	beq.w	8006b0e <_printf_float+0xb6>
 8006dd6:	9a06      	ldr	r2, [sp, #24]
 8006dd8:	f10b 0b01 	add.w	fp, fp, #1
 8006ddc:	e7bb      	b.n	8006d56 <_printf_float+0x2fe>
 8006dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	d1c0      	bne.n	8006d6e <_printf_float+0x316>
 8006dec:	e68f      	b.n	8006b0e <_printf_float+0xb6>
 8006dee:	9a06      	ldr	r2, [sp, #24]
 8006df0:	464b      	mov	r3, r9
 8006df2:	4442      	add	r2, r8
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d1c3      	bne.n	8006d86 <_printf_float+0x32e>
 8006dfe:	e686      	b.n	8006b0e <_printf_float+0xb6>
 8006e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e04:	f1ba 0f01 	cmp.w	sl, #1
 8006e08:	dc01      	bgt.n	8006e0e <_printf_float+0x3b6>
 8006e0a:	07db      	lsls	r3, r3, #31
 8006e0c:	d536      	bpl.n	8006e7c <_printf_float+0x424>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4642      	mov	r2, r8
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f ae78 	beq.w	8006b0e <_printf_float+0xb6>
 8006e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f ae70 	beq.w	8006b0e <_printf_float+0xb6>
 8006e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e3a:	f7f9 fe65 	bl	8000b08 <__aeabi_dcmpeq>
 8006e3e:	b9c0      	cbnz	r0, 8006e72 <_printf_float+0x41a>
 8006e40:	4653      	mov	r3, sl
 8006e42:	f108 0201 	add.w	r2, r8, #1
 8006e46:	4631      	mov	r1, r6
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b8      	blx	r7
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d10c      	bne.n	8006e6a <_printf_float+0x412>
 8006e50:	e65d      	b.n	8006b0e <_printf_float+0xb6>
 8006e52:	2301      	movs	r3, #1
 8006e54:	465a      	mov	r2, fp
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b8      	blx	r7
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	f43f ae56 	beq.w	8006b0e <_printf_float+0xb6>
 8006e62:	f108 0801 	add.w	r8, r8, #1
 8006e66:	45d0      	cmp	r8, sl
 8006e68:	dbf3      	blt.n	8006e52 <_printf_float+0x3fa>
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e70:	e6df      	b.n	8006c32 <_printf_float+0x1da>
 8006e72:	f04f 0800 	mov.w	r8, #0
 8006e76:	f104 0b1a 	add.w	fp, r4, #26
 8006e7a:	e7f4      	b.n	8006e66 <_printf_float+0x40e>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4642      	mov	r2, r8
 8006e80:	e7e1      	b.n	8006e46 <_printf_float+0x3ee>
 8006e82:	2301      	movs	r3, #1
 8006e84:	464a      	mov	r2, r9
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	f43f ae3e 	beq.w	8006b0e <_printf_float+0xb6>
 8006e92:	f108 0801 	add.w	r8, r8, #1
 8006e96:	68e3      	ldr	r3, [r4, #12]
 8006e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e9a:	1a5b      	subs	r3, r3, r1
 8006e9c:	4543      	cmp	r3, r8
 8006e9e:	dcf0      	bgt.n	8006e82 <_printf_float+0x42a>
 8006ea0:	e6fc      	b.n	8006c9c <_printf_float+0x244>
 8006ea2:	f04f 0800 	mov.w	r8, #0
 8006ea6:	f104 0919 	add.w	r9, r4, #25
 8006eaa:	e7f4      	b.n	8006e96 <_printf_float+0x43e>

08006eac <_printf_common>:
 8006eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	4698      	mov	r8, r3
 8006eb4:	688a      	ldr	r2, [r1, #8]
 8006eb6:	690b      	ldr	r3, [r1, #16]
 8006eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	bfb8      	it	lt
 8006ec0:	4613      	movlt	r3, r2
 8006ec2:	6033      	str	r3, [r6, #0]
 8006ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ec8:	4607      	mov	r7, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	b10a      	cbz	r2, 8006ed2 <_printf_common+0x26>
 8006ece:	3301      	adds	r3, #1
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	0699      	lsls	r1, r3, #26
 8006ed6:	bf42      	ittt	mi
 8006ed8:	6833      	ldrmi	r3, [r6, #0]
 8006eda:	3302      	addmi	r3, #2
 8006edc:	6033      	strmi	r3, [r6, #0]
 8006ede:	6825      	ldr	r5, [r4, #0]
 8006ee0:	f015 0506 	ands.w	r5, r5, #6
 8006ee4:	d106      	bne.n	8006ef4 <_printf_common+0x48>
 8006ee6:	f104 0a19 	add.w	sl, r4, #25
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	6832      	ldr	r2, [r6, #0]
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	42ab      	cmp	r3, r5
 8006ef2:	dc26      	bgt.n	8006f42 <_printf_common+0x96>
 8006ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	3b00      	subs	r3, #0
 8006efc:	bf18      	it	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	0692      	lsls	r2, r2, #26
 8006f02:	d42b      	bmi.n	8006f5c <_printf_common+0xb0>
 8006f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f08:	4641      	mov	r1, r8
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c8      	blx	r9
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d01e      	beq.n	8006f50 <_printf_common+0xa4>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	6922      	ldr	r2, [r4, #16]
 8006f16:	f003 0306 	and.w	r3, r3, #6
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	bf02      	ittt	eq
 8006f1e:	68e5      	ldreq	r5, [r4, #12]
 8006f20:	6833      	ldreq	r3, [r6, #0]
 8006f22:	1aed      	subeq	r5, r5, r3
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	bf0c      	ite	eq
 8006f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f2c:	2500      	movne	r5, #0
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	bfc4      	itt	gt
 8006f32:	1a9b      	subgt	r3, r3, r2
 8006f34:	18ed      	addgt	r5, r5, r3
 8006f36:	2600      	movs	r6, #0
 8006f38:	341a      	adds	r4, #26
 8006f3a:	42b5      	cmp	r5, r6
 8006f3c:	d11a      	bne.n	8006f74 <_printf_common+0xc8>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e008      	b.n	8006f54 <_printf_common+0xa8>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4652      	mov	r2, sl
 8006f46:	4641      	mov	r1, r8
 8006f48:	4638      	mov	r0, r7
 8006f4a:	47c8      	blx	r9
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d103      	bne.n	8006f58 <_printf_common+0xac>
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f58:	3501      	adds	r5, #1
 8006f5a:	e7c6      	b.n	8006eea <_printf_common+0x3e>
 8006f5c:	18e1      	adds	r1, r4, r3
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	2030      	movs	r0, #48	@ 0x30
 8006f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f66:	4422      	add	r2, r4
 8006f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f70:	3302      	adds	r3, #2
 8006f72:	e7c7      	b.n	8006f04 <_printf_common+0x58>
 8006f74:	2301      	movs	r3, #1
 8006f76:	4622      	mov	r2, r4
 8006f78:	4641      	mov	r1, r8
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	47c8      	blx	r9
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d0e6      	beq.n	8006f50 <_printf_common+0xa4>
 8006f82:	3601      	adds	r6, #1
 8006f84:	e7d9      	b.n	8006f3a <_printf_common+0x8e>
	...

08006f88 <_printf_i>:
 8006f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	7e0f      	ldrb	r7, [r1, #24]
 8006f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f90:	2f78      	cmp	r7, #120	@ 0x78
 8006f92:	4691      	mov	r9, r2
 8006f94:	4680      	mov	r8, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	469a      	mov	sl, r3
 8006f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f9e:	d807      	bhi.n	8006fb0 <_printf_i+0x28>
 8006fa0:	2f62      	cmp	r7, #98	@ 0x62
 8006fa2:	d80a      	bhi.n	8006fba <_printf_i+0x32>
 8006fa4:	2f00      	cmp	r7, #0
 8006fa6:	f000 80d1 	beq.w	800714c <_printf_i+0x1c4>
 8006faa:	2f58      	cmp	r7, #88	@ 0x58
 8006fac:	f000 80b8 	beq.w	8007120 <_printf_i+0x198>
 8006fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fb8:	e03a      	b.n	8007030 <_printf_i+0xa8>
 8006fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fbe:	2b15      	cmp	r3, #21
 8006fc0:	d8f6      	bhi.n	8006fb0 <_printf_i+0x28>
 8006fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc8 <_printf_i+0x40>)
 8006fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fc8:	08007021 	.word	0x08007021
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08006fb1 	.word	0x08006fb1
 8006fd4:	08006fb1 	.word	0x08006fb1
 8006fd8:	08006fb1 	.word	0x08006fb1
 8006fdc:	08006fb1 	.word	0x08006fb1
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08006fb1 	.word	0x08006fb1
 8006fe8:	08006fb1 	.word	0x08006fb1
 8006fec:	08006fb1 	.word	0x08006fb1
 8006ff0:	08006fb1 	.word	0x08006fb1
 8006ff4:	08007133 	.word	0x08007133
 8006ff8:	0800705f 	.word	0x0800705f
 8006ffc:	080070ed 	.word	0x080070ed
 8007000:	08006fb1 	.word	0x08006fb1
 8007004:	08006fb1 	.word	0x08006fb1
 8007008:	08007155 	.word	0x08007155
 800700c:	08006fb1 	.word	0x08006fb1
 8007010:	0800705f 	.word	0x0800705f
 8007014:	08006fb1 	.word	0x08006fb1
 8007018:	08006fb1 	.word	0x08006fb1
 800701c:	080070f5 	.word	0x080070f5
 8007020:	6833      	ldr	r3, [r6, #0]
 8007022:	1d1a      	adds	r2, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6032      	str	r2, [r6, #0]
 8007028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800702c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007030:	2301      	movs	r3, #1
 8007032:	e09c      	b.n	800716e <_printf_i+0x1e6>
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	1d19      	adds	r1, r3, #4
 800703a:	6031      	str	r1, [r6, #0]
 800703c:	0606      	lsls	r6, r0, #24
 800703e:	d501      	bpl.n	8007044 <_printf_i+0xbc>
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	e003      	b.n	800704c <_printf_i+0xc4>
 8007044:	0645      	lsls	r5, r0, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0xb8>
 8007048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800704c:	2d00      	cmp	r5, #0
 800704e:	da03      	bge.n	8007058 <_printf_i+0xd0>
 8007050:	232d      	movs	r3, #45	@ 0x2d
 8007052:	426d      	negs	r5, r5
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007058:	4858      	ldr	r0, [pc, #352]	@ (80071bc <_printf_i+0x234>)
 800705a:	230a      	movs	r3, #10
 800705c:	e011      	b.n	8007082 <_printf_i+0xfa>
 800705e:	6821      	ldr	r1, [r4, #0]
 8007060:	6833      	ldr	r3, [r6, #0]
 8007062:	0608      	lsls	r0, r1, #24
 8007064:	f853 5b04 	ldr.w	r5, [r3], #4
 8007068:	d402      	bmi.n	8007070 <_printf_i+0xe8>
 800706a:	0649      	lsls	r1, r1, #25
 800706c:	bf48      	it	mi
 800706e:	b2ad      	uxthmi	r5, r5
 8007070:	2f6f      	cmp	r7, #111	@ 0x6f
 8007072:	4852      	ldr	r0, [pc, #328]	@ (80071bc <_printf_i+0x234>)
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	bf14      	ite	ne
 8007078:	230a      	movne	r3, #10
 800707a:	2308      	moveq	r3, #8
 800707c:	2100      	movs	r1, #0
 800707e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007082:	6866      	ldr	r6, [r4, #4]
 8007084:	60a6      	str	r6, [r4, #8]
 8007086:	2e00      	cmp	r6, #0
 8007088:	db05      	blt.n	8007096 <_printf_i+0x10e>
 800708a:	6821      	ldr	r1, [r4, #0]
 800708c:	432e      	orrs	r6, r5
 800708e:	f021 0104 	bic.w	r1, r1, #4
 8007092:	6021      	str	r1, [r4, #0]
 8007094:	d04b      	beq.n	800712e <_printf_i+0x1a6>
 8007096:	4616      	mov	r6, r2
 8007098:	fbb5 f1f3 	udiv	r1, r5, r3
 800709c:	fb03 5711 	mls	r7, r3, r1, r5
 80070a0:	5dc7      	ldrb	r7, [r0, r7]
 80070a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070a6:	462f      	mov	r7, r5
 80070a8:	42bb      	cmp	r3, r7
 80070aa:	460d      	mov	r5, r1
 80070ac:	d9f4      	bls.n	8007098 <_printf_i+0x110>
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d10b      	bne.n	80070ca <_printf_i+0x142>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	07df      	lsls	r7, r3, #31
 80070b6:	d508      	bpl.n	80070ca <_printf_i+0x142>
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	6861      	ldr	r1, [r4, #4]
 80070bc:	4299      	cmp	r1, r3
 80070be:	bfde      	ittt	le
 80070c0:	2330      	movle	r3, #48	@ 0x30
 80070c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070ca:	1b92      	subs	r2, r2, r6
 80070cc:	6122      	str	r2, [r4, #16]
 80070ce:	f8cd a000 	str.w	sl, [sp]
 80070d2:	464b      	mov	r3, r9
 80070d4:	aa03      	add	r2, sp, #12
 80070d6:	4621      	mov	r1, r4
 80070d8:	4640      	mov	r0, r8
 80070da:	f7ff fee7 	bl	8006eac <_printf_common>
 80070de:	3001      	adds	r0, #1
 80070e0:	d14a      	bne.n	8007178 <_printf_i+0x1f0>
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295
 80070e6:	b004      	add	sp, #16
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	f043 0320 	orr.w	r3, r3, #32
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	4832      	ldr	r0, [pc, #200]	@ (80071c0 <_printf_i+0x238>)
 80070f6:	2778      	movs	r7, #120	@ 0x78
 80070f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	6831      	ldr	r1, [r6, #0]
 8007100:	061f      	lsls	r7, r3, #24
 8007102:	f851 5b04 	ldr.w	r5, [r1], #4
 8007106:	d402      	bmi.n	800710e <_printf_i+0x186>
 8007108:	065f      	lsls	r7, r3, #25
 800710a:	bf48      	it	mi
 800710c:	b2ad      	uxthmi	r5, r5
 800710e:	6031      	str	r1, [r6, #0]
 8007110:	07d9      	lsls	r1, r3, #31
 8007112:	bf44      	itt	mi
 8007114:	f043 0320 	orrmi.w	r3, r3, #32
 8007118:	6023      	strmi	r3, [r4, #0]
 800711a:	b11d      	cbz	r5, 8007124 <_printf_i+0x19c>
 800711c:	2310      	movs	r3, #16
 800711e:	e7ad      	b.n	800707c <_printf_i+0xf4>
 8007120:	4826      	ldr	r0, [pc, #152]	@ (80071bc <_printf_i+0x234>)
 8007122:	e7e9      	b.n	80070f8 <_printf_i+0x170>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	f023 0320 	bic.w	r3, r3, #32
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	e7f6      	b.n	800711c <_printf_i+0x194>
 800712e:	4616      	mov	r6, r2
 8007130:	e7bd      	b.n	80070ae <_printf_i+0x126>
 8007132:	6833      	ldr	r3, [r6, #0]
 8007134:	6825      	ldr	r5, [r4, #0]
 8007136:	6961      	ldr	r1, [r4, #20]
 8007138:	1d18      	adds	r0, r3, #4
 800713a:	6030      	str	r0, [r6, #0]
 800713c:	062e      	lsls	r6, r5, #24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	d501      	bpl.n	8007146 <_printf_i+0x1be>
 8007142:	6019      	str	r1, [r3, #0]
 8007144:	e002      	b.n	800714c <_printf_i+0x1c4>
 8007146:	0668      	lsls	r0, r5, #25
 8007148:	d5fb      	bpl.n	8007142 <_printf_i+0x1ba>
 800714a:	8019      	strh	r1, [r3, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	4616      	mov	r6, r2
 8007152:	e7bc      	b.n	80070ce <_printf_i+0x146>
 8007154:	6833      	ldr	r3, [r6, #0]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	6032      	str	r2, [r6, #0]
 800715a:	681e      	ldr	r6, [r3, #0]
 800715c:	6862      	ldr	r2, [r4, #4]
 800715e:	2100      	movs	r1, #0
 8007160:	4630      	mov	r0, r6
 8007162:	f7f9 f855 	bl	8000210 <memchr>
 8007166:	b108      	cbz	r0, 800716c <_printf_i+0x1e4>
 8007168:	1b80      	subs	r0, r0, r6
 800716a:	6060      	str	r0, [r4, #4]
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	2300      	movs	r3, #0
 8007172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007176:	e7aa      	b.n	80070ce <_printf_i+0x146>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	4632      	mov	r2, r6
 800717c:	4649      	mov	r1, r9
 800717e:	4640      	mov	r0, r8
 8007180:	47d0      	blx	sl
 8007182:	3001      	adds	r0, #1
 8007184:	d0ad      	beq.n	80070e2 <_printf_i+0x15a>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	079b      	lsls	r3, r3, #30
 800718a:	d413      	bmi.n	80071b4 <_printf_i+0x22c>
 800718c:	68e0      	ldr	r0, [r4, #12]
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	4298      	cmp	r0, r3
 8007192:	bfb8      	it	lt
 8007194:	4618      	movlt	r0, r3
 8007196:	e7a6      	b.n	80070e6 <_printf_i+0x15e>
 8007198:	2301      	movs	r3, #1
 800719a:	4632      	mov	r2, r6
 800719c:	4649      	mov	r1, r9
 800719e:	4640      	mov	r0, r8
 80071a0:	47d0      	blx	sl
 80071a2:	3001      	adds	r0, #1
 80071a4:	d09d      	beq.n	80070e2 <_printf_i+0x15a>
 80071a6:	3501      	adds	r5, #1
 80071a8:	68e3      	ldr	r3, [r4, #12]
 80071aa:	9903      	ldr	r1, [sp, #12]
 80071ac:	1a5b      	subs	r3, r3, r1
 80071ae:	42ab      	cmp	r3, r5
 80071b0:	dcf2      	bgt.n	8007198 <_printf_i+0x210>
 80071b2:	e7eb      	b.n	800718c <_printf_i+0x204>
 80071b4:	2500      	movs	r5, #0
 80071b6:	f104 0619 	add.w	r6, r4, #25
 80071ba:	e7f5      	b.n	80071a8 <_printf_i+0x220>
 80071bc:	0800b14a 	.word	0x0800b14a
 80071c0:	0800b15b 	.word	0x0800b15b

080071c4 <_scanf_float>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	b087      	sub	sp, #28
 80071ca:	4691      	mov	r9, r2
 80071cc:	9303      	str	r3, [sp, #12]
 80071ce:	688b      	ldr	r3, [r1, #8]
 80071d0:	1e5a      	subs	r2, r3, #1
 80071d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80071d6:	bf81      	itttt	hi
 80071d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80071dc:	eb03 0b05 	addhi.w	fp, r3, r5
 80071e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80071e4:	608b      	strhi	r3, [r1, #8]
 80071e6:	680b      	ldr	r3, [r1, #0]
 80071e8:	460a      	mov	r2, r1
 80071ea:	f04f 0500 	mov.w	r5, #0
 80071ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80071f2:	f842 3b1c 	str.w	r3, [r2], #28
 80071f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071fa:	4680      	mov	r8, r0
 80071fc:	460c      	mov	r4, r1
 80071fe:	bf98      	it	ls
 8007200:	f04f 0b00 	movls.w	fp, #0
 8007204:	9201      	str	r2, [sp, #4]
 8007206:	4616      	mov	r6, r2
 8007208:	46aa      	mov	sl, r5
 800720a:	462f      	mov	r7, r5
 800720c:	9502      	str	r5, [sp, #8]
 800720e:	68a2      	ldr	r2, [r4, #8]
 8007210:	b15a      	cbz	r2, 800722a <_scanf_float+0x66>
 8007212:	f8d9 3000 	ldr.w	r3, [r9]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b4e      	cmp	r3, #78	@ 0x4e
 800721a:	d863      	bhi.n	80072e4 <_scanf_float+0x120>
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	d83b      	bhi.n	8007298 <_scanf_float+0xd4>
 8007220:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007224:	b2c8      	uxtb	r0, r1
 8007226:	280e      	cmp	r0, #14
 8007228:	d939      	bls.n	800729e <_scanf_float+0xda>
 800722a:	b11f      	cbz	r7, 8007234 <_scanf_float+0x70>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007232:	6023      	str	r3, [r4, #0]
 8007234:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007238:	f1ba 0f01 	cmp.w	sl, #1
 800723c:	f200 8114 	bhi.w	8007468 <_scanf_float+0x2a4>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	429e      	cmp	r6, r3
 8007244:	f200 8105 	bhi.w	8007452 <_scanf_float+0x28e>
 8007248:	2001      	movs	r0, #1
 800724a:	b007      	add	sp, #28
 800724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007250:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007254:	2a0d      	cmp	r2, #13
 8007256:	d8e8      	bhi.n	800722a <_scanf_float+0x66>
 8007258:	a101      	add	r1, pc, #4	@ (adr r1, 8007260 <_scanf_float+0x9c>)
 800725a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800725e:	bf00      	nop
 8007260:	080073a9 	.word	0x080073a9
 8007264:	0800722b 	.word	0x0800722b
 8007268:	0800722b 	.word	0x0800722b
 800726c:	0800722b 	.word	0x0800722b
 8007270:	08007405 	.word	0x08007405
 8007274:	080073df 	.word	0x080073df
 8007278:	0800722b 	.word	0x0800722b
 800727c:	0800722b 	.word	0x0800722b
 8007280:	080073b7 	.word	0x080073b7
 8007284:	0800722b 	.word	0x0800722b
 8007288:	0800722b 	.word	0x0800722b
 800728c:	0800722b 	.word	0x0800722b
 8007290:	0800722b 	.word	0x0800722b
 8007294:	08007373 	.word	0x08007373
 8007298:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800729c:	e7da      	b.n	8007254 <_scanf_float+0x90>
 800729e:	290e      	cmp	r1, #14
 80072a0:	d8c3      	bhi.n	800722a <_scanf_float+0x66>
 80072a2:	a001      	add	r0, pc, #4	@ (adr r0, 80072a8 <_scanf_float+0xe4>)
 80072a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072a8:	08007363 	.word	0x08007363
 80072ac:	0800722b 	.word	0x0800722b
 80072b0:	08007363 	.word	0x08007363
 80072b4:	080073f3 	.word	0x080073f3
 80072b8:	0800722b 	.word	0x0800722b
 80072bc:	08007305 	.word	0x08007305
 80072c0:	08007349 	.word	0x08007349
 80072c4:	08007349 	.word	0x08007349
 80072c8:	08007349 	.word	0x08007349
 80072cc:	08007349 	.word	0x08007349
 80072d0:	08007349 	.word	0x08007349
 80072d4:	08007349 	.word	0x08007349
 80072d8:	08007349 	.word	0x08007349
 80072dc:	08007349 	.word	0x08007349
 80072e0:	08007349 	.word	0x08007349
 80072e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80072e6:	d809      	bhi.n	80072fc <_scanf_float+0x138>
 80072e8:	2b60      	cmp	r3, #96	@ 0x60
 80072ea:	d8b1      	bhi.n	8007250 <_scanf_float+0x8c>
 80072ec:	2b54      	cmp	r3, #84	@ 0x54
 80072ee:	d07b      	beq.n	80073e8 <_scanf_float+0x224>
 80072f0:	2b59      	cmp	r3, #89	@ 0x59
 80072f2:	d19a      	bne.n	800722a <_scanf_float+0x66>
 80072f4:	2d07      	cmp	r5, #7
 80072f6:	d198      	bne.n	800722a <_scanf_float+0x66>
 80072f8:	2508      	movs	r5, #8
 80072fa:	e02f      	b.n	800735c <_scanf_float+0x198>
 80072fc:	2b74      	cmp	r3, #116	@ 0x74
 80072fe:	d073      	beq.n	80073e8 <_scanf_float+0x224>
 8007300:	2b79      	cmp	r3, #121	@ 0x79
 8007302:	e7f6      	b.n	80072f2 <_scanf_float+0x12e>
 8007304:	6821      	ldr	r1, [r4, #0]
 8007306:	05c8      	lsls	r0, r1, #23
 8007308:	d51e      	bpl.n	8007348 <_scanf_float+0x184>
 800730a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800730e:	6021      	str	r1, [r4, #0]
 8007310:	3701      	adds	r7, #1
 8007312:	f1bb 0f00 	cmp.w	fp, #0
 8007316:	d003      	beq.n	8007320 <_scanf_float+0x15c>
 8007318:	3201      	adds	r2, #1
 800731a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800731e:	60a2      	str	r2, [r4, #8]
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	3b01      	subs	r3, #1
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	3301      	adds	r3, #1
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007330:	3b01      	subs	r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	f8c9 3004 	str.w	r3, [r9, #4]
 8007338:	f340 8082 	ble.w	8007440 <_scanf_float+0x27c>
 800733c:	f8d9 3000 	ldr.w	r3, [r9]
 8007340:	3301      	adds	r3, #1
 8007342:	f8c9 3000 	str.w	r3, [r9]
 8007346:	e762      	b.n	800720e <_scanf_float+0x4a>
 8007348:	eb1a 0105 	adds.w	r1, sl, r5
 800734c:	f47f af6d 	bne.w	800722a <_scanf_float+0x66>
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	460d      	mov	r5, r1
 800735a:	468a      	mov	sl, r1
 800735c:	f806 3b01 	strb.w	r3, [r6], #1
 8007360:	e7de      	b.n	8007320 <_scanf_float+0x15c>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	0610      	lsls	r0, r2, #24
 8007366:	f57f af60 	bpl.w	800722a <_scanf_float+0x66>
 800736a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800736e:	6022      	str	r2, [r4, #0]
 8007370:	e7f4      	b.n	800735c <_scanf_float+0x198>
 8007372:	f1ba 0f00 	cmp.w	sl, #0
 8007376:	d10c      	bne.n	8007392 <_scanf_float+0x1ce>
 8007378:	b977      	cbnz	r7, 8007398 <_scanf_float+0x1d4>
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007380:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007384:	d108      	bne.n	8007398 <_scanf_float+0x1d4>
 8007386:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	f04f 0a01 	mov.w	sl, #1
 8007390:	e7e4      	b.n	800735c <_scanf_float+0x198>
 8007392:	f1ba 0f02 	cmp.w	sl, #2
 8007396:	d050      	beq.n	800743a <_scanf_float+0x276>
 8007398:	2d01      	cmp	r5, #1
 800739a:	d002      	beq.n	80073a2 <_scanf_float+0x1de>
 800739c:	2d04      	cmp	r5, #4
 800739e:	f47f af44 	bne.w	800722a <_scanf_float+0x66>
 80073a2:	3501      	adds	r5, #1
 80073a4:	b2ed      	uxtb	r5, r5
 80073a6:	e7d9      	b.n	800735c <_scanf_float+0x198>
 80073a8:	f1ba 0f01 	cmp.w	sl, #1
 80073ac:	f47f af3d 	bne.w	800722a <_scanf_float+0x66>
 80073b0:	f04f 0a02 	mov.w	sl, #2
 80073b4:	e7d2      	b.n	800735c <_scanf_float+0x198>
 80073b6:	b975      	cbnz	r5, 80073d6 <_scanf_float+0x212>
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	f47f af37 	bne.w	800722c <_scanf_float+0x68>
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073c8:	f040 8103 	bne.w	80075d2 <_scanf_float+0x40e>
 80073cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	2501      	movs	r5, #1
 80073d4:	e7c2      	b.n	800735c <_scanf_float+0x198>
 80073d6:	2d03      	cmp	r5, #3
 80073d8:	d0e3      	beq.n	80073a2 <_scanf_float+0x1de>
 80073da:	2d05      	cmp	r5, #5
 80073dc:	e7df      	b.n	800739e <_scanf_float+0x1da>
 80073de:	2d02      	cmp	r5, #2
 80073e0:	f47f af23 	bne.w	800722a <_scanf_float+0x66>
 80073e4:	2503      	movs	r5, #3
 80073e6:	e7b9      	b.n	800735c <_scanf_float+0x198>
 80073e8:	2d06      	cmp	r5, #6
 80073ea:	f47f af1e 	bne.w	800722a <_scanf_float+0x66>
 80073ee:	2507      	movs	r5, #7
 80073f0:	e7b4      	b.n	800735c <_scanf_float+0x198>
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	0591      	lsls	r1, r2, #22
 80073f6:	f57f af18 	bpl.w	800722a <_scanf_float+0x66>
 80073fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80073fe:	6022      	str	r2, [r4, #0]
 8007400:	9702      	str	r7, [sp, #8]
 8007402:	e7ab      	b.n	800735c <_scanf_float+0x198>
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800740a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800740e:	d005      	beq.n	800741c <_scanf_float+0x258>
 8007410:	0550      	lsls	r0, r2, #21
 8007412:	f57f af0a 	bpl.w	800722a <_scanf_float+0x66>
 8007416:	2f00      	cmp	r7, #0
 8007418:	f000 80db 	beq.w	80075d2 <_scanf_float+0x40e>
 800741c:	0591      	lsls	r1, r2, #22
 800741e:	bf58      	it	pl
 8007420:	9902      	ldrpl	r1, [sp, #8]
 8007422:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007426:	bf58      	it	pl
 8007428:	1a79      	subpl	r1, r7, r1
 800742a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800742e:	bf58      	it	pl
 8007430:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007434:	6022      	str	r2, [r4, #0]
 8007436:	2700      	movs	r7, #0
 8007438:	e790      	b.n	800735c <_scanf_float+0x198>
 800743a:	f04f 0a03 	mov.w	sl, #3
 800743e:	e78d      	b.n	800735c <_scanf_float+0x198>
 8007440:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007444:	4649      	mov	r1, r9
 8007446:	4640      	mov	r0, r8
 8007448:	4798      	blx	r3
 800744a:	2800      	cmp	r0, #0
 800744c:	f43f aedf 	beq.w	800720e <_scanf_float+0x4a>
 8007450:	e6eb      	b.n	800722a <_scanf_float+0x66>
 8007452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800745a:	464a      	mov	r2, r9
 800745c:	4640      	mov	r0, r8
 800745e:	4798      	blx	r3
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	3b01      	subs	r3, #1
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	e6eb      	b.n	8007240 <_scanf_float+0x7c>
 8007468:	1e6b      	subs	r3, r5, #1
 800746a:	2b06      	cmp	r3, #6
 800746c:	d824      	bhi.n	80074b8 <_scanf_float+0x2f4>
 800746e:	2d02      	cmp	r5, #2
 8007470:	d836      	bhi.n	80074e0 <_scanf_float+0x31c>
 8007472:	9b01      	ldr	r3, [sp, #4]
 8007474:	429e      	cmp	r6, r3
 8007476:	f67f aee7 	bls.w	8007248 <_scanf_float+0x84>
 800747a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800747e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007482:	464a      	mov	r2, r9
 8007484:	4640      	mov	r0, r8
 8007486:	4798      	blx	r3
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	3b01      	subs	r3, #1
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	e7f0      	b.n	8007472 <_scanf_float+0x2ae>
 8007490:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007494:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007498:	464a      	mov	r2, r9
 800749a:	4640      	mov	r0, r8
 800749c:	4798      	blx	r3
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	6123      	str	r3, [r4, #16]
 80074a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074a8:	fa5f fa8a 	uxtb.w	sl, sl
 80074ac:	f1ba 0f02 	cmp.w	sl, #2
 80074b0:	d1ee      	bne.n	8007490 <_scanf_float+0x2cc>
 80074b2:	3d03      	subs	r5, #3
 80074b4:	b2ed      	uxtb	r5, r5
 80074b6:	1b76      	subs	r6, r6, r5
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	05da      	lsls	r2, r3, #23
 80074bc:	d530      	bpl.n	8007520 <_scanf_float+0x35c>
 80074be:	055b      	lsls	r3, r3, #21
 80074c0:	d511      	bpl.n	80074e6 <_scanf_float+0x322>
 80074c2:	9b01      	ldr	r3, [sp, #4]
 80074c4:	429e      	cmp	r6, r3
 80074c6:	f67f aebf 	bls.w	8007248 <_scanf_float+0x84>
 80074ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074d2:	464a      	mov	r2, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	4798      	blx	r3
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	3b01      	subs	r3, #1
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	e7f0      	b.n	80074c2 <_scanf_float+0x2fe>
 80074e0:	46aa      	mov	sl, r5
 80074e2:	46b3      	mov	fp, r6
 80074e4:	e7de      	b.n	80074a4 <_scanf_float+0x2e0>
 80074e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	2965      	cmp	r1, #101	@ 0x65
 80074ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80074f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80074f6:	6123      	str	r3, [r4, #16]
 80074f8:	d00c      	beq.n	8007514 <_scanf_float+0x350>
 80074fa:	2945      	cmp	r1, #69	@ 0x45
 80074fc:	d00a      	beq.n	8007514 <_scanf_float+0x350>
 80074fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007502:	464a      	mov	r2, r9
 8007504:	4640      	mov	r0, r8
 8007506:	4798      	blx	r3
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800750e:	3b01      	subs	r3, #1
 8007510:	1eb5      	subs	r5, r6, #2
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007518:	464a      	mov	r2, r9
 800751a:	4640      	mov	r0, r8
 800751c:	4798      	blx	r3
 800751e:	462e      	mov	r6, r5
 8007520:	6822      	ldr	r2, [r4, #0]
 8007522:	f012 0210 	ands.w	r2, r2, #16
 8007526:	d001      	beq.n	800752c <_scanf_float+0x368>
 8007528:	2000      	movs	r0, #0
 800752a:	e68e      	b.n	800724a <_scanf_float+0x86>
 800752c:	7032      	strb	r2, [r6, #0]
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007538:	d125      	bne.n	8007586 <_scanf_float+0x3c2>
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	429f      	cmp	r7, r3
 800753e:	d00a      	beq.n	8007556 <_scanf_float+0x392>
 8007540:	1bda      	subs	r2, r3, r7
 8007542:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007546:	429e      	cmp	r6, r3
 8007548:	bf28      	it	cs
 800754a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800754e:	4922      	ldr	r1, [pc, #136]	@ (80075d8 <_scanf_float+0x414>)
 8007550:	4630      	mov	r0, r6
 8007552:	f000 f977 	bl	8007844 <siprintf>
 8007556:	9901      	ldr	r1, [sp, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	4640      	mov	r0, r8
 800755c:	f002 fc54 	bl	8009e08 <_strtod_r>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	6821      	ldr	r1, [r4, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f011 0f02 	tst.w	r1, #2
 800756a:	ec57 6b10 	vmov	r6, r7, d0
 800756e:	f103 0204 	add.w	r2, r3, #4
 8007572:	d015      	beq.n	80075a0 <_scanf_float+0x3dc>
 8007574:	9903      	ldr	r1, [sp, #12]
 8007576:	600a      	str	r2, [r1, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	e9c3 6700 	strd	r6, r7, [r3]
 800757e:	68e3      	ldr	r3, [r4, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60e3      	str	r3, [r4, #12]
 8007584:	e7d0      	b.n	8007528 <_scanf_float+0x364>
 8007586:	9b04      	ldr	r3, [sp, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0e4      	beq.n	8007556 <_scanf_float+0x392>
 800758c:	9905      	ldr	r1, [sp, #20]
 800758e:	230a      	movs	r3, #10
 8007590:	3101      	adds	r1, #1
 8007592:	4640      	mov	r0, r8
 8007594:	f002 fcb8 	bl	8009f08 <_strtol_r>
 8007598:	9b04      	ldr	r3, [sp, #16]
 800759a:	9e05      	ldr	r6, [sp, #20]
 800759c:	1ac2      	subs	r2, r0, r3
 800759e:	e7d0      	b.n	8007542 <_scanf_float+0x37e>
 80075a0:	f011 0f04 	tst.w	r1, #4
 80075a4:	9903      	ldr	r1, [sp, #12]
 80075a6:	600a      	str	r2, [r1, #0]
 80075a8:	d1e6      	bne.n	8007578 <_scanf_float+0x3b4>
 80075aa:	681d      	ldr	r5, [r3, #0]
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f9 fada 	bl	8000b6c <__aeabi_dcmpun>
 80075b8:	b128      	cbz	r0, 80075c6 <_scanf_float+0x402>
 80075ba:	4808      	ldr	r0, [pc, #32]	@ (80075dc <_scanf_float+0x418>)
 80075bc:	f000 facc 	bl	8007b58 <nanf>
 80075c0:	ed85 0a00 	vstr	s0, [r5]
 80075c4:	e7db      	b.n	800757e <_scanf_float+0x3ba>
 80075c6:	4630      	mov	r0, r6
 80075c8:	4639      	mov	r1, r7
 80075ca:	f7f9 fb2d 	bl	8000c28 <__aeabi_d2f>
 80075ce:	6028      	str	r0, [r5, #0]
 80075d0:	e7d5      	b.n	800757e <_scanf_float+0x3ba>
 80075d2:	2700      	movs	r7, #0
 80075d4:	e62e      	b.n	8007234 <_scanf_float+0x70>
 80075d6:	bf00      	nop
 80075d8:	0800b16c 	.word	0x0800b16c
 80075dc:	0800b2ad 	.word	0x0800b2ad

080075e0 <std>:
 80075e0:	2300      	movs	r3, #0
 80075e2:	b510      	push	{r4, lr}
 80075e4:	4604      	mov	r4, r0
 80075e6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ee:	6083      	str	r3, [r0, #8]
 80075f0:	8181      	strh	r1, [r0, #12]
 80075f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80075f4:	81c2      	strh	r2, [r0, #14]
 80075f6:	6183      	str	r3, [r0, #24]
 80075f8:	4619      	mov	r1, r3
 80075fa:	2208      	movs	r2, #8
 80075fc:	305c      	adds	r0, #92	@ 0x5c
 80075fe:	f000 fa1b 	bl	8007a38 <memset>
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <std+0x58>)
 8007604:	6263      	str	r3, [r4, #36]	@ 0x24
 8007606:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <std+0x5c>)
 8007608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <std+0x60>)
 800760c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <std+0x64>)
 8007610:	6323      	str	r3, [r4, #48]	@ 0x30
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <std+0x68>)
 8007614:	6224      	str	r4, [r4, #32]
 8007616:	429c      	cmp	r4, r3
 8007618:	d006      	beq.n	8007628 <std+0x48>
 800761a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800761e:	4294      	cmp	r4, r2
 8007620:	d002      	beq.n	8007628 <std+0x48>
 8007622:	33d0      	adds	r3, #208	@ 0xd0
 8007624:	429c      	cmp	r4, r3
 8007626:	d105      	bne.n	8007634 <std+0x54>
 8007628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f000 ba8e 	b.w	8007b50 <__retarget_lock_init_recursive>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	bf00      	nop
 8007638:	08007889 	.word	0x08007889
 800763c:	080078ab 	.word	0x080078ab
 8007640:	080078e3 	.word	0x080078e3
 8007644:	08007907 	.word	0x08007907
 8007648:	200013f8 	.word	0x200013f8

0800764c <stdio_exit_handler>:
 800764c:	4a02      	ldr	r2, [pc, #8]	@ (8007658 <stdio_exit_handler+0xc>)
 800764e:	4903      	ldr	r1, [pc, #12]	@ (800765c <stdio_exit_handler+0x10>)
 8007650:	4803      	ldr	r0, [pc, #12]	@ (8007660 <stdio_exit_handler+0x14>)
 8007652:	f000 b869 	b.w	8007728 <_fwalk_sglue>
 8007656:	bf00      	nop
 8007658:	20000010 	.word	0x20000010
 800765c:	0800a549 	.word	0x0800a549
 8007660:	20000020 	.word	0x20000020

08007664 <cleanup_stdio>:
 8007664:	6841      	ldr	r1, [r0, #4]
 8007666:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <cleanup_stdio+0x34>)
 8007668:	4299      	cmp	r1, r3
 800766a:	b510      	push	{r4, lr}
 800766c:	4604      	mov	r4, r0
 800766e:	d001      	beq.n	8007674 <cleanup_stdio+0x10>
 8007670:	f002 ff6a 	bl	800a548 <_fflush_r>
 8007674:	68a1      	ldr	r1, [r4, #8]
 8007676:	4b09      	ldr	r3, [pc, #36]	@ (800769c <cleanup_stdio+0x38>)
 8007678:	4299      	cmp	r1, r3
 800767a:	d002      	beq.n	8007682 <cleanup_stdio+0x1e>
 800767c:	4620      	mov	r0, r4
 800767e:	f002 ff63 	bl	800a548 <_fflush_r>
 8007682:	68e1      	ldr	r1, [r4, #12]
 8007684:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <cleanup_stdio+0x3c>)
 8007686:	4299      	cmp	r1, r3
 8007688:	d004      	beq.n	8007694 <cleanup_stdio+0x30>
 800768a:	4620      	mov	r0, r4
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007690:	f002 bf5a 	b.w	800a548 <_fflush_r>
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop
 8007698:	200013f8 	.word	0x200013f8
 800769c:	20001460 	.word	0x20001460
 80076a0:	200014c8 	.word	0x200014c8

080076a4 <global_stdio_init.part.0>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <global_stdio_init.part.0+0x30>)
 80076a8:	4c0b      	ldr	r4, [pc, #44]	@ (80076d8 <global_stdio_init.part.0+0x34>)
 80076aa:	4a0c      	ldr	r2, [pc, #48]	@ (80076dc <global_stdio_init.part.0+0x38>)
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	4620      	mov	r0, r4
 80076b0:	2200      	movs	r2, #0
 80076b2:	2104      	movs	r1, #4
 80076b4:	f7ff ff94 	bl	80075e0 <std>
 80076b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076bc:	2201      	movs	r2, #1
 80076be:	2109      	movs	r1, #9
 80076c0:	f7ff ff8e 	bl	80075e0 <std>
 80076c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076c8:	2202      	movs	r2, #2
 80076ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ce:	2112      	movs	r1, #18
 80076d0:	f7ff bf86 	b.w	80075e0 <std>
 80076d4:	20001530 	.word	0x20001530
 80076d8:	200013f8 	.word	0x200013f8
 80076dc:	0800764d 	.word	0x0800764d

080076e0 <__sfp_lock_acquire>:
 80076e0:	4801      	ldr	r0, [pc, #4]	@ (80076e8 <__sfp_lock_acquire+0x8>)
 80076e2:	f000 ba36 	b.w	8007b52 <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	20001539 	.word	0x20001539

080076ec <__sfp_lock_release>:
 80076ec:	4801      	ldr	r0, [pc, #4]	@ (80076f4 <__sfp_lock_release+0x8>)
 80076ee:	f000 ba31 	b.w	8007b54 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	20001539 	.word	0x20001539

080076f8 <__sinit>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	4604      	mov	r4, r0
 80076fc:	f7ff fff0 	bl	80076e0 <__sfp_lock_acquire>
 8007700:	6a23      	ldr	r3, [r4, #32]
 8007702:	b11b      	cbz	r3, 800770c <__sinit+0x14>
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	f7ff bff0 	b.w	80076ec <__sfp_lock_release>
 800770c:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <__sinit+0x28>)
 800770e:	6223      	str	r3, [r4, #32]
 8007710:	4b04      	ldr	r3, [pc, #16]	@ (8007724 <__sinit+0x2c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f5      	bne.n	8007704 <__sinit+0xc>
 8007718:	f7ff ffc4 	bl	80076a4 <global_stdio_init.part.0>
 800771c:	e7f2      	b.n	8007704 <__sinit+0xc>
 800771e:	bf00      	nop
 8007720:	08007665 	.word	0x08007665
 8007724:	20001530 	.word	0x20001530

08007728 <_fwalk_sglue>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	4607      	mov	r7, r0
 800772e:	4688      	mov	r8, r1
 8007730:	4614      	mov	r4, r2
 8007732:	2600      	movs	r6, #0
 8007734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007738:	f1b9 0901 	subs.w	r9, r9, #1
 800773c:	d505      	bpl.n	800774a <_fwalk_sglue+0x22>
 800773e:	6824      	ldr	r4, [r4, #0]
 8007740:	2c00      	cmp	r4, #0
 8007742:	d1f7      	bne.n	8007734 <_fwalk_sglue+0xc>
 8007744:	4630      	mov	r0, r6
 8007746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d907      	bls.n	8007760 <_fwalk_sglue+0x38>
 8007750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007754:	3301      	adds	r3, #1
 8007756:	d003      	beq.n	8007760 <_fwalk_sglue+0x38>
 8007758:	4629      	mov	r1, r5
 800775a:	4638      	mov	r0, r7
 800775c:	47c0      	blx	r8
 800775e:	4306      	orrs	r6, r0
 8007760:	3568      	adds	r5, #104	@ 0x68
 8007762:	e7e9      	b.n	8007738 <_fwalk_sglue+0x10>

08007764 <iprintf>:
 8007764:	b40f      	push	{r0, r1, r2, r3}
 8007766:	b507      	push	{r0, r1, r2, lr}
 8007768:	4906      	ldr	r1, [pc, #24]	@ (8007784 <iprintf+0x20>)
 800776a:	ab04      	add	r3, sp, #16
 800776c:	6808      	ldr	r0, [r1, #0]
 800776e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007772:	6881      	ldr	r1, [r0, #8]
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	f002 fd4b 	bl	800a210 <_vfiprintf_r>
 800777a:	b003      	add	sp, #12
 800777c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007780:	b004      	add	sp, #16
 8007782:	4770      	bx	lr
 8007784:	2000001c 	.word	0x2000001c

08007788 <_puts_r>:
 8007788:	6a03      	ldr	r3, [r0, #32]
 800778a:	b570      	push	{r4, r5, r6, lr}
 800778c:	6884      	ldr	r4, [r0, #8]
 800778e:	4605      	mov	r5, r0
 8007790:	460e      	mov	r6, r1
 8007792:	b90b      	cbnz	r3, 8007798 <_puts_r+0x10>
 8007794:	f7ff ffb0 	bl	80076f8 <__sinit>
 8007798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800779a:	07db      	lsls	r3, r3, #31
 800779c:	d405      	bmi.n	80077aa <_puts_r+0x22>
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	0598      	lsls	r0, r3, #22
 80077a2:	d402      	bmi.n	80077aa <_puts_r+0x22>
 80077a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077a6:	f000 f9d4 	bl	8007b52 <__retarget_lock_acquire_recursive>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	0719      	lsls	r1, r3, #28
 80077ae:	d502      	bpl.n	80077b6 <_puts_r+0x2e>
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d135      	bne.n	8007822 <_puts_r+0x9a>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 f8e7 	bl	800798c <__swsetup_r>
 80077be:	b380      	cbz	r0, 8007822 <_puts_r+0x9a>
 80077c0:	f04f 35ff 	mov.w	r5, #4294967295
 80077c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077c6:	07da      	lsls	r2, r3, #31
 80077c8:	d405      	bmi.n	80077d6 <_puts_r+0x4e>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d402      	bmi.n	80077d6 <_puts_r+0x4e>
 80077d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077d2:	f000 f9bf 	bl	8007b54 <__retarget_lock_release_recursive>
 80077d6:	4628      	mov	r0, r5
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
 80077da:	2b00      	cmp	r3, #0
 80077dc:	da04      	bge.n	80077e8 <_puts_r+0x60>
 80077de:	69a2      	ldr	r2, [r4, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	dc17      	bgt.n	8007814 <_puts_r+0x8c>
 80077e4:	290a      	cmp	r1, #10
 80077e6:	d015      	beq.n	8007814 <_puts_r+0x8c>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	7019      	strb	r1, [r3, #0]
 80077f0:	68a3      	ldr	r3, [r4, #8]
 80077f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077f6:	3b01      	subs	r3, #1
 80077f8:	60a3      	str	r3, [r4, #8]
 80077fa:	2900      	cmp	r1, #0
 80077fc:	d1ed      	bne.n	80077da <_puts_r+0x52>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da11      	bge.n	8007826 <_puts_r+0x9e>
 8007802:	4622      	mov	r2, r4
 8007804:	210a      	movs	r1, #10
 8007806:	4628      	mov	r0, r5
 8007808:	f000 f881 	bl	800790e <__swbuf_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d0d7      	beq.n	80077c0 <_puts_r+0x38>
 8007810:	250a      	movs	r5, #10
 8007812:	e7d7      	b.n	80077c4 <_puts_r+0x3c>
 8007814:	4622      	mov	r2, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f879 	bl	800790e <__swbuf_r>
 800781c:	3001      	adds	r0, #1
 800781e:	d1e7      	bne.n	80077f0 <_puts_r+0x68>
 8007820:	e7ce      	b.n	80077c0 <_puts_r+0x38>
 8007822:	3e01      	subs	r6, #1
 8007824:	e7e4      	b.n	80077f0 <_puts_r+0x68>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	220a      	movs	r2, #10
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e7ee      	b.n	8007810 <_puts_r+0x88>
	...

08007834 <puts>:
 8007834:	4b02      	ldr	r3, [pc, #8]	@ (8007840 <puts+0xc>)
 8007836:	4601      	mov	r1, r0
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f7ff bfa5 	b.w	8007788 <_puts_r>
 800783e:	bf00      	nop
 8007840:	2000001c 	.word	0x2000001c

08007844 <siprintf>:
 8007844:	b40e      	push	{r1, r2, r3}
 8007846:	b510      	push	{r4, lr}
 8007848:	b09d      	sub	sp, #116	@ 0x74
 800784a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800784c:	9002      	str	r0, [sp, #8]
 800784e:	9006      	str	r0, [sp, #24]
 8007850:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007854:	480a      	ldr	r0, [pc, #40]	@ (8007880 <siprintf+0x3c>)
 8007856:	9107      	str	r1, [sp, #28]
 8007858:	9104      	str	r1, [sp, #16]
 800785a:	490a      	ldr	r1, [pc, #40]	@ (8007884 <siprintf+0x40>)
 800785c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007860:	9105      	str	r1, [sp, #20]
 8007862:	2400      	movs	r4, #0
 8007864:	a902      	add	r1, sp, #8
 8007866:	6800      	ldr	r0, [r0, #0]
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800786c:	f002 fbaa 	bl	8009fc4 <_svfiprintf_r>
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	701c      	strb	r4, [r3, #0]
 8007874:	b01d      	add	sp, #116	@ 0x74
 8007876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787a:	b003      	add	sp, #12
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	2000001c 	.word	0x2000001c
 8007884:	ffff0208 	.word	0xffff0208

08007888 <__sread>:
 8007888:	b510      	push	{r4, lr}
 800788a:	460c      	mov	r4, r1
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	f000 f900 	bl	8007a94 <_read_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	bfab      	itete	ge
 8007898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800789a:	89a3      	ldrhlt	r3, [r4, #12]
 800789c:	181b      	addge	r3, r3, r0
 800789e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078a2:	bfac      	ite	ge
 80078a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078a6:	81a3      	strhlt	r3, [r4, #12]
 80078a8:	bd10      	pop	{r4, pc}

080078aa <__swrite>:
 80078aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	461f      	mov	r7, r3
 80078b0:	898b      	ldrh	r3, [r1, #12]
 80078b2:	05db      	lsls	r3, r3, #23
 80078b4:	4605      	mov	r5, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	4616      	mov	r6, r2
 80078ba:	d505      	bpl.n	80078c8 <__swrite+0x1e>
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	2302      	movs	r3, #2
 80078c2:	2200      	movs	r2, #0
 80078c4:	f000 f8d4 	bl	8007a70 <_lseek_r>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	4632      	mov	r2, r6
 80078d6:	463b      	mov	r3, r7
 80078d8:	4628      	mov	r0, r5
 80078da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	f000 b8fb 	b.w	8007ad8 <_write_r>

080078e2 <__sseek>:
 80078e2:	b510      	push	{r4, lr}
 80078e4:	460c      	mov	r4, r1
 80078e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ea:	f000 f8c1 	bl	8007a70 <_lseek_r>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	bf15      	itete	ne
 80078f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078fe:	81a3      	strheq	r3, [r4, #12]
 8007900:	bf18      	it	ne
 8007902:	81a3      	strhne	r3, [r4, #12]
 8007904:	bd10      	pop	{r4, pc}

08007906 <__sclose>:
 8007906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790a:	f000 b8a1 	b.w	8007a50 <_close_r>

0800790e <__swbuf_r>:
 800790e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007910:	460e      	mov	r6, r1
 8007912:	4614      	mov	r4, r2
 8007914:	4605      	mov	r5, r0
 8007916:	b118      	cbz	r0, 8007920 <__swbuf_r+0x12>
 8007918:	6a03      	ldr	r3, [r0, #32]
 800791a:	b90b      	cbnz	r3, 8007920 <__swbuf_r+0x12>
 800791c:	f7ff feec 	bl	80076f8 <__sinit>
 8007920:	69a3      	ldr	r3, [r4, #24]
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	071a      	lsls	r2, r3, #28
 8007928:	d501      	bpl.n	800792e <__swbuf_r+0x20>
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	b943      	cbnz	r3, 8007940 <__swbuf_r+0x32>
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 f82b 	bl	800798c <__swsetup_r>
 8007936:	b118      	cbz	r0, 8007940 <__swbuf_r+0x32>
 8007938:	f04f 37ff 	mov.w	r7, #4294967295
 800793c:	4638      	mov	r0, r7
 800793e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	6922      	ldr	r2, [r4, #16]
 8007944:	1a98      	subs	r0, r3, r2
 8007946:	6963      	ldr	r3, [r4, #20]
 8007948:	b2f6      	uxtb	r6, r6
 800794a:	4283      	cmp	r3, r0
 800794c:	4637      	mov	r7, r6
 800794e:	dc05      	bgt.n	800795c <__swbuf_r+0x4e>
 8007950:	4621      	mov	r1, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f002 fdf8 	bl	800a548 <_fflush_r>
 8007958:	2800      	cmp	r0, #0
 800795a:	d1ed      	bne.n	8007938 <__swbuf_r+0x2a>
 800795c:	68a3      	ldr	r3, [r4, #8]
 800795e:	3b01      	subs	r3, #1
 8007960:	60a3      	str	r3, [r4, #8]
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	6022      	str	r2, [r4, #0]
 8007968:	701e      	strb	r6, [r3, #0]
 800796a:	6962      	ldr	r2, [r4, #20]
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	429a      	cmp	r2, r3
 8007970:	d004      	beq.n	800797c <__swbuf_r+0x6e>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	07db      	lsls	r3, r3, #31
 8007976:	d5e1      	bpl.n	800793c <__swbuf_r+0x2e>
 8007978:	2e0a      	cmp	r6, #10
 800797a:	d1df      	bne.n	800793c <__swbuf_r+0x2e>
 800797c:	4621      	mov	r1, r4
 800797e:	4628      	mov	r0, r5
 8007980:	f002 fde2 	bl	800a548 <_fflush_r>
 8007984:	2800      	cmp	r0, #0
 8007986:	d0d9      	beq.n	800793c <__swbuf_r+0x2e>
 8007988:	e7d6      	b.n	8007938 <__swbuf_r+0x2a>
	...

0800798c <__swsetup_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4b29      	ldr	r3, [pc, #164]	@ (8007a34 <__swsetup_r+0xa8>)
 8007990:	4605      	mov	r5, r0
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	460c      	mov	r4, r1
 8007996:	b118      	cbz	r0, 80079a0 <__swsetup_r+0x14>
 8007998:	6a03      	ldr	r3, [r0, #32]
 800799a:	b90b      	cbnz	r3, 80079a0 <__swsetup_r+0x14>
 800799c:	f7ff feac 	bl	80076f8 <__sinit>
 80079a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a4:	0719      	lsls	r1, r3, #28
 80079a6:	d422      	bmi.n	80079ee <__swsetup_r+0x62>
 80079a8:	06da      	lsls	r2, r3, #27
 80079aa:	d407      	bmi.n	80079bc <__swsetup_r+0x30>
 80079ac:	2209      	movs	r2, #9
 80079ae:	602a      	str	r2, [r5, #0]
 80079b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ba:	e033      	b.n	8007a24 <__swsetup_r+0x98>
 80079bc:	0758      	lsls	r0, r3, #29
 80079be:	d512      	bpl.n	80079e6 <__swsetup_r+0x5a>
 80079c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079c2:	b141      	cbz	r1, 80079d6 <__swsetup_r+0x4a>
 80079c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079c8:	4299      	cmp	r1, r3
 80079ca:	d002      	beq.n	80079d2 <__swsetup_r+0x46>
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 ff23 	bl	8008818 <_free_r>
 80079d2:	2300      	movs	r3, #0
 80079d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	2300      	movs	r3, #0
 80079e0:	6063      	str	r3, [r4, #4]
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f043 0308 	orr.w	r3, r3, #8
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	b94b      	cbnz	r3, 8007a06 <__swsetup_r+0x7a>
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079fc:	d003      	beq.n	8007a06 <__swsetup_r+0x7a>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4628      	mov	r0, r5
 8007a02:	f002 fdef 	bl	800a5e4 <__smakebuf_r>
 8007a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0a:	f013 0201 	ands.w	r2, r3, #1
 8007a0e:	d00a      	beq.n	8007a26 <__swsetup_r+0x9a>
 8007a10:	2200      	movs	r2, #0
 8007a12:	60a2      	str	r2, [r4, #8]
 8007a14:	6962      	ldr	r2, [r4, #20]
 8007a16:	4252      	negs	r2, r2
 8007a18:	61a2      	str	r2, [r4, #24]
 8007a1a:	6922      	ldr	r2, [r4, #16]
 8007a1c:	b942      	cbnz	r2, 8007a30 <__swsetup_r+0xa4>
 8007a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a22:	d1c5      	bne.n	80079b0 <__swsetup_r+0x24>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	0799      	lsls	r1, r3, #30
 8007a28:	bf58      	it	pl
 8007a2a:	6962      	ldrpl	r2, [r4, #20]
 8007a2c:	60a2      	str	r2, [r4, #8]
 8007a2e:	e7f4      	b.n	8007a1a <__swsetup_r+0x8e>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7f7      	b.n	8007a24 <__swsetup_r+0x98>
 8007a34:	2000001c 	.word	0x2000001c

08007a38 <memset>:
 8007a38:	4402      	add	r2, r0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d100      	bne.n	8007a42 <memset+0xa>
 8007a40:	4770      	bx	lr
 8007a42:	f803 1b01 	strb.w	r1, [r3], #1
 8007a46:	e7f9      	b.n	8007a3c <memset+0x4>

08007a48 <_localeconv_r>:
 8007a48:	4800      	ldr	r0, [pc, #0]	@ (8007a4c <_localeconv_r+0x4>)
 8007a4a:	4770      	bx	lr
 8007a4c:	2000015c 	.word	0x2000015c

08007a50 <_close_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4d06      	ldr	r5, [pc, #24]	@ (8007a6c <_close_r+0x1c>)
 8007a54:	2300      	movs	r3, #0
 8007a56:	4604      	mov	r4, r0
 8007a58:	4608      	mov	r0, r1
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	f7fa fea2 	bl	80027a4 <_close>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_close_r+0x1a>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_close_r+0x1a>
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	20001534 	.word	0x20001534

08007a70 <_lseek_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d07      	ldr	r5, [pc, #28]	@ (8007a90 <_lseek_r+0x20>)
 8007a74:	4604      	mov	r4, r0
 8007a76:	4608      	mov	r0, r1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	602a      	str	r2, [r5, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f7fa feb7 	bl	80027f2 <_lseek>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_lseek_r+0x1e>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_lseek_r+0x1e>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20001534 	.word	0x20001534

08007a94 <_read_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	@ (8007ab4 <_read_r+0x20>)
 8007a98:	4604      	mov	r4, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7fa fe45 	bl	8002732 <_read>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_read_r+0x1e>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_read_r+0x1e>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20001534 	.word	0x20001534

08007ab8 <_sbrk_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d06      	ldr	r5, [pc, #24]	@ (8007ad4 <_sbrk_r+0x1c>)
 8007abc:	2300      	movs	r3, #0
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	f7fa fea2 	bl	800280c <_sbrk>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_sbrk_r+0x1a>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_sbrk_r+0x1a>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20001534 	.word	0x20001534

08007ad8 <_write_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	@ (8007af8 <_write_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7fa fe40 	bl	800276c <_write>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_write_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_write_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20001534 	.word	0x20001534

08007afc <__errno>:
 8007afc:	4b01      	ldr	r3, [pc, #4]	@ (8007b04 <__errno+0x8>)
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	2000001c 	.word	0x2000001c

08007b08 <__libc_init_array>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007b40 <__libc_init_array+0x38>)
 8007b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8007b44 <__libc_init_array+0x3c>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	2600      	movs	r6, #0
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	d109      	bne.n	8007b2c <__libc_init_array+0x24>
 8007b18:	4d0b      	ldr	r5, [pc, #44]	@ (8007b48 <__libc_init_array+0x40>)
 8007b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b4c <__libc_init_array+0x44>)
 8007b1c:	f003 faa0 	bl	800b060 <_init>
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	2600      	movs	r6, #0
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d105      	bne.n	8007b36 <__libc_init_array+0x2e>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7ee      	b.n	8007b14 <__libc_init_array+0xc>
 8007b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3a:	4798      	blx	r3
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	e7f2      	b.n	8007b26 <__libc_init_array+0x1e>
 8007b40:	0800b56c 	.word	0x0800b56c
 8007b44:	0800b56c 	.word	0x0800b56c
 8007b48:	0800b56c 	.word	0x0800b56c
 8007b4c:	0800b570 	.word	0x0800b570

08007b50 <__retarget_lock_init_recursive>:
 8007b50:	4770      	bx	lr

08007b52 <__retarget_lock_acquire_recursive>:
 8007b52:	4770      	bx	lr

08007b54 <__retarget_lock_release_recursive>:
 8007b54:	4770      	bx	lr
	...

08007b58 <nanf>:
 8007b58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b60 <nanf+0x8>
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	7fc00000 	.word	0x7fc00000

08007b64 <quorem>:
 8007b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	6903      	ldr	r3, [r0, #16]
 8007b6a:	690c      	ldr	r4, [r1, #16]
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	4607      	mov	r7, r0
 8007b70:	db7e      	blt.n	8007c70 <quorem+0x10c>
 8007b72:	3c01      	subs	r4, #1
 8007b74:	f101 0814 	add.w	r8, r1, #20
 8007b78:	00a3      	lsls	r3, r4, #2
 8007b7a:	f100 0514 	add.w	r5, r0, #20
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	429a      	cmp	r2, r3
 8007b92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b96:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b9a:	d32e      	bcc.n	8007bfa <quorem+0x96>
 8007b9c:	f04f 0a00 	mov.w	sl, #0
 8007ba0:	46c4      	mov	ip, r8
 8007ba2:	46ae      	mov	lr, r5
 8007ba4:	46d3      	mov	fp, sl
 8007ba6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007baa:	b298      	uxth	r0, r3
 8007bac:	fb06 a000 	mla	r0, r6, r0, sl
 8007bb0:	0c02      	lsrs	r2, r0, #16
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	fb06 2303 	mla	r3, r6, r3, r2
 8007bb8:	f8de 2000 	ldr.w	r2, [lr]
 8007bbc:	b280      	uxth	r0, r0
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	1a12      	subs	r2, r2, r0
 8007bc2:	445a      	add	r2, fp
 8007bc4:	f8de 0000 	ldr.w	r0, [lr]
 8007bc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bd2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bdc:	45e1      	cmp	r9, ip
 8007bde:	f84e 2b04 	str.w	r2, [lr], #4
 8007be2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007be6:	d2de      	bcs.n	8007ba6 <quorem+0x42>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	58eb      	ldr	r3, [r5, r3]
 8007bec:	b92b      	cbnz	r3, 8007bfa <quorem+0x96>
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	3b04      	subs	r3, #4
 8007bf2:	429d      	cmp	r5, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	d32f      	bcc.n	8007c58 <quorem+0xf4>
 8007bf8:	613c      	str	r4, [r7, #16]
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f001 f912 	bl	8008e24 <__mcmp>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	db25      	blt.n	8007c50 <quorem+0xec>
 8007c04:	4629      	mov	r1, r5
 8007c06:	2000      	movs	r0, #0
 8007c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c0c:	f8d1 c000 	ldr.w	ip, [r1]
 8007c10:	fa1f fe82 	uxth.w	lr, r2
 8007c14:	fa1f f38c 	uxth.w	r3, ip
 8007c18:	eba3 030e 	sub.w	r3, r3, lr
 8007c1c:	4403      	add	r3, r0
 8007c1e:	0c12      	lsrs	r2, r2, #16
 8007c20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c2e:	45c1      	cmp	r9, r8
 8007c30:	f841 3b04 	str.w	r3, [r1], #4
 8007c34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c38:	d2e6      	bcs.n	8007c08 <quorem+0xa4>
 8007c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c42:	b922      	cbnz	r2, 8007c4e <quorem+0xea>
 8007c44:	3b04      	subs	r3, #4
 8007c46:	429d      	cmp	r5, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	d30b      	bcc.n	8007c64 <quorem+0x100>
 8007c4c:	613c      	str	r4, [r7, #16]
 8007c4e:	3601      	adds	r6, #1
 8007c50:	4630      	mov	r0, r6
 8007c52:	b003      	add	sp, #12
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	6812      	ldr	r2, [r2, #0]
 8007c5a:	3b04      	subs	r3, #4
 8007c5c:	2a00      	cmp	r2, #0
 8007c5e:	d1cb      	bne.n	8007bf8 <quorem+0x94>
 8007c60:	3c01      	subs	r4, #1
 8007c62:	e7c6      	b.n	8007bf2 <quorem+0x8e>
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	3b04      	subs	r3, #4
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d1ef      	bne.n	8007c4c <quorem+0xe8>
 8007c6c:	3c01      	subs	r4, #1
 8007c6e:	e7ea      	b.n	8007c46 <quorem+0xe2>
 8007c70:	2000      	movs	r0, #0
 8007c72:	e7ee      	b.n	8007c52 <quorem+0xee>
 8007c74:	0000      	movs	r0, r0
	...

08007c78 <_dtoa_r>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	69c7      	ldr	r7, [r0, #28]
 8007c7e:	b097      	sub	sp, #92	@ 0x5c
 8007c80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c84:	ec55 4b10 	vmov	r4, r5, d0
 8007c88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007c8a:	9107      	str	r1, [sp, #28]
 8007c8c:	4681      	mov	r9, r0
 8007c8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c92:	b97f      	cbnz	r7, 8007cb4 <_dtoa_r+0x3c>
 8007c94:	2010      	movs	r0, #16
 8007c96:	f7fe fd89 	bl	80067ac <malloc>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007ca0:	b920      	cbnz	r0, 8007cac <_dtoa_r+0x34>
 8007ca2:	4ba9      	ldr	r3, [pc, #676]	@ (8007f48 <_dtoa_r+0x2d0>)
 8007ca4:	21ef      	movs	r1, #239	@ 0xef
 8007ca6:	48a9      	ldr	r0, [pc, #676]	@ (8007f4c <_dtoa_r+0x2d4>)
 8007ca8:	f002 fd3e 	bl	800a728 <__assert_func>
 8007cac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cb0:	6007      	str	r7, [r0, #0]
 8007cb2:	60c7      	str	r7, [r0, #12]
 8007cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	b159      	cbz	r1, 8007cd4 <_dtoa_r+0x5c>
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	604a      	str	r2, [r1, #4]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4093      	lsls	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	f000 fe30 	bl	800892c <_Bfree>
 8007ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	1e2b      	subs	r3, r5, #0
 8007cd6:	bfb9      	ittee	lt
 8007cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cdc:	9305      	strlt	r3, [sp, #20]
 8007cde:	2300      	movge	r3, #0
 8007ce0:	6033      	strge	r3, [r6, #0]
 8007ce2:	9f05      	ldr	r7, [sp, #20]
 8007ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8007f50 <_dtoa_r+0x2d8>)
 8007ce6:	bfbc      	itt	lt
 8007ce8:	2201      	movlt	r2, #1
 8007cea:	6032      	strlt	r2, [r6, #0]
 8007cec:	43bb      	bics	r3, r7
 8007cee:	d112      	bne.n	8007d16 <_dtoa_r+0x9e>
 8007cf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cfc:	4323      	orrs	r3, r4
 8007cfe:	f000 855a 	beq.w	80087b6 <_dtoa_r+0xb3e>
 8007d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f64 <_dtoa_r+0x2ec>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 855c 	beq.w	80087c6 <_dtoa_r+0xb4e>
 8007d0e:	f10a 0303 	add.w	r3, sl, #3
 8007d12:	f000 bd56 	b.w	80087c2 <_dtoa_r+0xb4a>
 8007d16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	ec51 0b17 	vmov	r0, r1, d7
 8007d20:	2300      	movs	r3, #0
 8007d22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007d26:	f7f8 feef 	bl	8000b08 <__aeabi_dcmpeq>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	b158      	cbz	r0, 8007d46 <_dtoa_r+0xce>
 8007d2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d30:	2301      	movs	r3, #1
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d36:	b113      	cbz	r3, 8007d3e <_dtoa_r+0xc6>
 8007d38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d3a:	4b86      	ldr	r3, [pc, #536]	@ (8007f54 <_dtoa_r+0x2dc>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f68 <_dtoa_r+0x2f0>
 8007d42:	f000 bd40 	b.w	80087c6 <_dtoa_r+0xb4e>
 8007d46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007d4a:	aa14      	add	r2, sp, #80	@ 0x50
 8007d4c:	a915      	add	r1, sp, #84	@ 0x54
 8007d4e:	4648      	mov	r0, r9
 8007d50:	f001 f988 	bl	8009064 <__d2b>
 8007d54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d58:	9002      	str	r0, [sp, #8]
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	d078      	beq.n	8007e50 <_dtoa_r+0x1d8>
 8007d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d78:	4619      	mov	r1, r3
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4b76      	ldr	r3, [pc, #472]	@ (8007f58 <_dtoa_r+0x2e0>)
 8007d7e:	f7f8 faa3 	bl	80002c8 <__aeabi_dsub>
 8007d82:	a36b      	add	r3, pc, #428	@ (adr r3, 8007f30 <_dtoa_r+0x2b8>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fc56 	bl	8000638 <__aeabi_dmul>
 8007d8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007f38 <_dtoa_r+0x2c0>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fa9b 	bl	80002cc <__adddf3>
 8007d96:	4604      	mov	r4, r0
 8007d98:	4630      	mov	r0, r6
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	f7f8 fbe2 	bl	8000564 <__aeabi_i2d>
 8007da0:	a367      	add	r3, pc, #412	@ (adr r3, 8007f40 <_dtoa_r+0x2c8>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fc47 	bl	8000638 <__aeabi_dmul>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fa8b 	bl	80002cc <__adddf3>
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	f7f8 feed 	bl	8000b98 <__aeabi_d2iz>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fea8 	bl	8000b1c <__aeabi_dcmplt>
 8007dcc:	b140      	cbz	r0, 8007de0 <_dtoa_r+0x168>
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f7f8 fbc8 	bl	8000564 <__aeabi_i2d>
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	f7f8 fe96 	bl	8000b08 <__aeabi_dcmpeq>
 8007ddc:	b900      	cbnz	r0, 8007de0 <_dtoa_r+0x168>
 8007dde:	3f01      	subs	r7, #1
 8007de0:	2f16      	cmp	r7, #22
 8007de2:	d852      	bhi.n	8007e8a <_dtoa_r+0x212>
 8007de4:	4b5d      	ldr	r3, [pc, #372]	@ (8007f5c <_dtoa_r+0x2e4>)
 8007de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007df2:	f7f8 fe93 	bl	8000b1c <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d049      	beq.n	8007e8e <_dtoa_r+0x216>
 8007dfa:	3f01      	subs	r7, #1
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e02:	1b9b      	subs	r3, r3, r6
 8007e04:	1e5a      	subs	r2, r3, #1
 8007e06:	bf45      	ittet	mi
 8007e08:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e0c:	9300      	strmi	r3, [sp, #0]
 8007e0e:	2300      	movpl	r3, #0
 8007e10:	2300      	movmi	r3, #0
 8007e12:	9206      	str	r2, [sp, #24]
 8007e14:	bf54      	ite	pl
 8007e16:	9300      	strpl	r3, [sp, #0]
 8007e18:	9306      	strmi	r3, [sp, #24]
 8007e1a:	2f00      	cmp	r7, #0
 8007e1c:	db39      	blt.n	8007e92 <_dtoa_r+0x21a>
 8007e1e:	9b06      	ldr	r3, [sp, #24]
 8007e20:	970d      	str	r7, [sp, #52]	@ 0x34
 8007e22:	443b      	add	r3, r7
 8007e24:	9306      	str	r3, [sp, #24]
 8007e26:	2300      	movs	r3, #0
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	9b07      	ldr	r3, [sp, #28]
 8007e2c:	2b09      	cmp	r3, #9
 8007e2e:	d863      	bhi.n	8007ef8 <_dtoa_r+0x280>
 8007e30:	2b05      	cmp	r3, #5
 8007e32:	bfc4      	itt	gt
 8007e34:	3b04      	subgt	r3, #4
 8007e36:	9307      	strgt	r3, [sp, #28]
 8007e38:	9b07      	ldr	r3, [sp, #28]
 8007e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8007e3e:	bfcc      	ite	gt
 8007e40:	2400      	movgt	r4, #0
 8007e42:	2401      	movle	r4, #1
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d863      	bhi.n	8007f10 <_dtoa_r+0x298>
 8007e48:	e8df f003 	tbb	[pc, r3]
 8007e4c:	2b375452 	.word	0x2b375452
 8007e50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e54:	441e      	add	r6, r3
 8007e56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	bfc1      	itttt	gt
 8007e5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e62:	409f      	lslgt	r7, r3
 8007e64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e6c:	bfd6      	itet	le
 8007e6e:	f1c3 0320 	rsble	r3, r3, #32
 8007e72:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e76:	fa04 f003 	lslle.w	r0, r4, r3
 8007e7a:	f7f8 fb63 	bl	8000544 <__aeabi_ui2d>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e84:	3e01      	subs	r6, #1
 8007e86:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e88:	e776      	b.n	8007d78 <_dtoa_r+0x100>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7b7      	b.n	8007dfe <_dtoa_r+0x186>
 8007e8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e90:	e7b6      	b.n	8007e00 <_dtoa_r+0x188>
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	1bdb      	subs	r3, r3, r7
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	427b      	negs	r3, r7
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ea0:	e7c3      	b.n	8007e2a <_dtoa_r+0x1b2>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ea8:	eb07 0b03 	add.w	fp, r7, r3
 8007eac:	f10b 0301 	add.w	r3, fp, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	9303      	str	r3, [sp, #12]
 8007eb4:	bfb8      	it	lt
 8007eb6:	2301      	movlt	r3, #1
 8007eb8:	e006      	b.n	8007ec8 <_dtoa_r+0x250>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dd28      	ble.n	8007f16 <_dtoa_r+0x29e>
 8007ec4:	469b      	mov	fp, r3
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	2204      	movs	r2, #4
 8007ed0:	f102 0514 	add.w	r5, r2, #20
 8007ed4:	429d      	cmp	r5, r3
 8007ed6:	d926      	bls.n	8007f26 <_dtoa_r+0x2ae>
 8007ed8:	6041      	str	r1, [r0, #4]
 8007eda:	4648      	mov	r0, r9
 8007edc:	f000 fce6 	bl	80088ac <_Balloc>
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d142      	bne.n	8007f6c <_dtoa_r+0x2f4>
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <_dtoa_r+0x2e8>)
 8007ee8:	4602      	mov	r2, r0
 8007eea:	f240 11af 	movw	r1, #431	@ 0x1af
 8007eee:	e6da      	b.n	8007ca6 <_dtoa_r+0x2e>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e7e3      	b.n	8007ebc <_dtoa_r+0x244>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e7d5      	b.n	8007ea4 <_dtoa_r+0x22c>
 8007ef8:	2401      	movs	r4, #1
 8007efa:	2300      	movs	r3, #0
 8007efc:	9307      	str	r3, [sp, #28]
 8007efe:	9409      	str	r4, [sp, #36]	@ 0x24
 8007f00:	f04f 3bff 	mov.w	fp, #4294967295
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f0a:	2312      	movs	r3, #18
 8007f0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f0e:	e7db      	b.n	8007ec8 <_dtoa_r+0x250>
 8007f10:	2301      	movs	r3, #1
 8007f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f14:	e7f4      	b.n	8007f00 <_dtoa_r+0x288>
 8007f16:	f04f 0b01 	mov.w	fp, #1
 8007f1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f1e:	465b      	mov	r3, fp
 8007f20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007f24:	e7d0      	b.n	8007ec8 <_dtoa_r+0x250>
 8007f26:	3101      	adds	r1, #1
 8007f28:	0052      	lsls	r2, r2, #1
 8007f2a:	e7d1      	b.n	8007ed0 <_dtoa_r+0x258>
 8007f2c:	f3af 8000 	nop.w
 8007f30:	636f4361 	.word	0x636f4361
 8007f34:	3fd287a7 	.word	0x3fd287a7
 8007f38:	8b60c8b3 	.word	0x8b60c8b3
 8007f3c:	3fc68a28 	.word	0x3fc68a28
 8007f40:	509f79fb 	.word	0x509f79fb
 8007f44:	3fd34413 	.word	0x3fd34413
 8007f48:	0800b17e 	.word	0x0800b17e
 8007f4c:	0800b195 	.word	0x0800b195
 8007f50:	7ff00000 	.word	0x7ff00000
 8007f54:	0800b149 	.word	0x0800b149
 8007f58:	3ff80000 	.word	0x3ff80000
 8007f5c:	0800b348 	.word	0x0800b348
 8007f60:	0800b1ed 	.word	0x0800b1ed
 8007f64:	0800b17a 	.word	0x0800b17a
 8007f68:	0800b148 	.word	0x0800b148
 8007f6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f70:	6018      	str	r0, [r3, #0]
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	2b0e      	cmp	r3, #14
 8007f76:	f200 80a1 	bhi.w	80080bc <_dtoa_r+0x444>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	f000 809e 	beq.w	80080bc <_dtoa_r+0x444>
 8007f80:	2f00      	cmp	r7, #0
 8007f82:	dd33      	ble.n	8007fec <_dtoa_r+0x374>
 8007f84:	4b9c      	ldr	r3, [pc, #624]	@ (80081f8 <_dtoa_r+0x580>)
 8007f86:	f007 020f 	and.w	r2, r7, #15
 8007f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f8e:	ed93 7b00 	vldr	d7, [r3]
 8007f92:	05f8      	lsls	r0, r7, #23
 8007f94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f9c:	d516      	bpl.n	8007fcc <_dtoa_r+0x354>
 8007f9e:	4b97      	ldr	r3, [pc, #604]	@ (80081fc <_dtoa_r+0x584>)
 8007fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fa8:	f7f8 fc70 	bl	800088c <__aeabi_ddiv>
 8007fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fb0:	f004 040f 	and.w	r4, r4, #15
 8007fb4:	2603      	movs	r6, #3
 8007fb6:	4d91      	ldr	r5, [pc, #580]	@ (80081fc <_dtoa_r+0x584>)
 8007fb8:	b954      	cbnz	r4, 8007fd0 <_dtoa_r+0x358>
 8007fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc2:	f7f8 fc63 	bl	800088c <__aeabi_ddiv>
 8007fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fca:	e028      	b.n	800801e <_dtoa_r+0x3a6>
 8007fcc:	2602      	movs	r6, #2
 8007fce:	e7f2      	b.n	8007fb6 <_dtoa_r+0x33e>
 8007fd0:	07e1      	lsls	r1, r4, #31
 8007fd2:	d508      	bpl.n	8007fe6 <_dtoa_r+0x36e>
 8007fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fdc:	f7f8 fb2c 	bl	8000638 <__aeabi_dmul>
 8007fe0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	1064      	asrs	r4, r4, #1
 8007fe8:	3508      	adds	r5, #8
 8007fea:	e7e5      	b.n	8007fb8 <_dtoa_r+0x340>
 8007fec:	f000 80af 	beq.w	800814e <_dtoa_r+0x4d6>
 8007ff0:	427c      	negs	r4, r7
 8007ff2:	4b81      	ldr	r3, [pc, #516]	@ (80081f8 <_dtoa_r+0x580>)
 8007ff4:	4d81      	ldr	r5, [pc, #516]	@ (80081fc <_dtoa_r+0x584>)
 8007ff6:	f004 020f 	and.w	r2, r4, #15
 8007ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800800e:	1124      	asrs	r4, r4, #4
 8008010:	2300      	movs	r3, #0
 8008012:	2602      	movs	r6, #2
 8008014:	2c00      	cmp	r4, #0
 8008016:	f040 808f 	bne.w	8008138 <_dtoa_r+0x4c0>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1d3      	bne.n	8007fc6 <_dtoa_r+0x34e>
 800801e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008020:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 8094 	beq.w	8008152 <_dtoa_r+0x4da>
 800802a:	4b75      	ldr	r3, [pc, #468]	@ (8008200 <_dtoa_r+0x588>)
 800802c:	2200      	movs	r2, #0
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fd73 	bl	8000b1c <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f000 808b 	beq.w	8008152 <_dtoa_r+0x4da>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8087 	beq.w	8008152 <_dtoa_r+0x4da>
 8008044:	f1bb 0f00 	cmp.w	fp, #0
 8008048:	dd34      	ble.n	80080b4 <_dtoa_r+0x43c>
 800804a:	4620      	mov	r0, r4
 800804c:	4b6d      	ldr	r3, [pc, #436]	@ (8008204 <_dtoa_r+0x58c>)
 800804e:	2200      	movs	r2, #0
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 faf1 	bl	8000638 <__aeabi_dmul>
 8008056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800805a:	f107 38ff 	add.w	r8, r7, #4294967295
 800805e:	3601      	adds	r6, #1
 8008060:	465c      	mov	r4, fp
 8008062:	4630      	mov	r0, r6
 8008064:	f7f8 fa7e 	bl	8000564 <__aeabi_i2d>
 8008068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806c:	f7f8 fae4 	bl	8000638 <__aeabi_dmul>
 8008070:	4b65      	ldr	r3, [pc, #404]	@ (8008208 <_dtoa_r+0x590>)
 8008072:	2200      	movs	r2, #0
 8008074:	f7f8 f92a 	bl	80002cc <__adddf3>
 8008078:	4605      	mov	r5, r0
 800807a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800807e:	2c00      	cmp	r4, #0
 8008080:	d16a      	bne.n	8008158 <_dtoa_r+0x4e0>
 8008082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008086:	4b61      	ldr	r3, [pc, #388]	@ (800820c <_dtoa_r+0x594>)
 8008088:	2200      	movs	r2, #0
 800808a:	f7f8 f91d 	bl	80002c8 <__aeabi_dsub>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008096:	462a      	mov	r2, r5
 8008098:	4633      	mov	r3, r6
 800809a:	f7f8 fd5d 	bl	8000b58 <__aeabi_dcmpgt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f040 8298 	bne.w	80085d4 <_dtoa_r+0x95c>
 80080a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a8:	462a      	mov	r2, r5
 80080aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080ae:	f7f8 fd35 	bl	8000b1c <__aeabi_dcmplt>
 80080b2:	bb38      	cbnz	r0, 8008104 <_dtoa_r+0x48c>
 80080b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80080b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f2c0 8157 	blt.w	8008372 <_dtoa_r+0x6fa>
 80080c4:	2f0e      	cmp	r7, #14
 80080c6:	f300 8154 	bgt.w	8008372 <_dtoa_r+0x6fa>
 80080ca:	4b4b      	ldr	r3, [pc, #300]	@ (80081f8 <_dtoa_r+0x580>)
 80080cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080d0:	ed93 7b00 	vldr	d7, [r3]
 80080d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	ed8d 7b00 	vstr	d7, [sp]
 80080dc:	f280 80e5 	bge.w	80082aa <_dtoa_r+0x632>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f300 80e1 	bgt.w	80082aa <_dtoa_r+0x632>
 80080e8:	d10c      	bne.n	8008104 <_dtoa_r+0x48c>
 80080ea:	4b48      	ldr	r3, [pc, #288]	@ (800820c <_dtoa_r+0x594>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	ec51 0b17 	vmov	r0, r1, d7
 80080f2:	f7f8 faa1 	bl	8000638 <__aeabi_dmul>
 80080f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080fa:	f7f8 fd23 	bl	8000b44 <__aeabi_dcmpge>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f000 8266 	beq.w	80085d0 <_dtoa_r+0x958>
 8008104:	2400      	movs	r4, #0
 8008106:	4625      	mov	r5, r4
 8008108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800810a:	4656      	mov	r6, sl
 800810c:	ea6f 0803 	mvn.w	r8, r3
 8008110:	2700      	movs	r7, #0
 8008112:	4621      	mov	r1, r4
 8008114:	4648      	mov	r0, r9
 8008116:	f000 fc09 	bl	800892c <_Bfree>
 800811a:	2d00      	cmp	r5, #0
 800811c:	f000 80bd 	beq.w	800829a <_dtoa_r+0x622>
 8008120:	b12f      	cbz	r7, 800812e <_dtoa_r+0x4b6>
 8008122:	42af      	cmp	r7, r5
 8008124:	d003      	beq.n	800812e <_dtoa_r+0x4b6>
 8008126:	4639      	mov	r1, r7
 8008128:	4648      	mov	r0, r9
 800812a:	f000 fbff 	bl	800892c <_Bfree>
 800812e:	4629      	mov	r1, r5
 8008130:	4648      	mov	r0, r9
 8008132:	f000 fbfb 	bl	800892c <_Bfree>
 8008136:	e0b0      	b.n	800829a <_dtoa_r+0x622>
 8008138:	07e2      	lsls	r2, r4, #31
 800813a:	d505      	bpl.n	8008148 <_dtoa_r+0x4d0>
 800813c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008140:	f7f8 fa7a 	bl	8000638 <__aeabi_dmul>
 8008144:	3601      	adds	r6, #1
 8008146:	2301      	movs	r3, #1
 8008148:	1064      	asrs	r4, r4, #1
 800814a:	3508      	adds	r5, #8
 800814c:	e762      	b.n	8008014 <_dtoa_r+0x39c>
 800814e:	2602      	movs	r6, #2
 8008150:	e765      	b.n	800801e <_dtoa_r+0x3a6>
 8008152:	9c03      	ldr	r4, [sp, #12]
 8008154:	46b8      	mov	r8, r7
 8008156:	e784      	b.n	8008062 <_dtoa_r+0x3ea>
 8008158:	4b27      	ldr	r3, [pc, #156]	@ (80081f8 <_dtoa_r+0x580>)
 800815a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800815c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008160:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008164:	4454      	add	r4, sl
 8008166:	2900      	cmp	r1, #0
 8008168:	d054      	beq.n	8008214 <_dtoa_r+0x59c>
 800816a:	4929      	ldr	r1, [pc, #164]	@ (8008210 <_dtoa_r+0x598>)
 800816c:	2000      	movs	r0, #0
 800816e:	f7f8 fb8d 	bl	800088c <__aeabi_ddiv>
 8008172:	4633      	mov	r3, r6
 8008174:	462a      	mov	r2, r5
 8008176:	f7f8 f8a7 	bl	80002c8 <__aeabi_dsub>
 800817a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800817e:	4656      	mov	r6, sl
 8008180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008184:	f7f8 fd08 	bl	8000b98 <__aeabi_d2iz>
 8008188:	4605      	mov	r5, r0
 800818a:	f7f8 f9eb 	bl	8000564 <__aeabi_i2d>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008196:	f7f8 f897 	bl	80002c8 <__aeabi_dsub>
 800819a:	3530      	adds	r5, #48	@ 0x30
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081a4:	f806 5b01 	strb.w	r5, [r6], #1
 80081a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081ac:	f7f8 fcb6 	bl	8000b1c <__aeabi_dcmplt>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d172      	bne.n	800829a <_dtoa_r+0x622>
 80081b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b8:	4911      	ldr	r1, [pc, #68]	@ (8008200 <_dtoa_r+0x588>)
 80081ba:	2000      	movs	r0, #0
 80081bc:	f7f8 f884 	bl	80002c8 <__aeabi_dsub>
 80081c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081c4:	f7f8 fcaa 	bl	8000b1c <__aeabi_dcmplt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f040 80b4 	bne.w	8008336 <_dtoa_r+0x6be>
 80081ce:	42a6      	cmp	r6, r4
 80081d0:	f43f af70 	beq.w	80080b4 <_dtoa_r+0x43c>
 80081d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008204 <_dtoa_r+0x58c>)
 80081da:	2200      	movs	r2, #0
 80081dc:	f7f8 fa2c 	bl	8000638 <__aeabi_dmul>
 80081e0:	4b08      	ldr	r3, [pc, #32]	@ (8008204 <_dtoa_r+0x58c>)
 80081e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081e6:	2200      	movs	r2, #0
 80081e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ec:	f7f8 fa24 	bl	8000638 <__aeabi_dmul>
 80081f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081f4:	e7c4      	b.n	8008180 <_dtoa_r+0x508>
 80081f6:	bf00      	nop
 80081f8:	0800b348 	.word	0x0800b348
 80081fc:	0800b320 	.word	0x0800b320
 8008200:	3ff00000 	.word	0x3ff00000
 8008204:	40240000 	.word	0x40240000
 8008208:	401c0000 	.word	0x401c0000
 800820c:	40140000 	.word	0x40140000
 8008210:	3fe00000 	.word	0x3fe00000
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	f7f8 fa0e 	bl	8000638 <__aeabi_dmul>
 800821c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008220:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008222:	4656      	mov	r6, sl
 8008224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008228:	f7f8 fcb6 	bl	8000b98 <__aeabi_d2iz>
 800822c:	4605      	mov	r5, r0
 800822e:	f7f8 f999 	bl	8000564 <__aeabi_i2d>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800823a:	f7f8 f845 	bl	80002c8 <__aeabi_dsub>
 800823e:	3530      	adds	r5, #48	@ 0x30
 8008240:	f806 5b01 	strb.w	r5, [r6], #1
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	42a6      	cmp	r6, r4
 800824a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800824e:	f04f 0200 	mov.w	r2, #0
 8008252:	d124      	bne.n	800829e <_dtoa_r+0x626>
 8008254:	4baf      	ldr	r3, [pc, #700]	@ (8008514 <_dtoa_r+0x89c>)
 8008256:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800825a:	f7f8 f837 	bl	80002cc <__adddf3>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008266:	f7f8 fc77 	bl	8000b58 <__aeabi_dcmpgt>
 800826a:	2800      	cmp	r0, #0
 800826c:	d163      	bne.n	8008336 <_dtoa_r+0x6be>
 800826e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008272:	49a8      	ldr	r1, [pc, #672]	@ (8008514 <_dtoa_r+0x89c>)
 8008274:	2000      	movs	r0, #0
 8008276:	f7f8 f827 	bl	80002c8 <__aeabi_dsub>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008282:	f7f8 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8008286:	2800      	cmp	r0, #0
 8008288:	f43f af14 	beq.w	80080b4 <_dtoa_r+0x43c>
 800828c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800828e:	1e73      	subs	r3, r6, #1
 8008290:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008292:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008296:	2b30      	cmp	r3, #48	@ 0x30
 8008298:	d0f8      	beq.n	800828c <_dtoa_r+0x614>
 800829a:	4647      	mov	r7, r8
 800829c:	e03b      	b.n	8008316 <_dtoa_r+0x69e>
 800829e:	4b9e      	ldr	r3, [pc, #632]	@ (8008518 <_dtoa_r+0x8a0>)
 80082a0:	f7f8 f9ca 	bl	8000638 <__aeabi_dmul>
 80082a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a8:	e7bc      	b.n	8008224 <_dtoa_r+0x5ac>
 80082aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80082ae:	4656      	mov	r6, sl
 80082b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f8 fae8 	bl	800088c <__aeabi_ddiv>
 80082bc:	f7f8 fc6c 	bl	8000b98 <__aeabi_d2iz>
 80082c0:	4680      	mov	r8, r0
 80082c2:	f7f8 f94f 	bl	8000564 <__aeabi_i2d>
 80082c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ca:	f7f8 f9b5 	bl	8000638 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082da:	f7f7 fff5 	bl	80002c8 <__aeabi_dsub>
 80082de:	f806 4b01 	strb.w	r4, [r6], #1
 80082e2:	9d03      	ldr	r5, [sp, #12]
 80082e4:	eba6 040a 	sub.w	r4, r6, sl
 80082e8:	42a5      	cmp	r5, r4
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	d133      	bne.n	8008358 <_dtoa_r+0x6e0>
 80082f0:	f7f7 ffec 	bl	80002cc <__adddf3>
 80082f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	f7f8 fc2c 	bl	8000b58 <__aeabi_dcmpgt>
 8008300:	b9c0      	cbnz	r0, 8008334 <_dtoa_r+0x6bc>
 8008302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f8 fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 800830e:	b110      	cbz	r0, 8008316 <_dtoa_r+0x69e>
 8008310:	f018 0f01 	tst.w	r8, #1
 8008314:	d10e      	bne.n	8008334 <_dtoa_r+0x6bc>
 8008316:	9902      	ldr	r1, [sp, #8]
 8008318:	4648      	mov	r0, r9
 800831a:	f000 fb07 	bl	800892c <_Bfree>
 800831e:	2300      	movs	r3, #0
 8008320:	7033      	strb	r3, [r6, #0]
 8008322:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008324:	3701      	adds	r7, #1
 8008326:	601f      	str	r7, [r3, #0]
 8008328:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 824b 	beq.w	80087c6 <_dtoa_r+0xb4e>
 8008330:	601e      	str	r6, [r3, #0]
 8008332:	e248      	b.n	80087c6 <_dtoa_r+0xb4e>
 8008334:	46b8      	mov	r8, r7
 8008336:	4633      	mov	r3, r6
 8008338:	461e      	mov	r6, r3
 800833a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800833e:	2a39      	cmp	r2, #57	@ 0x39
 8008340:	d106      	bne.n	8008350 <_dtoa_r+0x6d8>
 8008342:	459a      	cmp	sl, r3
 8008344:	d1f8      	bne.n	8008338 <_dtoa_r+0x6c0>
 8008346:	2230      	movs	r2, #48	@ 0x30
 8008348:	f108 0801 	add.w	r8, r8, #1
 800834c:	f88a 2000 	strb.w	r2, [sl]
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	3201      	adds	r2, #1
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	e7a0      	b.n	800829a <_dtoa_r+0x622>
 8008358:	4b6f      	ldr	r3, [pc, #444]	@ (8008518 <_dtoa_r+0x8a0>)
 800835a:	2200      	movs	r2, #0
 800835c:	f7f8 f96c 	bl	8000638 <__aeabi_dmul>
 8008360:	2200      	movs	r2, #0
 8008362:	2300      	movs	r3, #0
 8008364:	4604      	mov	r4, r0
 8008366:	460d      	mov	r5, r1
 8008368:	f7f8 fbce 	bl	8000b08 <__aeabi_dcmpeq>
 800836c:	2800      	cmp	r0, #0
 800836e:	d09f      	beq.n	80082b0 <_dtoa_r+0x638>
 8008370:	e7d1      	b.n	8008316 <_dtoa_r+0x69e>
 8008372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008374:	2a00      	cmp	r2, #0
 8008376:	f000 80ea 	beq.w	800854e <_dtoa_r+0x8d6>
 800837a:	9a07      	ldr	r2, [sp, #28]
 800837c:	2a01      	cmp	r2, #1
 800837e:	f300 80cd 	bgt.w	800851c <_dtoa_r+0x8a4>
 8008382:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008384:	2a00      	cmp	r2, #0
 8008386:	f000 80c1 	beq.w	800850c <_dtoa_r+0x894>
 800838a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800838e:	9c08      	ldr	r4, [sp, #32]
 8008390:	9e00      	ldr	r6, [sp, #0]
 8008392:	9a00      	ldr	r2, [sp, #0]
 8008394:	441a      	add	r2, r3
 8008396:	9200      	str	r2, [sp, #0]
 8008398:	9a06      	ldr	r2, [sp, #24]
 800839a:	2101      	movs	r1, #1
 800839c:	441a      	add	r2, r3
 800839e:	4648      	mov	r0, r9
 80083a0:	9206      	str	r2, [sp, #24]
 80083a2:	f000 fbc1 	bl	8008b28 <__i2b>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b166      	cbz	r6, 80083c4 <_dtoa_r+0x74c>
 80083aa:	9b06      	ldr	r3, [sp, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd09      	ble.n	80083c4 <_dtoa_r+0x74c>
 80083b0:	42b3      	cmp	r3, r6
 80083b2:	9a00      	ldr	r2, [sp, #0]
 80083b4:	bfa8      	it	ge
 80083b6:	4633      	movge	r3, r6
 80083b8:	1ad2      	subs	r2, r2, r3
 80083ba:	9200      	str	r2, [sp, #0]
 80083bc:	9a06      	ldr	r2, [sp, #24]
 80083be:	1af6      	subs	r6, r6, r3
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	9306      	str	r3, [sp, #24]
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	b30b      	cbz	r3, 800840c <_dtoa_r+0x794>
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80c6 	beq.w	800855c <_dtoa_r+0x8e4>
 80083d0:	2c00      	cmp	r4, #0
 80083d2:	f000 80c0 	beq.w	8008556 <_dtoa_r+0x8de>
 80083d6:	4629      	mov	r1, r5
 80083d8:	4622      	mov	r2, r4
 80083da:	4648      	mov	r0, r9
 80083dc:	f000 fc5c 	bl	8008c98 <__pow5mult>
 80083e0:	9a02      	ldr	r2, [sp, #8]
 80083e2:	4601      	mov	r1, r0
 80083e4:	4605      	mov	r5, r0
 80083e6:	4648      	mov	r0, r9
 80083e8:	f000 fbb4 	bl	8008b54 <__multiply>
 80083ec:	9902      	ldr	r1, [sp, #8]
 80083ee:	4680      	mov	r8, r0
 80083f0:	4648      	mov	r0, r9
 80083f2:	f000 fa9b 	bl	800892c <_Bfree>
 80083f6:	9b08      	ldr	r3, [sp, #32]
 80083f8:	1b1b      	subs	r3, r3, r4
 80083fa:	9308      	str	r3, [sp, #32]
 80083fc:	f000 80b1 	beq.w	8008562 <_dtoa_r+0x8ea>
 8008400:	9a08      	ldr	r2, [sp, #32]
 8008402:	4641      	mov	r1, r8
 8008404:	4648      	mov	r0, r9
 8008406:	f000 fc47 	bl	8008c98 <__pow5mult>
 800840a:	9002      	str	r0, [sp, #8]
 800840c:	2101      	movs	r1, #1
 800840e:	4648      	mov	r0, r9
 8008410:	f000 fb8a 	bl	8008b28 <__i2b>
 8008414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008416:	4604      	mov	r4, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 81d8 	beq.w	80087ce <_dtoa_r+0xb56>
 800841e:	461a      	mov	r2, r3
 8008420:	4601      	mov	r1, r0
 8008422:	4648      	mov	r0, r9
 8008424:	f000 fc38 	bl	8008c98 <__pow5mult>
 8008428:	9b07      	ldr	r3, [sp, #28]
 800842a:	2b01      	cmp	r3, #1
 800842c:	4604      	mov	r4, r0
 800842e:	f300 809f 	bgt.w	8008570 <_dtoa_r+0x8f8>
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 8097 	bne.w	8008568 <_dtoa_r+0x8f0>
 800843a:	9b05      	ldr	r3, [sp, #20]
 800843c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 8093 	bne.w	800856c <_dtoa_r+0x8f4>
 8008446:	9b05      	ldr	r3, [sp, #20]
 8008448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800844c:	0d1b      	lsrs	r3, r3, #20
 800844e:	051b      	lsls	r3, r3, #20
 8008450:	b133      	cbz	r3, 8008460 <_dtoa_r+0x7e8>
 8008452:	9b00      	ldr	r3, [sp, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	3301      	adds	r3, #1
 800845c:	9306      	str	r3, [sp, #24]
 800845e:	2301      	movs	r3, #1
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 81b8 	beq.w	80087da <_dtoa_r+0xb62>
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008470:	6918      	ldr	r0, [r3, #16]
 8008472:	f000 fb0d 	bl	8008a90 <__hi0bits>
 8008476:	f1c0 0020 	rsb	r0, r0, #32
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	4418      	add	r0, r3
 800847e:	f010 001f 	ands.w	r0, r0, #31
 8008482:	f000 8082 	beq.w	800858a <_dtoa_r+0x912>
 8008486:	f1c0 0320 	rsb	r3, r0, #32
 800848a:	2b04      	cmp	r3, #4
 800848c:	dd73      	ble.n	8008576 <_dtoa_r+0x8fe>
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	f1c0 001c 	rsb	r0, r0, #28
 8008494:	4403      	add	r3, r0
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	9b06      	ldr	r3, [sp, #24]
 800849a:	4403      	add	r3, r0
 800849c:	4406      	add	r6, r0
 800849e:	9306      	str	r3, [sp, #24]
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd05      	ble.n	80084b2 <_dtoa_r+0x83a>
 80084a6:	9902      	ldr	r1, [sp, #8]
 80084a8:	461a      	mov	r2, r3
 80084aa:	4648      	mov	r0, r9
 80084ac:	f000 fc4e 	bl	8008d4c <__lshift>
 80084b0:	9002      	str	r0, [sp, #8]
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd05      	ble.n	80084c4 <_dtoa_r+0x84c>
 80084b8:	4621      	mov	r1, r4
 80084ba:	461a      	mov	r2, r3
 80084bc:	4648      	mov	r0, r9
 80084be:	f000 fc45 	bl	8008d4c <__lshift>
 80084c2:	4604      	mov	r4, r0
 80084c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d061      	beq.n	800858e <_dtoa_r+0x916>
 80084ca:	9802      	ldr	r0, [sp, #8]
 80084cc:	4621      	mov	r1, r4
 80084ce:	f000 fca9 	bl	8008e24 <__mcmp>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	da5b      	bge.n	800858e <_dtoa_r+0x916>
 80084d6:	2300      	movs	r3, #0
 80084d8:	9902      	ldr	r1, [sp, #8]
 80084da:	220a      	movs	r2, #10
 80084dc:	4648      	mov	r0, r9
 80084de:	f000 fa47 	bl	8008970 <__multadd>
 80084e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e4:	9002      	str	r0, [sp, #8]
 80084e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8177 	beq.w	80087de <_dtoa_r+0xb66>
 80084f0:	4629      	mov	r1, r5
 80084f2:	2300      	movs	r3, #0
 80084f4:	220a      	movs	r2, #10
 80084f6:	4648      	mov	r0, r9
 80084f8:	f000 fa3a 	bl	8008970 <__multadd>
 80084fc:	f1bb 0f00 	cmp.w	fp, #0
 8008500:	4605      	mov	r5, r0
 8008502:	dc6f      	bgt.n	80085e4 <_dtoa_r+0x96c>
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	2b02      	cmp	r3, #2
 8008508:	dc49      	bgt.n	800859e <_dtoa_r+0x926>
 800850a:	e06b      	b.n	80085e4 <_dtoa_r+0x96c>
 800850c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800850e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008512:	e73c      	b.n	800838e <_dtoa_r+0x716>
 8008514:	3fe00000 	.word	0x3fe00000
 8008518:	40240000 	.word	0x40240000
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1e5c      	subs	r4, r3, #1
 8008520:	9b08      	ldr	r3, [sp, #32]
 8008522:	42a3      	cmp	r3, r4
 8008524:	db09      	blt.n	800853a <_dtoa_r+0x8c2>
 8008526:	1b1c      	subs	r4, r3, r4
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f6bf af30 	bge.w	8008390 <_dtoa_r+0x718>
 8008530:	9b00      	ldr	r3, [sp, #0]
 8008532:	9a03      	ldr	r2, [sp, #12]
 8008534:	1a9e      	subs	r6, r3, r2
 8008536:	2300      	movs	r3, #0
 8008538:	e72b      	b.n	8008392 <_dtoa_r+0x71a>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800853e:	9408      	str	r4, [sp, #32]
 8008540:	1ae3      	subs	r3, r4, r3
 8008542:	441a      	add	r2, r3
 8008544:	9e00      	ldr	r6, [sp, #0]
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	920d      	str	r2, [sp, #52]	@ 0x34
 800854a:	2400      	movs	r4, #0
 800854c:	e721      	b.n	8008392 <_dtoa_r+0x71a>
 800854e:	9c08      	ldr	r4, [sp, #32]
 8008550:	9e00      	ldr	r6, [sp, #0]
 8008552:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008554:	e728      	b.n	80083a8 <_dtoa_r+0x730>
 8008556:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800855a:	e751      	b.n	8008400 <_dtoa_r+0x788>
 800855c:	9a08      	ldr	r2, [sp, #32]
 800855e:	9902      	ldr	r1, [sp, #8]
 8008560:	e750      	b.n	8008404 <_dtoa_r+0x78c>
 8008562:	f8cd 8008 	str.w	r8, [sp, #8]
 8008566:	e751      	b.n	800840c <_dtoa_r+0x794>
 8008568:	2300      	movs	r3, #0
 800856a:	e779      	b.n	8008460 <_dtoa_r+0x7e8>
 800856c:	9b04      	ldr	r3, [sp, #16]
 800856e:	e777      	b.n	8008460 <_dtoa_r+0x7e8>
 8008570:	2300      	movs	r3, #0
 8008572:	9308      	str	r3, [sp, #32]
 8008574:	e779      	b.n	800846a <_dtoa_r+0x7f2>
 8008576:	d093      	beq.n	80084a0 <_dtoa_r+0x828>
 8008578:	9a00      	ldr	r2, [sp, #0]
 800857a:	331c      	adds	r3, #28
 800857c:	441a      	add	r2, r3
 800857e:	9200      	str	r2, [sp, #0]
 8008580:	9a06      	ldr	r2, [sp, #24]
 8008582:	441a      	add	r2, r3
 8008584:	441e      	add	r6, r3
 8008586:	9206      	str	r2, [sp, #24]
 8008588:	e78a      	b.n	80084a0 <_dtoa_r+0x828>
 800858a:	4603      	mov	r3, r0
 800858c:	e7f4      	b.n	8008578 <_dtoa_r+0x900>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	46b8      	mov	r8, r7
 8008594:	dc20      	bgt.n	80085d8 <_dtoa_r+0x960>
 8008596:	469b      	mov	fp, r3
 8008598:	9b07      	ldr	r3, [sp, #28]
 800859a:	2b02      	cmp	r3, #2
 800859c:	dd1e      	ble.n	80085dc <_dtoa_r+0x964>
 800859e:	f1bb 0f00 	cmp.w	fp, #0
 80085a2:	f47f adb1 	bne.w	8008108 <_dtoa_r+0x490>
 80085a6:	4621      	mov	r1, r4
 80085a8:	465b      	mov	r3, fp
 80085aa:	2205      	movs	r2, #5
 80085ac:	4648      	mov	r0, r9
 80085ae:	f000 f9df 	bl	8008970 <__multadd>
 80085b2:	4601      	mov	r1, r0
 80085b4:	4604      	mov	r4, r0
 80085b6:	9802      	ldr	r0, [sp, #8]
 80085b8:	f000 fc34 	bl	8008e24 <__mcmp>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f77f ada3 	ble.w	8008108 <_dtoa_r+0x490>
 80085c2:	4656      	mov	r6, sl
 80085c4:	2331      	movs	r3, #49	@ 0x31
 80085c6:	f806 3b01 	strb.w	r3, [r6], #1
 80085ca:	f108 0801 	add.w	r8, r8, #1
 80085ce:	e59f      	b.n	8008110 <_dtoa_r+0x498>
 80085d0:	9c03      	ldr	r4, [sp, #12]
 80085d2:	46b8      	mov	r8, r7
 80085d4:	4625      	mov	r5, r4
 80085d6:	e7f4      	b.n	80085c2 <_dtoa_r+0x94a>
 80085d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80085dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 8101 	beq.w	80087e6 <_dtoa_r+0xb6e>
 80085e4:	2e00      	cmp	r6, #0
 80085e6:	dd05      	ble.n	80085f4 <_dtoa_r+0x97c>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4632      	mov	r2, r6
 80085ec:	4648      	mov	r0, r9
 80085ee:	f000 fbad 	bl	8008d4c <__lshift>
 80085f2:	4605      	mov	r5, r0
 80085f4:	9b08      	ldr	r3, [sp, #32]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d05c      	beq.n	80086b4 <_dtoa_r+0xa3c>
 80085fa:	6869      	ldr	r1, [r5, #4]
 80085fc:	4648      	mov	r0, r9
 80085fe:	f000 f955 	bl	80088ac <_Balloc>
 8008602:	4606      	mov	r6, r0
 8008604:	b928      	cbnz	r0, 8008612 <_dtoa_r+0x99a>
 8008606:	4b82      	ldr	r3, [pc, #520]	@ (8008810 <_dtoa_r+0xb98>)
 8008608:	4602      	mov	r2, r0
 800860a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800860e:	f7ff bb4a 	b.w	8007ca6 <_dtoa_r+0x2e>
 8008612:	692a      	ldr	r2, [r5, #16]
 8008614:	3202      	adds	r2, #2
 8008616:	0092      	lsls	r2, r2, #2
 8008618:	f105 010c 	add.w	r1, r5, #12
 800861c:	300c      	adds	r0, #12
 800861e:	f002 f86b 	bl	800a6f8 <memcpy>
 8008622:	2201      	movs	r2, #1
 8008624:	4631      	mov	r1, r6
 8008626:	4648      	mov	r0, r9
 8008628:	f000 fb90 	bl	8008d4c <__lshift>
 800862c:	f10a 0301 	add.w	r3, sl, #1
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	eb0a 030b 	add.w	r3, sl, fp
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	9b04      	ldr	r3, [sp, #16]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	462f      	mov	r7, r5
 8008640:	9306      	str	r3, [sp, #24]
 8008642:	4605      	mov	r5, r0
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	9802      	ldr	r0, [sp, #8]
 8008648:	4621      	mov	r1, r4
 800864a:	f103 3bff 	add.w	fp, r3, #4294967295
 800864e:	f7ff fa89 	bl	8007b64 <quorem>
 8008652:	4603      	mov	r3, r0
 8008654:	3330      	adds	r3, #48	@ 0x30
 8008656:	9003      	str	r0, [sp, #12]
 8008658:	4639      	mov	r1, r7
 800865a:	9802      	ldr	r0, [sp, #8]
 800865c:	9309      	str	r3, [sp, #36]	@ 0x24
 800865e:	f000 fbe1 	bl	8008e24 <__mcmp>
 8008662:	462a      	mov	r2, r5
 8008664:	9004      	str	r0, [sp, #16]
 8008666:	4621      	mov	r1, r4
 8008668:	4648      	mov	r0, r9
 800866a:	f000 fbf7 	bl	8008e5c <__mdiff>
 800866e:	68c2      	ldr	r2, [r0, #12]
 8008670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008672:	4606      	mov	r6, r0
 8008674:	bb02      	cbnz	r2, 80086b8 <_dtoa_r+0xa40>
 8008676:	4601      	mov	r1, r0
 8008678:	9802      	ldr	r0, [sp, #8]
 800867a:	f000 fbd3 	bl	8008e24 <__mcmp>
 800867e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008680:	4602      	mov	r2, r0
 8008682:	4631      	mov	r1, r6
 8008684:	4648      	mov	r0, r9
 8008686:	920c      	str	r2, [sp, #48]	@ 0x30
 8008688:	9309      	str	r3, [sp, #36]	@ 0x24
 800868a:	f000 f94f 	bl	800892c <_Bfree>
 800868e:	9b07      	ldr	r3, [sp, #28]
 8008690:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008692:	9e00      	ldr	r6, [sp, #0]
 8008694:	ea42 0103 	orr.w	r1, r2, r3
 8008698:	9b06      	ldr	r3, [sp, #24]
 800869a:	4319      	orrs	r1, r3
 800869c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869e:	d10d      	bne.n	80086bc <_dtoa_r+0xa44>
 80086a0:	2b39      	cmp	r3, #57	@ 0x39
 80086a2:	d027      	beq.n	80086f4 <_dtoa_r+0xa7c>
 80086a4:	9a04      	ldr	r2, [sp, #16]
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	dd01      	ble.n	80086ae <_dtoa_r+0xa36>
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	3331      	adds	r3, #49	@ 0x31
 80086ae:	f88b 3000 	strb.w	r3, [fp]
 80086b2:	e52e      	b.n	8008112 <_dtoa_r+0x49a>
 80086b4:	4628      	mov	r0, r5
 80086b6:	e7b9      	b.n	800862c <_dtoa_r+0x9b4>
 80086b8:	2201      	movs	r2, #1
 80086ba:	e7e2      	b.n	8008682 <_dtoa_r+0xa0a>
 80086bc:	9904      	ldr	r1, [sp, #16]
 80086be:	2900      	cmp	r1, #0
 80086c0:	db04      	blt.n	80086cc <_dtoa_r+0xa54>
 80086c2:	9807      	ldr	r0, [sp, #28]
 80086c4:	4301      	orrs	r1, r0
 80086c6:	9806      	ldr	r0, [sp, #24]
 80086c8:	4301      	orrs	r1, r0
 80086ca:	d120      	bne.n	800870e <_dtoa_r+0xa96>
 80086cc:	2a00      	cmp	r2, #0
 80086ce:	ddee      	ble.n	80086ae <_dtoa_r+0xa36>
 80086d0:	9902      	ldr	r1, [sp, #8]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	2201      	movs	r2, #1
 80086d6:	4648      	mov	r0, r9
 80086d8:	f000 fb38 	bl	8008d4c <__lshift>
 80086dc:	4621      	mov	r1, r4
 80086de:	9002      	str	r0, [sp, #8]
 80086e0:	f000 fba0 	bl	8008e24 <__mcmp>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	dc02      	bgt.n	80086f0 <_dtoa_r+0xa78>
 80086ea:	d1e0      	bne.n	80086ae <_dtoa_r+0xa36>
 80086ec:	07da      	lsls	r2, r3, #31
 80086ee:	d5de      	bpl.n	80086ae <_dtoa_r+0xa36>
 80086f0:	2b39      	cmp	r3, #57	@ 0x39
 80086f2:	d1da      	bne.n	80086aa <_dtoa_r+0xa32>
 80086f4:	2339      	movs	r3, #57	@ 0x39
 80086f6:	f88b 3000 	strb.w	r3, [fp]
 80086fa:	4633      	mov	r3, r6
 80086fc:	461e      	mov	r6, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008704:	2a39      	cmp	r2, #57	@ 0x39
 8008706:	d04e      	beq.n	80087a6 <_dtoa_r+0xb2e>
 8008708:	3201      	adds	r2, #1
 800870a:	701a      	strb	r2, [r3, #0]
 800870c:	e501      	b.n	8008112 <_dtoa_r+0x49a>
 800870e:	2a00      	cmp	r2, #0
 8008710:	dd03      	ble.n	800871a <_dtoa_r+0xaa2>
 8008712:	2b39      	cmp	r3, #57	@ 0x39
 8008714:	d0ee      	beq.n	80086f4 <_dtoa_r+0xa7c>
 8008716:	3301      	adds	r3, #1
 8008718:	e7c9      	b.n	80086ae <_dtoa_r+0xa36>
 800871a:	9a00      	ldr	r2, [sp, #0]
 800871c:	9908      	ldr	r1, [sp, #32]
 800871e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008722:	428a      	cmp	r2, r1
 8008724:	d028      	beq.n	8008778 <_dtoa_r+0xb00>
 8008726:	9902      	ldr	r1, [sp, #8]
 8008728:	2300      	movs	r3, #0
 800872a:	220a      	movs	r2, #10
 800872c:	4648      	mov	r0, r9
 800872e:	f000 f91f 	bl	8008970 <__multadd>
 8008732:	42af      	cmp	r7, r5
 8008734:	9002      	str	r0, [sp, #8]
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	f04f 020a 	mov.w	r2, #10
 800873e:	4639      	mov	r1, r7
 8008740:	4648      	mov	r0, r9
 8008742:	d107      	bne.n	8008754 <_dtoa_r+0xadc>
 8008744:	f000 f914 	bl	8008970 <__multadd>
 8008748:	4607      	mov	r7, r0
 800874a:	4605      	mov	r5, r0
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	3301      	adds	r3, #1
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	e777      	b.n	8008644 <_dtoa_r+0x9cc>
 8008754:	f000 f90c 	bl	8008970 <__multadd>
 8008758:	4629      	mov	r1, r5
 800875a:	4607      	mov	r7, r0
 800875c:	2300      	movs	r3, #0
 800875e:	220a      	movs	r2, #10
 8008760:	4648      	mov	r0, r9
 8008762:	f000 f905 	bl	8008970 <__multadd>
 8008766:	4605      	mov	r5, r0
 8008768:	e7f0      	b.n	800874c <_dtoa_r+0xad4>
 800876a:	f1bb 0f00 	cmp.w	fp, #0
 800876e:	bfcc      	ite	gt
 8008770:	465e      	movgt	r6, fp
 8008772:	2601      	movle	r6, #1
 8008774:	4456      	add	r6, sl
 8008776:	2700      	movs	r7, #0
 8008778:	9902      	ldr	r1, [sp, #8]
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	2201      	movs	r2, #1
 800877e:	4648      	mov	r0, r9
 8008780:	f000 fae4 	bl	8008d4c <__lshift>
 8008784:	4621      	mov	r1, r4
 8008786:	9002      	str	r0, [sp, #8]
 8008788:	f000 fb4c 	bl	8008e24 <__mcmp>
 800878c:	2800      	cmp	r0, #0
 800878e:	dcb4      	bgt.n	80086fa <_dtoa_r+0xa82>
 8008790:	d102      	bne.n	8008798 <_dtoa_r+0xb20>
 8008792:	9b00      	ldr	r3, [sp, #0]
 8008794:	07db      	lsls	r3, r3, #31
 8008796:	d4b0      	bmi.n	80086fa <_dtoa_r+0xa82>
 8008798:	4633      	mov	r3, r6
 800879a:	461e      	mov	r6, r3
 800879c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087a0:	2a30      	cmp	r2, #48	@ 0x30
 80087a2:	d0fa      	beq.n	800879a <_dtoa_r+0xb22>
 80087a4:	e4b5      	b.n	8008112 <_dtoa_r+0x49a>
 80087a6:	459a      	cmp	sl, r3
 80087a8:	d1a8      	bne.n	80086fc <_dtoa_r+0xa84>
 80087aa:	2331      	movs	r3, #49	@ 0x31
 80087ac:	f108 0801 	add.w	r8, r8, #1
 80087b0:	f88a 3000 	strb.w	r3, [sl]
 80087b4:	e4ad      	b.n	8008112 <_dtoa_r+0x49a>
 80087b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008814 <_dtoa_r+0xb9c>
 80087bc:	b11b      	cbz	r3, 80087c6 <_dtoa_r+0xb4e>
 80087be:	f10a 0308 	add.w	r3, sl, #8
 80087c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4650      	mov	r0, sl
 80087c8:	b017      	add	sp, #92	@ 0x5c
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	9b07      	ldr	r3, [sp, #28]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	f77f ae2e 	ble.w	8008432 <_dtoa_r+0x7ba>
 80087d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087d8:	9308      	str	r3, [sp, #32]
 80087da:	2001      	movs	r0, #1
 80087dc:	e64d      	b.n	800847a <_dtoa_r+0x802>
 80087de:	f1bb 0f00 	cmp.w	fp, #0
 80087e2:	f77f aed9 	ble.w	8008598 <_dtoa_r+0x920>
 80087e6:	4656      	mov	r6, sl
 80087e8:	9802      	ldr	r0, [sp, #8]
 80087ea:	4621      	mov	r1, r4
 80087ec:	f7ff f9ba 	bl	8007b64 <quorem>
 80087f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80087f4:	f806 3b01 	strb.w	r3, [r6], #1
 80087f8:	eba6 020a 	sub.w	r2, r6, sl
 80087fc:	4593      	cmp	fp, r2
 80087fe:	ddb4      	ble.n	800876a <_dtoa_r+0xaf2>
 8008800:	9902      	ldr	r1, [sp, #8]
 8008802:	2300      	movs	r3, #0
 8008804:	220a      	movs	r2, #10
 8008806:	4648      	mov	r0, r9
 8008808:	f000 f8b2 	bl	8008970 <__multadd>
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	e7eb      	b.n	80087e8 <_dtoa_r+0xb70>
 8008810:	0800b1ed 	.word	0x0800b1ed
 8008814:	0800b171 	.word	0x0800b171

08008818 <_free_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4605      	mov	r5, r0
 800881c:	2900      	cmp	r1, #0
 800881e:	d041      	beq.n	80088a4 <_free_r+0x8c>
 8008820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008824:	1f0c      	subs	r4, r1, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfb8      	it	lt
 800882a:	18e4      	addlt	r4, r4, r3
 800882c:	f7fe f868 	bl	8006900 <__malloc_lock>
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <_free_r+0x90>)
 8008832:	6813      	ldr	r3, [r2, #0]
 8008834:	b933      	cbnz	r3, 8008844 <_free_r+0x2c>
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6014      	str	r4, [r2, #0]
 800883a:	4628      	mov	r0, r5
 800883c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008840:	f7fe b864 	b.w	800690c <__malloc_unlock>
 8008844:	42a3      	cmp	r3, r4
 8008846:	d908      	bls.n	800885a <_free_r+0x42>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	1821      	adds	r1, r4, r0
 800884c:	428b      	cmp	r3, r1
 800884e:	bf01      	itttt	eq
 8008850:	6819      	ldreq	r1, [r3, #0]
 8008852:	685b      	ldreq	r3, [r3, #4]
 8008854:	1809      	addeq	r1, r1, r0
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	e7ed      	b.n	8008836 <_free_r+0x1e>
 800885a:	461a      	mov	r2, r3
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	b10b      	cbz	r3, 8008864 <_free_r+0x4c>
 8008860:	42a3      	cmp	r3, r4
 8008862:	d9fa      	bls.n	800885a <_free_r+0x42>
 8008864:	6811      	ldr	r1, [r2, #0]
 8008866:	1850      	adds	r0, r2, r1
 8008868:	42a0      	cmp	r0, r4
 800886a:	d10b      	bne.n	8008884 <_free_r+0x6c>
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	4401      	add	r1, r0
 8008870:	1850      	adds	r0, r2, r1
 8008872:	4283      	cmp	r3, r0
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	d1e0      	bne.n	800883a <_free_r+0x22>
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	6053      	str	r3, [r2, #4]
 800887e:	4408      	add	r0, r1
 8008880:	6010      	str	r0, [r2, #0]
 8008882:	e7da      	b.n	800883a <_free_r+0x22>
 8008884:	d902      	bls.n	800888c <_free_r+0x74>
 8008886:	230c      	movs	r3, #12
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	e7d6      	b.n	800883a <_free_r+0x22>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	1821      	adds	r1, r4, r0
 8008890:	428b      	cmp	r3, r1
 8008892:	bf04      	itt	eq
 8008894:	6819      	ldreq	r1, [r3, #0]
 8008896:	685b      	ldreq	r3, [r3, #4]
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	bf04      	itt	eq
 800889c:	1809      	addeq	r1, r1, r0
 800889e:	6021      	streq	r1, [r4, #0]
 80088a0:	6054      	str	r4, [r2, #4]
 80088a2:	e7ca      	b.n	800883a <_free_r+0x22>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	200013f4 	.word	0x200013f4

080088ac <_Balloc>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	69c6      	ldr	r6, [r0, #28]
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	b976      	cbnz	r6, 80088d4 <_Balloc+0x28>
 80088b6:	2010      	movs	r0, #16
 80088b8:	f7fd ff78 	bl	80067ac <malloc>
 80088bc:	4602      	mov	r2, r0
 80088be:	61e0      	str	r0, [r4, #28]
 80088c0:	b920      	cbnz	r0, 80088cc <_Balloc+0x20>
 80088c2:	4b18      	ldr	r3, [pc, #96]	@ (8008924 <_Balloc+0x78>)
 80088c4:	4818      	ldr	r0, [pc, #96]	@ (8008928 <_Balloc+0x7c>)
 80088c6:	216b      	movs	r1, #107	@ 0x6b
 80088c8:	f001 ff2e 	bl	800a728 <__assert_func>
 80088cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d0:	6006      	str	r6, [r0, #0]
 80088d2:	60c6      	str	r6, [r0, #12]
 80088d4:	69e6      	ldr	r6, [r4, #28]
 80088d6:	68f3      	ldr	r3, [r6, #12]
 80088d8:	b183      	cbz	r3, 80088fc <_Balloc+0x50>
 80088da:	69e3      	ldr	r3, [r4, #28]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088e2:	b9b8      	cbnz	r0, 8008914 <_Balloc+0x68>
 80088e4:	2101      	movs	r1, #1
 80088e6:	fa01 f605 	lsl.w	r6, r1, r5
 80088ea:	1d72      	adds	r2, r6, #5
 80088ec:	0092      	lsls	r2, r2, #2
 80088ee:	4620      	mov	r0, r4
 80088f0:	f001 ff38 	bl	800a764 <_calloc_r>
 80088f4:	b160      	cbz	r0, 8008910 <_Balloc+0x64>
 80088f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088fa:	e00e      	b.n	800891a <_Balloc+0x6e>
 80088fc:	2221      	movs	r2, #33	@ 0x21
 80088fe:	2104      	movs	r1, #4
 8008900:	4620      	mov	r0, r4
 8008902:	f001 ff2f 	bl	800a764 <_calloc_r>
 8008906:	69e3      	ldr	r3, [r4, #28]
 8008908:	60f0      	str	r0, [r6, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e4      	bne.n	80088da <_Balloc+0x2e>
 8008910:	2000      	movs	r0, #0
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	6802      	ldr	r2, [r0, #0]
 8008916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800891a:	2300      	movs	r3, #0
 800891c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008920:	e7f7      	b.n	8008912 <_Balloc+0x66>
 8008922:	bf00      	nop
 8008924:	0800b17e 	.word	0x0800b17e
 8008928:	0800b1fe 	.word	0x0800b1fe

0800892c <_Bfree>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	69c6      	ldr	r6, [r0, #28]
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	b976      	cbnz	r6, 8008954 <_Bfree+0x28>
 8008936:	2010      	movs	r0, #16
 8008938:	f7fd ff38 	bl	80067ac <malloc>
 800893c:	4602      	mov	r2, r0
 800893e:	61e8      	str	r0, [r5, #28]
 8008940:	b920      	cbnz	r0, 800894c <_Bfree+0x20>
 8008942:	4b09      	ldr	r3, [pc, #36]	@ (8008968 <_Bfree+0x3c>)
 8008944:	4809      	ldr	r0, [pc, #36]	@ (800896c <_Bfree+0x40>)
 8008946:	218f      	movs	r1, #143	@ 0x8f
 8008948:	f001 feee 	bl	800a728 <__assert_func>
 800894c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008950:	6006      	str	r6, [r0, #0]
 8008952:	60c6      	str	r6, [r0, #12]
 8008954:	b13c      	cbz	r4, 8008966 <_Bfree+0x3a>
 8008956:	69eb      	ldr	r3, [r5, #28]
 8008958:	6862      	ldr	r2, [r4, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008960:	6021      	str	r1, [r4, #0]
 8008962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	0800b17e 	.word	0x0800b17e
 800896c:	0800b1fe 	.word	0x0800b1fe

08008970 <__multadd>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	690d      	ldr	r5, [r1, #16]
 8008976:	4607      	mov	r7, r0
 8008978:	460c      	mov	r4, r1
 800897a:	461e      	mov	r6, r3
 800897c:	f101 0c14 	add.w	ip, r1, #20
 8008980:	2000      	movs	r0, #0
 8008982:	f8dc 3000 	ldr.w	r3, [ip]
 8008986:	b299      	uxth	r1, r3
 8008988:	fb02 6101 	mla	r1, r2, r1, r6
 800898c:	0c1e      	lsrs	r6, r3, #16
 800898e:	0c0b      	lsrs	r3, r1, #16
 8008990:	fb02 3306 	mla	r3, r2, r6, r3
 8008994:	b289      	uxth	r1, r1
 8008996:	3001      	adds	r0, #1
 8008998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800899c:	4285      	cmp	r5, r0
 800899e:	f84c 1b04 	str.w	r1, [ip], #4
 80089a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a6:	dcec      	bgt.n	8008982 <__multadd+0x12>
 80089a8:	b30e      	cbz	r6, 80089ee <__multadd+0x7e>
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dc19      	bgt.n	80089e4 <__multadd+0x74>
 80089b0:	6861      	ldr	r1, [r4, #4]
 80089b2:	4638      	mov	r0, r7
 80089b4:	3101      	adds	r1, #1
 80089b6:	f7ff ff79 	bl	80088ac <_Balloc>
 80089ba:	4680      	mov	r8, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__multadd+0x5a>
 80089be:	4602      	mov	r2, r0
 80089c0:	4b0c      	ldr	r3, [pc, #48]	@ (80089f4 <__multadd+0x84>)
 80089c2:	480d      	ldr	r0, [pc, #52]	@ (80089f8 <__multadd+0x88>)
 80089c4:	21ba      	movs	r1, #186	@ 0xba
 80089c6:	f001 feaf 	bl	800a728 <__assert_func>
 80089ca:	6922      	ldr	r2, [r4, #16]
 80089cc:	3202      	adds	r2, #2
 80089ce:	f104 010c 	add.w	r1, r4, #12
 80089d2:	0092      	lsls	r2, r2, #2
 80089d4:	300c      	adds	r0, #12
 80089d6:	f001 fe8f 	bl	800a6f8 <memcpy>
 80089da:	4621      	mov	r1, r4
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ffa5 	bl	800892c <_Bfree>
 80089e2:	4644      	mov	r4, r8
 80089e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e8:	3501      	adds	r5, #1
 80089ea:	615e      	str	r6, [r3, #20]
 80089ec:	6125      	str	r5, [r4, #16]
 80089ee:	4620      	mov	r0, r4
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f4:	0800b1ed 	.word	0x0800b1ed
 80089f8:	0800b1fe 	.word	0x0800b1fe

080089fc <__s2b>:
 80089fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	460c      	mov	r4, r1
 8008a02:	4615      	mov	r5, r2
 8008a04:	461f      	mov	r7, r3
 8008a06:	2209      	movs	r2, #9
 8008a08:	3308      	adds	r3, #8
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a10:	2100      	movs	r1, #0
 8008a12:	2201      	movs	r2, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	db09      	blt.n	8008a2c <__s2b+0x30>
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff ff47 	bl	80088ac <_Balloc>
 8008a1e:	b940      	cbnz	r0, 8008a32 <__s2b+0x36>
 8008a20:	4602      	mov	r2, r0
 8008a22:	4b19      	ldr	r3, [pc, #100]	@ (8008a88 <__s2b+0x8c>)
 8008a24:	4819      	ldr	r0, [pc, #100]	@ (8008a8c <__s2b+0x90>)
 8008a26:	21d3      	movs	r1, #211	@ 0xd3
 8008a28:	f001 fe7e 	bl	800a728 <__assert_func>
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	3101      	adds	r1, #1
 8008a30:	e7f0      	b.n	8008a14 <__s2b+0x18>
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	6143      	str	r3, [r0, #20]
 8008a36:	2d09      	cmp	r5, #9
 8008a38:	f04f 0301 	mov.w	r3, #1
 8008a3c:	6103      	str	r3, [r0, #16]
 8008a3e:	dd16      	ble.n	8008a6e <__s2b+0x72>
 8008a40:	f104 0909 	add.w	r9, r4, #9
 8008a44:	46c8      	mov	r8, r9
 8008a46:	442c      	add	r4, r5
 8008a48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	3b30      	subs	r3, #48	@ 0x30
 8008a50:	220a      	movs	r2, #10
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff ff8c 	bl	8008970 <__multadd>
 8008a58:	45a0      	cmp	r8, r4
 8008a5a:	d1f5      	bne.n	8008a48 <__s2b+0x4c>
 8008a5c:	f1a5 0408 	sub.w	r4, r5, #8
 8008a60:	444c      	add	r4, r9
 8008a62:	1b2d      	subs	r5, r5, r4
 8008a64:	1963      	adds	r3, r4, r5
 8008a66:	42bb      	cmp	r3, r7
 8008a68:	db04      	blt.n	8008a74 <__s2b+0x78>
 8008a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6e:	340a      	adds	r4, #10
 8008a70:	2509      	movs	r5, #9
 8008a72:	e7f6      	b.n	8008a62 <__s2b+0x66>
 8008a74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a78:	4601      	mov	r1, r0
 8008a7a:	3b30      	subs	r3, #48	@ 0x30
 8008a7c:	220a      	movs	r2, #10
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ff76 	bl	8008970 <__multadd>
 8008a84:	e7ee      	b.n	8008a64 <__s2b+0x68>
 8008a86:	bf00      	nop
 8008a88:	0800b1ed 	.word	0x0800b1ed
 8008a8c:	0800b1fe 	.word	0x0800b1fe

08008a90 <__hi0bits>:
 8008a90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a94:	4603      	mov	r3, r0
 8008a96:	bf36      	itet	cc
 8008a98:	0403      	lslcc	r3, r0, #16
 8008a9a:	2000      	movcs	r0, #0
 8008a9c:	2010      	movcc	r0, #16
 8008a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa2:	bf3c      	itt	cc
 8008aa4:	021b      	lslcc	r3, r3, #8
 8008aa6:	3008      	addcc	r0, #8
 8008aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aac:	bf3c      	itt	cc
 8008aae:	011b      	lslcc	r3, r3, #4
 8008ab0:	3004      	addcc	r0, #4
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab6:	bf3c      	itt	cc
 8008ab8:	009b      	lslcc	r3, r3, #2
 8008aba:	3002      	addcc	r0, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db05      	blt.n	8008acc <__hi0bits+0x3c>
 8008ac0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ac4:	f100 0001 	add.w	r0, r0, #1
 8008ac8:	bf08      	it	eq
 8008aca:	2020      	moveq	r0, #32
 8008acc:	4770      	bx	lr

08008ace <__lo0bits>:
 8008ace:	6803      	ldr	r3, [r0, #0]
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	f013 0007 	ands.w	r0, r3, #7
 8008ad6:	d00b      	beq.n	8008af0 <__lo0bits+0x22>
 8008ad8:	07d9      	lsls	r1, r3, #31
 8008ada:	d421      	bmi.n	8008b20 <__lo0bits+0x52>
 8008adc:	0798      	lsls	r0, r3, #30
 8008ade:	bf49      	itett	mi
 8008ae0:	085b      	lsrmi	r3, r3, #1
 8008ae2:	089b      	lsrpl	r3, r3, #2
 8008ae4:	2001      	movmi	r0, #1
 8008ae6:	6013      	strmi	r3, [r2, #0]
 8008ae8:	bf5c      	itt	pl
 8008aea:	6013      	strpl	r3, [r2, #0]
 8008aec:	2002      	movpl	r0, #2
 8008aee:	4770      	bx	lr
 8008af0:	b299      	uxth	r1, r3
 8008af2:	b909      	cbnz	r1, 8008af8 <__lo0bits+0x2a>
 8008af4:	0c1b      	lsrs	r3, r3, #16
 8008af6:	2010      	movs	r0, #16
 8008af8:	b2d9      	uxtb	r1, r3
 8008afa:	b909      	cbnz	r1, 8008b00 <__lo0bits+0x32>
 8008afc:	3008      	adds	r0, #8
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	bf04      	itt	eq
 8008b04:	091b      	lsreq	r3, r3, #4
 8008b06:	3004      	addeq	r0, #4
 8008b08:	0799      	lsls	r1, r3, #30
 8008b0a:	bf04      	itt	eq
 8008b0c:	089b      	lsreq	r3, r3, #2
 8008b0e:	3002      	addeq	r0, #2
 8008b10:	07d9      	lsls	r1, r3, #31
 8008b12:	d403      	bmi.n	8008b1c <__lo0bits+0x4e>
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	f100 0001 	add.w	r0, r0, #1
 8008b1a:	d003      	beq.n	8008b24 <__lo0bits+0x56>
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	4770      	bx	lr
 8008b20:	2000      	movs	r0, #0
 8008b22:	4770      	bx	lr
 8008b24:	2020      	movs	r0, #32
 8008b26:	4770      	bx	lr

08008b28 <__i2b>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	f7ff febd 	bl	80088ac <_Balloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	b928      	cbnz	r0, 8008b42 <__i2b+0x1a>
 8008b36:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <__i2b+0x24>)
 8008b38:	4805      	ldr	r0, [pc, #20]	@ (8008b50 <__i2b+0x28>)
 8008b3a:	f240 1145 	movw	r1, #325	@ 0x145
 8008b3e:	f001 fdf3 	bl	800a728 <__assert_func>
 8008b42:	2301      	movs	r3, #1
 8008b44:	6144      	str	r4, [r0, #20]
 8008b46:	6103      	str	r3, [r0, #16]
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0800b1ed 	.word	0x0800b1ed
 8008b50:	0800b1fe 	.word	0x0800b1fe

08008b54 <__multiply>:
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	4617      	mov	r7, r2
 8008b5a:	690a      	ldr	r2, [r1, #16]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	bfa8      	it	ge
 8008b62:	463b      	movge	r3, r7
 8008b64:	4689      	mov	r9, r1
 8008b66:	bfa4      	itt	ge
 8008b68:	460f      	movge	r7, r1
 8008b6a:	4699      	movge	r9, r3
 8008b6c:	693d      	ldr	r5, [r7, #16]
 8008b6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	eb05 060a 	add.w	r6, r5, sl
 8008b7a:	42b3      	cmp	r3, r6
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	bfb8      	it	lt
 8008b80:	3101      	addlt	r1, #1
 8008b82:	f7ff fe93 	bl	80088ac <_Balloc>
 8008b86:	b930      	cbnz	r0, 8008b96 <__multiply+0x42>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	4b41      	ldr	r3, [pc, #260]	@ (8008c90 <__multiply+0x13c>)
 8008b8c:	4841      	ldr	r0, [pc, #260]	@ (8008c94 <__multiply+0x140>)
 8008b8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b92:	f001 fdc9 	bl	800a728 <__assert_func>
 8008b96:	f100 0414 	add.w	r4, r0, #20
 8008b9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b9e:	4623      	mov	r3, r4
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4573      	cmp	r3, lr
 8008ba4:	d320      	bcc.n	8008be8 <__multiply+0x94>
 8008ba6:	f107 0814 	add.w	r8, r7, #20
 8008baa:	f109 0114 	add.w	r1, r9, #20
 8008bae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008bb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	1beb      	subs	r3, r5, r7
 8008bba:	3b15      	subs	r3, #21
 8008bbc:	f023 0303 	bic.w	r3, r3, #3
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	3715      	adds	r7, #21
 8008bc4:	42bd      	cmp	r5, r7
 8008bc6:	bf38      	it	cc
 8008bc8:	2304      	movcc	r3, #4
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	9b02      	ldr	r3, [sp, #8]
 8008bce:	9103      	str	r1, [sp, #12]
 8008bd0:	428b      	cmp	r3, r1
 8008bd2:	d80c      	bhi.n	8008bee <__multiply+0x9a>
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	dd03      	ble.n	8008be0 <__multiply+0x8c>
 8008bd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d055      	beq.n	8008c8c <__multiply+0x138>
 8008be0:	6106      	str	r6, [r0, #16]
 8008be2:	b005      	add	sp, #20
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	f843 2b04 	str.w	r2, [r3], #4
 8008bec:	e7d9      	b.n	8008ba2 <__multiply+0x4e>
 8008bee:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bf2:	f1ba 0f00 	cmp.w	sl, #0
 8008bf6:	d01f      	beq.n	8008c38 <__multiply+0xe4>
 8008bf8:	46c4      	mov	ip, r8
 8008bfa:	46a1      	mov	r9, r4
 8008bfc:	2700      	movs	r7, #0
 8008bfe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c02:	f8d9 3000 	ldr.w	r3, [r9]
 8008c06:	fa1f fb82 	uxth.w	fp, r2
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c10:	443b      	add	r3, r7
 8008c12:	f8d9 7000 	ldr.w	r7, [r9]
 8008c16:	0c12      	lsrs	r2, r2, #16
 8008c18:	0c3f      	lsrs	r7, r7, #16
 8008c1a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c28:	4565      	cmp	r5, ip
 8008c2a:	f849 3b04 	str.w	r3, [r9], #4
 8008c2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c32:	d8e4      	bhi.n	8008bfe <__multiply+0xaa>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	50e7      	str	r7, [r4, r3]
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c3e:	3104      	adds	r1, #4
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	d020      	beq.n	8008c88 <__multiply+0x134>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	4647      	mov	r7, r8
 8008c4a:	46a4      	mov	ip, r4
 8008c4c:	f04f 0a00 	mov.w	sl, #0
 8008c50:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c58:	fb09 220b 	mla	r2, r9, fp, r2
 8008c5c:	4452      	add	r2, sl
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c64:	f84c 3b04 	str.w	r3, [ip], #4
 8008c68:	f857 3b04 	ldr.w	r3, [r7], #4
 8008c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c70:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c74:	fb09 330a 	mla	r3, r9, sl, r3
 8008c78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008c7c:	42bd      	cmp	r5, r7
 8008c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c82:	d8e5      	bhi.n	8008c50 <__multiply+0xfc>
 8008c84:	9a01      	ldr	r2, [sp, #4]
 8008c86:	50a3      	str	r3, [r4, r2]
 8008c88:	3404      	adds	r4, #4
 8008c8a:	e79f      	b.n	8008bcc <__multiply+0x78>
 8008c8c:	3e01      	subs	r6, #1
 8008c8e:	e7a1      	b.n	8008bd4 <__multiply+0x80>
 8008c90:	0800b1ed 	.word	0x0800b1ed
 8008c94:	0800b1fe 	.word	0x0800b1fe

08008c98 <__pow5mult>:
 8008c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	f012 0203 	ands.w	r2, r2, #3
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	460e      	mov	r6, r1
 8008ca6:	d007      	beq.n	8008cb8 <__pow5mult+0x20>
 8008ca8:	4c25      	ldr	r4, [pc, #148]	@ (8008d40 <__pow5mult+0xa8>)
 8008caa:	3a01      	subs	r2, #1
 8008cac:	2300      	movs	r3, #0
 8008cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cb2:	f7ff fe5d 	bl	8008970 <__multadd>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	10ad      	asrs	r5, r5, #2
 8008cba:	d03d      	beq.n	8008d38 <__pow5mult+0xa0>
 8008cbc:	69fc      	ldr	r4, [r7, #28]
 8008cbe:	b97c      	cbnz	r4, 8008ce0 <__pow5mult+0x48>
 8008cc0:	2010      	movs	r0, #16
 8008cc2:	f7fd fd73 	bl	80067ac <malloc>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	61f8      	str	r0, [r7, #28]
 8008cca:	b928      	cbnz	r0, 8008cd8 <__pow5mult+0x40>
 8008ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d44 <__pow5mult+0xac>)
 8008cce:	481e      	ldr	r0, [pc, #120]	@ (8008d48 <__pow5mult+0xb0>)
 8008cd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cd4:	f001 fd28 	bl	800a728 <__assert_func>
 8008cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cdc:	6004      	str	r4, [r0, #0]
 8008cde:	60c4      	str	r4, [r0, #12]
 8008ce0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ce8:	b94c      	cbnz	r4, 8008cfe <__pow5mult+0x66>
 8008cea:	f240 2171 	movw	r1, #625	@ 0x271
 8008cee:	4638      	mov	r0, r7
 8008cf0:	f7ff ff1a 	bl	8008b28 <__i2b>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	f04f 0900 	mov.w	r9, #0
 8008d02:	07eb      	lsls	r3, r5, #31
 8008d04:	d50a      	bpl.n	8008d1c <__pow5mult+0x84>
 8008d06:	4631      	mov	r1, r6
 8008d08:	4622      	mov	r2, r4
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f7ff ff22 	bl	8008b54 <__multiply>
 8008d10:	4631      	mov	r1, r6
 8008d12:	4680      	mov	r8, r0
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7ff fe09 	bl	800892c <_Bfree>
 8008d1a:	4646      	mov	r6, r8
 8008d1c:	106d      	asrs	r5, r5, #1
 8008d1e:	d00b      	beq.n	8008d38 <__pow5mult+0xa0>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	b938      	cbnz	r0, 8008d34 <__pow5mult+0x9c>
 8008d24:	4622      	mov	r2, r4
 8008d26:	4621      	mov	r1, r4
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff ff13 	bl	8008b54 <__multiply>
 8008d2e:	6020      	str	r0, [r4, #0]
 8008d30:	f8c0 9000 	str.w	r9, [r0]
 8008d34:	4604      	mov	r4, r0
 8008d36:	e7e4      	b.n	8008d02 <__pow5mult+0x6a>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	bf00      	nop
 8008d40:	0800b310 	.word	0x0800b310
 8008d44:	0800b17e 	.word	0x0800b17e
 8008d48:	0800b1fe 	.word	0x0800b1fe

08008d4c <__lshift>:
 8008d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	6849      	ldr	r1, [r1, #4]
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	4691      	mov	r9, r2
 8008d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d64:	f108 0601 	add.w	r6, r8, #1
 8008d68:	42b3      	cmp	r3, r6
 8008d6a:	db0b      	blt.n	8008d84 <__lshift+0x38>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff fd9d 	bl	80088ac <_Balloc>
 8008d72:	4605      	mov	r5, r0
 8008d74:	b948      	cbnz	r0, 8008d8a <__lshift+0x3e>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b28      	ldr	r3, [pc, #160]	@ (8008e1c <__lshift+0xd0>)
 8008d7a:	4829      	ldr	r0, [pc, #164]	@ (8008e20 <__lshift+0xd4>)
 8008d7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d80:	f001 fcd2 	bl	800a728 <__assert_func>
 8008d84:	3101      	adds	r1, #1
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	e7ee      	b.n	8008d68 <__lshift+0x1c>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f100 0114 	add.w	r1, r0, #20
 8008d90:	f100 0210 	add.w	r2, r0, #16
 8008d94:	4618      	mov	r0, r3
 8008d96:	4553      	cmp	r3, sl
 8008d98:	db33      	blt.n	8008e02 <__lshift+0xb6>
 8008d9a:	6920      	ldr	r0, [r4, #16]
 8008d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da0:	f104 0314 	add.w	r3, r4, #20
 8008da4:	f019 091f 	ands.w	r9, r9, #31
 8008da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008db0:	d02b      	beq.n	8008e0a <__lshift+0xbe>
 8008db2:	f1c9 0e20 	rsb	lr, r9, #32
 8008db6:	468a      	mov	sl, r1
 8008db8:	2200      	movs	r2, #0
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8008dc0:	4310      	orrs	r0, r2
 8008dc2:	f84a 0b04 	str.w	r0, [sl], #4
 8008dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dca:	459c      	cmp	ip, r3
 8008dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dd0:	d8f3      	bhi.n	8008dba <__lshift+0x6e>
 8008dd2:	ebac 0304 	sub.w	r3, ip, r4
 8008dd6:	3b15      	subs	r3, #21
 8008dd8:	f023 0303 	bic.w	r3, r3, #3
 8008ddc:	3304      	adds	r3, #4
 8008dde:	f104 0015 	add.w	r0, r4, #21
 8008de2:	4560      	cmp	r0, ip
 8008de4:	bf88      	it	hi
 8008de6:	2304      	movhi	r3, #4
 8008de8:	50ca      	str	r2, [r1, r3]
 8008dea:	b10a      	cbz	r2, 8008df0 <__lshift+0xa4>
 8008dec:	f108 0602 	add.w	r6, r8, #2
 8008df0:	3e01      	subs	r6, #1
 8008df2:	4638      	mov	r0, r7
 8008df4:	612e      	str	r6, [r5, #16]
 8008df6:	4621      	mov	r1, r4
 8008df8:	f7ff fd98 	bl	800892c <_Bfree>
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e06:	3301      	adds	r3, #1
 8008e08:	e7c5      	b.n	8008d96 <__lshift+0x4a>
 8008e0a:	3904      	subs	r1, #4
 8008e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e14:	459c      	cmp	ip, r3
 8008e16:	d8f9      	bhi.n	8008e0c <__lshift+0xc0>
 8008e18:	e7ea      	b.n	8008df0 <__lshift+0xa4>
 8008e1a:	bf00      	nop
 8008e1c:	0800b1ed 	.word	0x0800b1ed
 8008e20:	0800b1fe 	.word	0x0800b1fe

08008e24 <__mcmp>:
 8008e24:	690a      	ldr	r2, [r1, #16]
 8008e26:	4603      	mov	r3, r0
 8008e28:	6900      	ldr	r0, [r0, #16]
 8008e2a:	1a80      	subs	r0, r0, r2
 8008e2c:	b530      	push	{r4, r5, lr}
 8008e2e:	d10e      	bne.n	8008e4e <__mcmp+0x2a>
 8008e30:	3314      	adds	r3, #20
 8008e32:	3114      	adds	r1, #20
 8008e34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e44:	4295      	cmp	r5, r2
 8008e46:	d003      	beq.n	8008e50 <__mcmp+0x2c>
 8008e48:	d205      	bcs.n	8008e56 <__mcmp+0x32>
 8008e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d3f3      	bcc.n	8008e3c <__mcmp+0x18>
 8008e54:	e7fb      	b.n	8008e4e <__mcmp+0x2a>
 8008e56:	2001      	movs	r0, #1
 8008e58:	e7f9      	b.n	8008e4e <__mcmp+0x2a>
	...

08008e5c <__mdiff>:
 8008e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	4689      	mov	r9, r1
 8008e62:	4606      	mov	r6, r0
 8008e64:	4611      	mov	r1, r2
 8008e66:	4648      	mov	r0, r9
 8008e68:	4614      	mov	r4, r2
 8008e6a:	f7ff ffdb 	bl	8008e24 <__mcmp>
 8008e6e:	1e05      	subs	r5, r0, #0
 8008e70:	d112      	bne.n	8008e98 <__mdiff+0x3c>
 8008e72:	4629      	mov	r1, r5
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff fd19 	bl	80088ac <_Balloc>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	b928      	cbnz	r0, 8008e8a <__mdiff+0x2e>
 8008e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f7c <__mdiff+0x120>)
 8008e80:	f240 2137 	movw	r1, #567	@ 0x237
 8008e84:	483e      	ldr	r0, [pc, #248]	@ (8008f80 <__mdiff+0x124>)
 8008e86:	f001 fc4f 	bl	800a728 <__assert_func>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e90:	4610      	mov	r0, r2
 8008e92:	b003      	add	sp, #12
 8008e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	bfbc      	itt	lt
 8008e9a:	464b      	movlt	r3, r9
 8008e9c:	46a1      	movlt	r9, r4
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ea4:	bfba      	itte	lt
 8008ea6:	461c      	movlt	r4, r3
 8008ea8:	2501      	movlt	r5, #1
 8008eaa:	2500      	movge	r5, #0
 8008eac:	f7ff fcfe 	bl	80088ac <_Balloc>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	b918      	cbnz	r0, 8008ebc <__mdiff+0x60>
 8008eb4:	4b31      	ldr	r3, [pc, #196]	@ (8008f7c <__mdiff+0x120>)
 8008eb6:	f240 2145 	movw	r1, #581	@ 0x245
 8008eba:	e7e3      	b.n	8008e84 <__mdiff+0x28>
 8008ebc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ec0:	6926      	ldr	r6, [r4, #16]
 8008ec2:	60c5      	str	r5, [r0, #12]
 8008ec4:	f109 0310 	add.w	r3, r9, #16
 8008ec8:	f109 0514 	add.w	r5, r9, #20
 8008ecc:	f104 0e14 	add.w	lr, r4, #20
 8008ed0:	f100 0b14 	add.w	fp, r0, #20
 8008ed4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ed8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	46d9      	mov	r9, fp
 8008ee0:	f04f 0c00 	mov.w	ip, #0
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008eea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	fa1f f38a 	uxth.w	r3, sl
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	b283      	uxth	r3, r0
 8008ef8:	1acb      	subs	r3, r1, r3
 8008efa:	0c00      	lsrs	r0, r0, #16
 8008efc:	4463      	add	r3, ip
 8008efe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f0c:	4576      	cmp	r6, lr
 8008f0e:	f849 3b04 	str.w	r3, [r9], #4
 8008f12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f16:	d8e5      	bhi.n	8008ee4 <__mdiff+0x88>
 8008f18:	1b33      	subs	r3, r6, r4
 8008f1a:	3b15      	subs	r3, #21
 8008f1c:	f023 0303 	bic.w	r3, r3, #3
 8008f20:	3415      	adds	r4, #21
 8008f22:	3304      	adds	r3, #4
 8008f24:	42a6      	cmp	r6, r4
 8008f26:	bf38      	it	cc
 8008f28:	2304      	movcc	r3, #4
 8008f2a:	441d      	add	r5, r3
 8008f2c:	445b      	add	r3, fp
 8008f2e:	461e      	mov	r6, r3
 8008f30:	462c      	mov	r4, r5
 8008f32:	4544      	cmp	r4, r8
 8008f34:	d30e      	bcc.n	8008f54 <__mdiff+0xf8>
 8008f36:	f108 0103 	add.w	r1, r8, #3
 8008f3a:	1b49      	subs	r1, r1, r5
 8008f3c:	f021 0103 	bic.w	r1, r1, #3
 8008f40:	3d03      	subs	r5, #3
 8008f42:	45a8      	cmp	r8, r5
 8008f44:	bf38      	it	cc
 8008f46:	2100      	movcc	r1, #0
 8008f48:	440b      	add	r3, r1
 8008f4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f4e:	b191      	cbz	r1, 8008f76 <__mdiff+0x11a>
 8008f50:	6117      	str	r7, [r2, #16]
 8008f52:	e79d      	b.n	8008e90 <__mdiff+0x34>
 8008f54:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f58:	46e6      	mov	lr, ip
 8008f5a:	0c08      	lsrs	r0, r1, #16
 8008f5c:	fa1c fc81 	uxtah	ip, ip, r1
 8008f60:	4471      	add	r1, lr
 8008f62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f66:	b289      	uxth	r1, r1
 8008f68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f6c:	f846 1b04 	str.w	r1, [r6], #4
 8008f70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f74:	e7dd      	b.n	8008f32 <__mdiff+0xd6>
 8008f76:	3f01      	subs	r7, #1
 8008f78:	e7e7      	b.n	8008f4a <__mdiff+0xee>
 8008f7a:	bf00      	nop
 8008f7c:	0800b1ed 	.word	0x0800b1ed
 8008f80:	0800b1fe 	.word	0x0800b1fe

08008f84 <__ulp>:
 8008f84:	b082      	sub	sp, #8
 8008f86:	ed8d 0b00 	vstr	d0, [sp]
 8008f8a:	9a01      	ldr	r2, [sp, #4]
 8008f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008fcc <__ulp+0x48>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc08      	bgt.n	8008faa <__ulp+0x26>
 8008f98:	425b      	negs	r3, r3
 8008f9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fa2:	da04      	bge.n	8008fae <__ulp+0x2a>
 8008fa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008fa8:	4113      	asrs	r3, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	e008      	b.n	8008fc0 <__ulp+0x3c>
 8008fae:	f1a2 0314 	sub.w	r3, r2, #20
 8008fb2:	2b1e      	cmp	r3, #30
 8008fb4:	bfda      	itte	le
 8008fb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008fba:	40da      	lsrle	r2, r3
 8008fbc:	2201      	movgt	r2, #1
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	ec41 0b10 	vmov	d0, r0, r1
 8008fc8:	b002      	add	sp, #8
 8008fca:	4770      	bx	lr
 8008fcc:	7ff00000 	.word	0x7ff00000

08008fd0 <__b2d>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	6906      	ldr	r6, [r0, #16]
 8008fd6:	f100 0814 	add.w	r8, r0, #20
 8008fda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008fde:	1f37      	subs	r7, r6, #4
 8008fe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f7ff fd53 	bl	8008a90 <__hi0bits>
 8008fea:	f1c0 0320 	rsb	r3, r0, #32
 8008fee:	280a      	cmp	r0, #10
 8008ff0:	600b      	str	r3, [r1, #0]
 8008ff2:	491b      	ldr	r1, [pc, #108]	@ (8009060 <__b2d+0x90>)
 8008ff4:	dc15      	bgt.n	8009022 <__b2d+0x52>
 8008ff6:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ffa:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ffe:	45b8      	cmp	r8, r7
 8009000:	ea43 0501 	orr.w	r5, r3, r1
 8009004:	bf34      	ite	cc
 8009006:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800900a:	2300      	movcs	r3, #0
 800900c:	3015      	adds	r0, #21
 800900e:	fa02 f000 	lsl.w	r0, r2, r0
 8009012:	fa23 f30c 	lsr.w	r3, r3, ip
 8009016:	4303      	orrs	r3, r0
 8009018:	461c      	mov	r4, r3
 800901a:	ec45 4b10 	vmov	d0, r4, r5
 800901e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009022:	45b8      	cmp	r8, r7
 8009024:	bf3a      	itte	cc
 8009026:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800902a:	f1a6 0708 	subcc.w	r7, r6, #8
 800902e:	2300      	movcs	r3, #0
 8009030:	380b      	subs	r0, #11
 8009032:	d012      	beq.n	800905a <__b2d+0x8a>
 8009034:	f1c0 0120 	rsb	r1, r0, #32
 8009038:	fa23 f401 	lsr.w	r4, r3, r1
 800903c:	4082      	lsls	r2, r0
 800903e:	4322      	orrs	r2, r4
 8009040:	4547      	cmp	r7, r8
 8009042:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009046:	bf8c      	ite	hi
 8009048:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800904c:	2200      	movls	r2, #0
 800904e:	4083      	lsls	r3, r0
 8009050:	40ca      	lsrs	r2, r1
 8009052:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009056:	4313      	orrs	r3, r2
 8009058:	e7de      	b.n	8009018 <__b2d+0x48>
 800905a:	ea42 0501 	orr.w	r5, r2, r1
 800905e:	e7db      	b.n	8009018 <__b2d+0x48>
 8009060:	3ff00000 	.word	0x3ff00000

08009064 <__d2b>:
 8009064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009068:	460f      	mov	r7, r1
 800906a:	2101      	movs	r1, #1
 800906c:	ec59 8b10 	vmov	r8, r9, d0
 8009070:	4616      	mov	r6, r2
 8009072:	f7ff fc1b 	bl	80088ac <_Balloc>
 8009076:	4604      	mov	r4, r0
 8009078:	b930      	cbnz	r0, 8009088 <__d2b+0x24>
 800907a:	4602      	mov	r2, r0
 800907c:	4b23      	ldr	r3, [pc, #140]	@ (800910c <__d2b+0xa8>)
 800907e:	4824      	ldr	r0, [pc, #144]	@ (8009110 <__d2b+0xac>)
 8009080:	f240 310f 	movw	r1, #783	@ 0x30f
 8009084:	f001 fb50 	bl	800a728 <__assert_func>
 8009088:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800908c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009090:	b10d      	cbz	r5, 8009096 <__d2b+0x32>
 8009092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	f1b8 0300 	subs.w	r3, r8, #0
 800909c:	d023      	beq.n	80090e6 <__d2b+0x82>
 800909e:	4668      	mov	r0, sp
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	f7ff fd14 	bl	8008ace <__lo0bits>
 80090a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090aa:	b1d0      	cbz	r0, 80090e2 <__d2b+0x7e>
 80090ac:	f1c0 0320 	rsb	r3, r0, #32
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	430b      	orrs	r3, r1
 80090b6:	40c2      	lsrs	r2, r0
 80090b8:	6163      	str	r3, [r4, #20]
 80090ba:	9201      	str	r2, [sp, #4]
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	61a3      	str	r3, [r4, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bf0c      	ite	eq
 80090c4:	2201      	moveq	r2, #1
 80090c6:	2202      	movne	r2, #2
 80090c8:	6122      	str	r2, [r4, #16]
 80090ca:	b1a5      	cbz	r5, 80090f6 <__d2b+0x92>
 80090cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090d0:	4405      	add	r5, r0
 80090d2:	603d      	str	r5, [r7, #0]
 80090d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090d8:	6030      	str	r0, [r6, #0]
 80090da:	4620      	mov	r0, r4
 80090dc:	b003      	add	sp, #12
 80090de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090e2:	6161      	str	r1, [r4, #20]
 80090e4:	e7ea      	b.n	80090bc <__d2b+0x58>
 80090e6:	a801      	add	r0, sp, #4
 80090e8:	f7ff fcf1 	bl	8008ace <__lo0bits>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	6163      	str	r3, [r4, #20]
 80090f0:	3020      	adds	r0, #32
 80090f2:	2201      	movs	r2, #1
 80090f4:	e7e8      	b.n	80090c8 <__d2b+0x64>
 80090f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090fe:	6038      	str	r0, [r7, #0]
 8009100:	6918      	ldr	r0, [r3, #16]
 8009102:	f7ff fcc5 	bl	8008a90 <__hi0bits>
 8009106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800910a:	e7e5      	b.n	80090d8 <__d2b+0x74>
 800910c:	0800b1ed 	.word	0x0800b1ed
 8009110:	0800b1fe 	.word	0x0800b1fe

08009114 <__ratio>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	b085      	sub	sp, #20
 800911a:	e9cd 1000 	strd	r1, r0, [sp]
 800911e:	a902      	add	r1, sp, #8
 8009120:	f7ff ff56 	bl	8008fd0 <__b2d>
 8009124:	9800      	ldr	r0, [sp, #0]
 8009126:	a903      	add	r1, sp, #12
 8009128:	ec55 4b10 	vmov	r4, r5, d0
 800912c:	f7ff ff50 	bl	8008fd0 <__b2d>
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	6919      	ldr	r1, [r3, #16]
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	1ac9      	subs	r1, r1, r3
 800913a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	ec5b ab10 	vmov	sl, fp, d0
 8009144:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfce      	itee	gt
 800914c:	462a      	movgt	r2, r5
 800914e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009152:	465a      	movle	r2, fp
 8009154:	462f      	mov	r7, r5
 8009156:	46d9      	mov	r9, fp
 8009158:	bfcc      	ite	gt
 800915a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800915e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009162:	464b      	mov	r3, r9
 8009164:	4652      	mov	r2, sl
 8009166:	4620      	mov	r0, r4
 8009168:	4639      	mov	r1, r7
 800916a:	f7f7 fb8f 	bl	800088c <__aeabi_ddiv>
 800916e:	ec41 0b10 	vmov	d0, r0, r1
 8009172:	b005      	add	sp, #20
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009178 <__copybits>:
 8009178:	3901      	subs	r1, #1
 800917a:	b570      	push	{r4, r5, r6, lr}
 800917c:	1149      	asrs	r1, r1, #5
 800917e:	6914      	ldr	r4, [r2, #16]
 8009180:	3101      	adds	r1, #1
 8009182:	f102 0314 	add.w	r3, r2, #20
 8009186:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800918a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800918e:	1f05      	subs	r5, r0, #4
 8009190:	42a3      	cmp	r3, r4
 8009192:	d30c      	bcc.n	80091ae <__copybits+0x36>
 8009194:	1aa3      	subs	r3, r4, r2
 8009196:	3b11      	subs	r3, #17
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	3211      	adds	r2, #17
 800919e:	42a2      	cmp	r2, r4
 80091a0:	bf88      	it	hi
 80091a2:	2300      	movhi	r3, #0
 80091a4:	4418      	add	r0, r3
 80091a6:	2300      	movs	r3, #0
 80091a8:	4288      	cmp	r0, r1
 80091aa:	d305      	bcc.n	80091b8 <__copybits+0x40>
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80091b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80091b6:	e7eb      	b.n	8009190 <__copybits+0x18>
 80091b8:	f840 3b04 	str.w	r3, [r0], #4
 80091bc:	e7f4      	b.n	80091a8 <__copybits+0x30>

080091be <__any_on>:
 80091be:	f100 0214 	add.w	r2, r0, #20
 80091c2:	6900      	ldr	r0, [r0, #16]
 80091c4:	114b      	asrs	r3, r1, #5
 80091c6:	4298      	cmp	r0, r3
 80091c8:	b510      	push	{r4, lr}
 80091ca:	db11      	blt.n	80091f0 <__any_on+0x32>
 80091cc:	dd0a      	ble.n	80091e4 <__any_on+0x26>
 80091ce:	f011 011f 	ands.w	r1, r1, #31
 80091d2:	d007      	beq.n	80091e4 <__any_on+0x26>
 80091d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091d8:	fa24 f001 	lsr.w	r0, r4, r1
 80091dc:	fa00 f101 	lsl.w	r1, r0, r1
 80091e0:	428c      	cmp	r4, r1
 80091e2:	d10b      	bne.n	80091fc <__any_on+0x3e>
 80091e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d803      	bhi.n	80091f4 <__any_on+0x36>
 80091ec:	2000      	movs	r0, #0
 80091ee:	bd10      	pop	{r4, pc}
 80091f0:	4603      	mov	r3, r0
 80091f2:	e7f7      	b.n	80091e4 <__any_on+0x26>
 80091f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091f8:	2900      	cmp	r1, #0
 80091fa:	d0f5      	beq.n	80091e8 <__any_on+0x2a>
 80091fc:	2001      	movs	r0, #1
 80091fe:	e7f6      	b.n	80091ee <__any_on+0x30>

08009200 <sulp>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	4604      	mov	r4, r0
 8009204:	460d      	mov	r5, r1
 8009206:	ec45 4b10 	vmov	d0, r4, r5
 800920a:	4616      	mov	r6, r2
 800920c:	f7ff feba 	bl	8008f84 <__ulp>
 8009210:	ec51 0b10 	vmov	r0, r1, d0
 8009214:	b17e      	cbz	r6, 8009236 <sulp+0x36>
 8009216:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800921a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800921e:	2b00      	cmp	r3, #0
 8009220:	dd09      	ble.n	8009236 <sulp+0x36>
 8009222:	051b      	lsls	r3, r3, #20
 8009224:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009228:	2400      	movs	r4, #0
 800922a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800922e:	4622      	mov	r2, r4
 8009230:	462b      	mov	r3, r5
 8009232:	f7f7 fa01 	bl	8000638 <__aeabi_dmul>
 8009236:	ec41 0b10 	vmov	d0, r0, r1
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	0000      	movs	r0, r0
	...

08009240 <_strtod_l>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b09f      	sub	sp, #124	@ 0x7c
 8009246:	460c      	mov	r4, r1
 8009248:	9217      	str	r2, [sp, #92]	@ 0x5c
 800924a:	2200      	movs	r2, #0
 800924c:	921a      	str	r2, [sp, #104]	@ 0x68
 800924e:	9005      	str	r0, [sp, #20]
 8009250:	f04f 0a00 	mov.w	sl, #0
 8009254:	f04f 0b00 	mov.w	fp, #0
 8009258:	460a      	mov	r2, r1
 800925a:	9219      	str	r2, [sp, #100]	@ 0x64
 800925c:	7811      	ldrb	r1, [r2, #0]
 800925e:	292b      	cmp	r1, #43	@ 0x2b
 8009260:	d04a      	beq.n	80092f8 <_strtod_l+0xb8>
 8009262:	d838      	bhi.n	80092d6 <_strtod_l+0x96>
 8009264:	290d      	cmp	r1, #13
 8009266:	d832      	bhi.n	80092ce <_strtod_l+0x8e>
 8009268:	2908      	cmp	r1, #8
 800926a:	d832      	bhi.n	80092d2 <_strtod_l+0x92>
 800926c:	2900      	cmp	r1, #0
 800926e:	d03b      	beq.n	80092e8 <_strtod_l+0xa8>
 8009270:	2200      	movs	r2, #0
 8009272:	920e      	str	r2, [sp, #56]	@ 0x38
 8009274:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009276:	782a      	ldrb	r2, [r5, #0]
 8009278:	2a30      	cmp	r2, #48	@ 0x30
 800927a:	f040 80b2 	bne.w	80093e2 <_strtod_l+0x1a2>
 800927e:	786a      	ldrb	r2, [r5, #1]
 8009280:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009284:	2a58      	cmp	r2, #88	@ 0x58
 8009286:	d16e      	bne.n	8009366 <_strtod_l+0x126>
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	4a8f      	ldr	r2, [pc, #572]	@ (80094d0 <_strtod_l+0x290>)
 8009294:	9805      	ldr	r0, [sp, #20]
 8009296:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009298:	a919      	add	r1, sp, #100	@ 0x64
 800929a:	f001 fadf 	bl	800a85c <__gethex>
 800929e:	f010 060f 	ands.w	r6, r0, #15
 80092a2:	4604      	mov	r4, r0
 80092a4:	d005      	beq.n	80092b2 <_strtod_l+0x72>
 80092a6:	2e06      	cmp	r6, #6
 80092a8:	d128      	bne.n	80092fc <_strtod_l+0xbc>
 80092aa:	3501      	adds	r5, #1
 80092ac:	2300      	movs	r3, #0
 80092ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80092b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80092b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 858e 	bne.w	8009dd6 <_strtod_l+0xb96>
 80092ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092bc:	b1cb      	cbz	r3, 80092f2 <_strtod_l+0xb2>
 80092be:	4652      	mov	r2, sl
 80092c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80092c4:	ec43 2b10 	vmov	d0, r2, r3
 80092c8:	b01f      	add	sp, #124	@ 0x7c
 80092ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ce:	2920      	cmp	r1, #32
 80092d0:	d1ce      	bne.n	8009270 <_strtod_l+0x30>
 80092d2:	3201      	adds	r2, #1
 80092d4:	e7c1      	b.n	800925a <_strtod_l+0x1a>
 80092d6:	292d      	cmp	r1, #45	@ 0x2d
 80092d8:	d1ca      	bne.n	8009270 <_strtod_l+0x30>
 80092da:	2101      	movs	r1, #1
 80092dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80092de:	1c51      	adds	r1, r2, #1
 80092e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80092e2:	7852      	ldrb	r2, [r2, #1]
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	d1c5      	bne.n	8009274 <_strtod_l+0x34>
 80092e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f040 8570 	bne.w	8009dd2 <_strtod_l+0xb92>
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	e7e5      	b.n	80092c4 <_strtod_l+0x84>
 80092f8:	2100      	movs	r1, #0
 80092fa:	e7ef      	b.n	80092dc <_strtod_l+0x9c>
 80092fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092fe:	b13a      	cbz	r2, 8009310 <_strtod_l+0xd0>
 8009300:	2135      	movs	r1, #53	@ 0x35
 8009302:	a81c      	add	r0, sp, #112	@ 0x70
 8009304:	f7ff ff38 	bl	8009178 <__copybits>
 8009308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800930a:	9805      	ldr	r0, [sp, #20]
 800930c:	f7ff fb0e 	bl	800892c <_Bfree>
 8009310:	3e01      	subs	r6, #1
 8009312:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009314:	2e04      	cmp	r6, #4
 8009316:	d806      	bhi.n	8009326 <_strtod_l+0xe6>
 8009318:	e8df f006 	tbb	[pc, r6]
 800931c:	201d0314 	.word	0x201d0314
 8009320:	14          	.byte	0x14
 8009321:	00          	.byte	0x00
 8009322:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009326:	05e1      	lsls	r1, r4, #23
 8009328:	bf48      	it	mi
 800932a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800932e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009332:	0d1b      	lsrs	r3, r3, #20
 8009334:	051b      	lsls	r3, r3, #20
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1bb      	bne.n	80092b2 <_strtod_l+0x72>
 800933a:	f7fe fbdf 	bl	8007afc <__errno>
 800933e:	2322      	movs	r3, #34	@ 0x22
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	e7b6      	b.n	80092b2 <_strtod_l+0x72>
 8009344:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009348:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800934c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009350:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009354:	e7e7      	b.n	8009326 <_strtod_l+0xe6>
 8009356:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80094d8 <_strtod_l+0x298>
 800935a:	e7e4      	b.n	8009326 <_strtod_l+0xe6>
 800935c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009360:	f04f 3aff 	mov.w	sl, #4294967295
 8009364:	e7df      	b.n	8009326 <_strtod_l+0xe6>
 8009366:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	9219      	str	r2, [sp, #100]	@ 0x64
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b30      	cmp	r3, #48	@ 0x30
 8009370:	d0f9      	beq.n	8009366 <_strtod_l+0x126>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d09d      	beq.n	80092b2 <_strtod_l+0x72>
 8009376:	2301      	movs	r3, #1
 8009378:	2700      	movs	r7, #0
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800937e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009380:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009382:	46b9      	mov	r9, r7
 8009384:	220a      	movs	r2, #10
 8009386:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009388:	7805      	ldrb	r5, [r0, #0]
 800938a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800938e:	b2d9      	uxtb	r1, r3
 8009390:	2909      	cmp	r1, #9
 8009392:	d928      	bls.n	80093e6 <_strtod_l+0x1a6>
 8009394:	494f      	ldr	r1, [pc, #316]	@ (80094d4 <_strtod_l+0x294>)
 8009396:	2201      	movs	r2, #1
 8009398:	f001 f97a 	bl	800a690 <strncmp>
 800939c:	2800      	cmp	r0, #0
 800939e:	d032      	beq.n	8009406 <_strtod_l+0x1c6>
 80093a0:	2000      	movs	r0, #0
 80093a2:	462a      	mov	r2, r5
 80093a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80093a6:	464d      	mov	r5, r9
 80093a8:	4603      	mov	r3, r0
 80093aa:	2a65      	cmp	r2, #101	@ 0x65
 80093ac:	d001      	beq.n	80093b2 <_strtod_l+0x172>
 80093ae:	2a45      	cmp	r2, #69	@ 0x45
 80093b0:	d114      	bne.n	80093dc <_strtod_l+0x19c>
 80093b2:	b91d      	cbnz	r5, 80093bc <_strtod_l+0x17c>
 80093b4:	9a08      	ldr	r2, [sp, #32]
 80093b6:	4302      	orrs	r2, r0
 80093b8:	d096      	beq.n	80092e8 <_strtod_l+0xa8>
 80093ba:	2500      	movs	r5, #0
 80093bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80093be:	1c62      	adds	r2, r4, #1
 80093c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80093c2:	7862      	ldrb	r2, [r4, #1]
 80093c4:	2a2b      	cmp	r2, #43	@ 0x2b
 80093c6:	d07a      	beq.n	80094be <_strtod_l+0x27e>
 80093c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80093ca:	d07e      	beq.n	80094ca <_strtod_l+0x28a>
 80093cc:	f04f 0c00 	mov.w	ip, #0
 80093d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80093d4:	2909      	cmp	r1, #9
 80093d6:	f240 8085 	bls.w	80094e4 <_strtod_l+0x2a4>
 80093da:	9419      	str	r4, [sp, #100]	@ 0x64
 80093dc:	f04f 0800 	mov.w	r8, #0
 80093e0:	e0a5      	b.n	800952e <_strtod_l+0x2ee>
 80093e2:	2300      	movs	r3, #0
 80093e4:	e7c8      	b.n	8009378 <_strtod_l+0x138>
 80093e6:	f1b9 0f08 	cmp.w	r9, #8
 80093ea:	bfd8      	it	le
 80093ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80093ee:	f100 0001 	add.w	r0, r0, #1
 80093f2:	bfda      	itte	le
 80093f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80093fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80093fe:	f109 0901 	add.w	r9, r9, #1
 8009402:	9019      	str	r0, [sp, #100]	@ 0x64
 8009404:	e7bf      	b.n	8009386 <_strtod_l+0x146>
 8009406:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	9219      	str	r2, [sp, #100]	@ 0x64
 800940c:	785a      	ldrb	r2, [r3, #1]
 800940e:	f1b9 0f00 	cmp.w	r9, #0
 8009412:	d03b      	beq.n	800948c <_strtod_l+0x24c>
 8009414:	900a      	str	r0, [sp, #40]	@ 0x28
 8009416:	464d      	mov	r5, r9
 8009418:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800941c:	2b09      	cmp	r3, #9
 800941e:	d912      	bls.n	8009446 <_strtod_l+0x206>
 8009420:	2301      	movs	r3, #1
 8009422:	e7c2      	b.n	80093aa <_strtod_l+0x16a>
 8009424:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	9219      	str	r2, [sp, #100]	@ 0x64
 800942a:	785a      	ldrb	r2, [r3, #1]
 800942c:	3001      	adds	r0, #1
 800942e:	2a30      	cmp	r2, #48	@ 0x30
 8009430:	d0f8      	beq.n	8009424 <_strtod_l+0x1e4>
 8009432:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009436:	2b08      	cmp	r3, #8
 8009438:	f200 84d2 	bhi.w	8009de0 <_strtod_l+0xba0>
 800943c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800943e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009440:	2000      	movs	r0, #0
 8009442:	930c      	str	r3, [sp, #48]	@ 0x30
 8009444:	4605      	mov	r5, r0
 8009446:	3a30      	subs	r2, #48	@ 0x30
 8009448:	f100 0301 	add.w	r3, r0, #1
 800944c:	d018      	beq.n	8009480 <_strtod_l+0x240>
 800944e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009450:	4419      	add	r1, r3
 8009452:	910a      	str	r1, [sp, #40]	@ 0x28
 8009454:	462e      	mov	r6, r5
 8009456:	f04f 0e0a 	mov.w	lr, #10
 800945a:	1c71      	adds	r1, r6, #1
 800945c:	eba1 0c05 	sub.w	ip, r1, r5
 8009460:	4563      	cmp	r3, ip
 8009462:	dc15      	bgt.n	8009490 <_strtod_l+0x250>
 8009464:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009468:	182b      	adds	r3, r5, r0
 800946a:	2b08      	cmp	r3, #8
 800946c:	f105 0501 	add.w	r5, r5, #1
 8009470:	4405      	add	r5, r0
 8009472:	dc1a      	bgt.n	80094aa <_strtod_l+0x26a>
 8009474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009476:	230a      	movs	r3, #10
 8009478:	fb03 2301 	mla	r3, r3, r1, r2
 800947c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800947e:	2300      	movs	r3, #0
 8009480:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009482:	1c51      	adds	r1, r2, #1
 8009484:	9119      	str	r1, [sp, #100]	@ 0x64
 8009486:	7852      	ldrb	r2, [r2, #1]
 8009488:	4618      	mov	r0, r3
 800948a:	e7c5      	b.n	8009418 <_strtod_l+0x1d8>
 800948c:	4648      	mov	r0, r9
 800948e:	e7ce      	b.n	800942e <_strtod_l+0x1ee>
 8009490:	2e08      	cmp	r6, #8
 8009492:	dc05      	bgt.n	80094a0 <_strtod_l+0x260>
 8009494:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009496:	fb0e f606 	mul.w	r6, lr, r6
 800949a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800949c:	460e      	mov	r6, r1
 800949e:	e7dc      	b.n	800945a <_strtod_l+0x21a>
 80094a0:	2910      	cmp	r1, #16
 80094a2:	bfd8      	it	le
 80094a4:	fb0e f707 	mulle.w	r7, lr, r7
 80094a8:	e7f8      	b.n	800949c <_strtod_l+0x25c>
 80094aa:	2b0f      	cmp	r3, #15
 80094ac:	bfdc      	itt	le
 80094ae:	230a      	movle	r3, #10
 80094b0:	fb03 2707 	mlale	r7, r3, r7, r2
 80094b4:	e7e3      	b.n	800947e <_strtod_l+0x23e>
 80094b6:	2300      	movs	r3, #0
 80094b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094ba:	2301      	movs	r3, #1
 80094bc:	e77a      	b.n	80093b4 <_strtod_l+0x174>
 80094be:	f04f 0c00 	mov.w	ip, #0
 80094c2:	1ca2      	adds	r2, r4, #2
 80094c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80094c6:	78a2      	ldrb	r2, [r4, #2]
 80094c8:	e782      	b.n	80093d0 <_strtod_l+0x190>
 80094ca:	f04f 0c01 	mov.w	ip, #1
 80094ce:	e7f8      	b.n	80094c2 <_strtod_l+0x282>
 80094d0:	0800b424 	.word	0x0800b424
 80094d4:	0800b257 	.word	0x0800b257
 80094d8:	7ff00000 	.word	0x7ff00000
 80094dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094de:	1c51      	adds	r1, r2, #1
 80094e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80094e2:	7852      	ldrb	r2, [r2, #1]
 80094e4:	2a30      	cmp	r2, #48	@ 0x30
 80094e6:	d0f9      	beq.n	80094dc <_strtod_l+0x29c>
 80094e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80094ec:	2908      	cmp	r1, #8
 80094ee:	f63f af75 	bhi.w	80093dc <_strtod_l+0x19c>
 80094f2:	3a30      	subs	r2, #48	@ 0x30
 80094f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094fa:	f04f 080a 	mov.w	r8, #10
 80094fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009500:	1c56      	adds	r6, r2, #1
 8009502:	9619      	str	r6, [sp, #100]	@ 0x64
 8009504:	7852      	ldrb	r2, [r2, #1]
 8009506:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800950a:	f1be 0f09 	cmp.w	lr, #9
 800950e:	d939      	bls.n	8009584 <_strtod_l+0x344>
 8009510:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009512:	1a76      	subs	r6, r6, r1
 8009514:	2e08      	cmp	r6, #8
 8009516:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800951a:	dc03      	bgt.n	8009524 <_strtod_l+0x2e4>
 800951c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800951e:	4588      	cmp	r8, r1
 8009520:	bfa8      	it	ge
 8009522:	4688      	movge	r8, r1
 8009524:	f1bc 0f00 	cmp.w	ip, #0
 8009528:	d001      	beq.n	800952e <_strtod_l+0x2ee>
 800952a:	f1c8 0800 	rsb	r8, r8, #0
 800952e:	2d00      	cmp	r5, #0
 8009530:	d14e      	bne.n	80095d0 <_strtod_l+0x390>
 8009532:	9908      	ldr	r1, [sp, #32]
 8009534:	4308      	orrs	r0, r1
 8009536:	f47f aebc 	bne.w	80092b2 <_strtod_l+0x72>
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f aed4 	bne.w	80092e8 <_strtod_l+0xa8>
 8009540:	2a69      	cmp	r2, #105	@ 0x69
 8009542:	d028      	beq.n	8009596 <_strtod_l+0x356>
 8009544:	dc25      	bgt.n	8009592 <_strtod_l+0x352>
 8009546:	2a49      	cmp	r2, #73	@ 0x49
 8009548:	d025      	beq.n	8009596 <_strtod_l+0x356>
 800954a:	2a4e      	cmp	r2, #78	@ 0x4e
 800954c:	f47f aecc 	bne.w	80092e8 <_strtod_l+0xa8>
 8009550:	499a      	ldr	r1, [pc, #616]	@ (80097bc <_strtod_l+0x57c>)
 8009552:	a819      	add	r0, sp, #100	@ 0x64
 8009554:	f001 fba4 	bl	800aca0 <__match>
 8009558:	2800      	cmp	r0, #0
 800955a:	f43f aec5 	beq.w	80092e8 <_strtod_l+0xa8>
 800955e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b28      	cmp	r3, #40	@ 0x28
 8009564:	d12e      	bne.n	80095c4 <_strtod_l+0x384>
 8009566:	4996      	ldr	r1, [pc, #600]	@ (80097c0 <_strtod_l+0x580>)
 8009568:	aa1c      	add	r2, sp, #112	@ 0x70
 800956a:	a819      	add	r0, sp, #100	@ 0x64
 800956c:	f001 fbac 	bl	800acc8 <__hexnan>
 8009570:	2805      	cmp	r0, #5
 8009572:	d127      	bne.n	80095c4 <_strtod_l+0x384>
 8009574:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009576:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800957a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800957e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009582:	e696      	b.n	80092b2 <_strtod_l+0x72>
 8009584:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009586:	fb08 2101 	mla	r1, r8, r1, r2
 800958a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800958e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009590:	e7b5      	b.n	80094fe <_strtod_l+0x2be>
 8009592:	2a6e      	cmp	r2, #110	@ 0x6e
 8009594:	e7da      	b.n	800954c <_strtod_l+0x30c>
 8009596:	498b      	ldr	r1, [pc, #556]	@ (80097c4 <_strtod_l+0x584>)
 8009598:	a819      	add	r0, sp, #100	@ 0x64
 800959a:	f001 fb81 	bl	800aca0 <__match>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f aea2 	beq.w	80092e8 <_strtod_l+0xa8>
 80095a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095a6:	4988      	ldr	r1, [pc, #544]	@ (80097c8 <_strtod_l+0x588>)
 80095a8:	3b01      	subs	r3, #1
 80095aa:	a819      	add	r0, sp, #100	@ 0x64
 80095ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80095ae:	f001 fb77 	bl	800aca0 <__match>
 80095b2:	b910      	cbnz	r0, 80095ba <_strtod_l+0x37a>
 80095b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b6:	3301      	adds	r3, #1
 80095b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80095ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80097d8 <_strtod_l+0x598>
 80095be:	f04f 0a00 	mov.w	sl, #0
 80095c2:	e676      	b.n	80092b2 <_strtod_l+0x72>
 80095c4:	4881      	ldr	r0, [pc, #516]	@ (80097cc <_strtod_l+0x58c>)
 80095c6:	f001 f8a7 	bl	800a718 <nan>
 80095ca:	ec5b ab10 	vmov	sl, fp, d0
 80095ce:	e670      	b.n	80092b2 <_strtod_l+0x72>
 80095d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80095d4:	eba8 0303 	sub.w	r3, r8, r3
 80095d8:	f1b9 0f00 	cmp.w	r9, #0
 80095dc:	bf08      	it	eq
 80095de:	46a9      	moveq	r9, r5
 80095e0:	2d10      	cmp	r5, #16
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	462c      	mov	r4, r5
 80095e6:	bfa8      	it	ge
 80095e8:	2410      	movge	r4, #16
 80095ea:	f7f6 ffab 	bl	8000544 <__aeabi_ui2d>
 80095ee:	2d09      	cmp	r5, #9
 80095f0:	4682      	mov	sl, r0
 80095f2:	468b      	mov	fp, r1
 80095f4:	dc13      	bgt.n	800961e <_strtod_l+0x3de>
 80095f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f43f ae5a 	beq.w	80092b2 <_strtod_l+0x72>
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	dd78      	ble.n	80096f4 <_strtod_l+0x4b4>
 8009602:	2b16      	cmp	r3, #22
 8009604:	dc5f      	bgt.n	80096c6 <_strtod_l+0x486>
 8009606:	4972      	ldr	r1, [pc, #456]	@ (80097d0 <_strtod_l+0x590>)
 8009608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800960c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009610:	4652      	mov	r2, sl
 8009612:	465b      	mov	r3, fp
 8009614:	f7f7 f810 	bl	8000638 <__aeabi_dmul>
 8009618:	4682      	mov	sl, r0
 800961a:	468b      	mov	fp, r1
 800961c:	e649      	b.n	80092b2 <_strtod_l+0x72>
 800961e:	4b6c      	ldr	r3, [pc, #432]	@ (80097d0 <_strtod_l+0x590>)
 8009620:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009624:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009628:	f7f7 f806 	bl	8000638 <__aeabi_dmul>
 800962c:	4682      	mov	sl, r0
 800962e:	4638      	mov	r0, r7
 8009630:	468b      	mov	fp, r1
 8009632:	f7f6 ff87 	bl	8000544 <__aeabi_ui2d>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f6 fe45 	bl	80002cc <__adddf3>
 8009642:	2d0f      	cmp	r5, #15
 8009644:	4682      	mov	sl, r0
 8009646:	468b      	mov	fp, r1
 8009648:	ddd5      	ble.n	80095f6 <_strtod_l+0x3b6>
 800964a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964c:	1b2c      	subs	r4, r5, r4
 800964e:	441c      	add	r4, r3
 8009650:	2c00      	cmp	r4, #0
 8009652:	f340 8093 	ble.w	800977c <_strtod_l+0x53c>
 8009656:	f014 030f 	ands.w	r3, r4, #15
 800965a:	d00a      	beq.n	8009672 <_strtod_l+0x432>
 800965c:	495c      	ldr	r1, [pc, #368]	@ (80097d0 <_strtod_l+0x590>)
 800965e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009662:	4652      	mov	r2, sl
 8009664:	465b      	mov	r3, fp
 8009666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966a:	f7f6 ffe5 	bl	8000638 <__aeabi_dmul>
 800966e:	4682      	mov	sl, r0
 8009670:	468b      	mov	fp, r1
 8009672:	f034 040f 	bics.w	r4, r4, #15
 8009676:	d073      	beq.n	8009760 <_strtod_l+0x520>
 8009678:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800967c:	dd49      	ble.n	8009712 <_strtod_l+0x4d2>
 800967e:	2400      	movs	r4, #0
 8009680:	46a0      	mov	r8, r4
 8009682:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009684:	46a1      	mov	r9, r4
 8009686:	9a05      	ldr	r2, [sp, #20]
 8009688:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80097d8 <_strtod_l+0x598>
 800968c:	2322      	movs	r3, #34	@ 0x22
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	f04f 0a00 	mov.w	sl, #0
 8009694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009696:	2b00      	cmp	r3, #0
 8009698:	f43f ae0b 	beq.w	80092b2 <_strtod_l+0x72>
 800969c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800969e:	9805      	ldr	r0, [sp, #20]
 80096a0:	f7ff f944 	bl	800892c <_Bfree>
 80096a4:	9805      	ldr	r0, [sp, #20]
 80096a6:	4649      	mov	r1, r9
 80096a8:	f7ff f940 	bl	800892c <_Bfree>
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	4641      	mov	r1, r8
 80096b0:	f7ff f93c 	bl	800892c <_Bfree>
 80096b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096b6:	9805      	ldr	r0, [sp, #20]
 80096b8:	f7ff f938 	bl	800892c <_Bfree>
 80096bc:	9805      	ldr	r0, [sp, #20]
 80096be:	4621      	mov	r1, r4
 80096c0:	f7ff f934 	bl	800892c <_Bfree>
 80096c4:	e5f5      	b.n	80092b2 <_strtod_l+0x72>
 80096c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80096cc:	4293      	cmp	r3, r2
 80096ce:	dbbc      	blt.n	800964a <_strtod_l+0x40a>
 80096d0:	4c3f      	ldr	r4, [pc, #252]	@ (80097d0 <_strtod_l+0x590>)
 80096d2:	f1c5 050f 	rsb	r5, r5, #15
 80096d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096da:	4652      	mov	r2, sl
 80096dc:	465b      	mov	r3, fp
 80096de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e2:	f7f6 ffa9 	bl	8000638 <__aeabi_dmul>
 80096e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e8:	1b5d      	subs	r5, r3, r5
 80096ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096f2:	e78f      	b.n	8009614 <_strtod_l+0x3d4>
 80096f4:	3316      	adds	r3, #22
 80096f6:	dba8      	blt.n	800964a <_strtod_l+0x40a>
 80096f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fa:	eba3 0808 	sub.w	r8, r3, r8
 80096fe:	4b34      	ldr	r3, [pc, #208]	@ (80097d0 <_strtod_l+0x590>)
 8009700:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009704:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009708:	4650      	mov	r0, sl
 800970a:	4659      	mov	r1, fp
 800970c:	f7f7 f8be 	bl	800088c <__aeabi_ddiv>
 8009710:	e782      	b.n	8009618 <_strtod_l+0x3d8>
 8009712:	2300      	movs	r3, #0
 8009714:	4f2f      	ldr	r7, [pc, #188]	@ (80097d4 <_strtod_l+0x594>)
 8009716:	1124      	asrs	r4, r4, #4
 8009718:	4650      	mov	r0, sl
 800971a:	4659      	mov	r1, fp
 800971c:	461e      	mov	r6, r3
 800971e:	2c01      	cmp	r4, #1
 8009720:	dc21      	bgt.n	8009766 <_strtod_l+0x526>
 8009722:	b10b      	cbz	r3, 8009728 <_strtod_l+0x4e8>
 8009724:	4682      	mov	sl, r0
 8009726:	468b      	mov	fp, r1
 8009728:	492a      	ldr	r1, [pc, #168]	@ (80097d4 <_strtod_l+0x594>)
 800972a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800972e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009732:	4652      	mov	r2, sl
 8009734:	465b      	mov	r3, fp
 8009736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800973a:	f7f6 ff7d 	bl	8000638 <__aeabi_dmul>
 800973e:	4b26      	ldr	r3, [pc, #152]	@ (80097d8 <_strtod_l+0x598>)
 8009740:	460a      	mov	r2, r1
 8009742:	400b      	ands	r3, r1
 8009744:	4925      	ldr	r1, [pc, #148]	@ (80097dc <_strtod_l+0x59c>)
 8009746:	428b      	cmp	r3, r1
 8009748:	4682      	mov	sl, r0
 800974a:	d898      	bhi.n	800967e <_strtod_l+0x43e>
 800974c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009750:	428b      	cmp	r3, r1
 8009752:	bf86      	itte	hi
 8009754:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80097e0 <_strtod_l+0x5a0>
 8009758:	f04f 3aff 	movhi.w	sl, #4294967295
 800975c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009760:	2300      	movs	r3, #0
 8009762:	9308      	str	r3, [sp, #32]
 8009764:	e076      	b.n	8009854 <_strtod_l+0x614>
 8009766:	07e2      	lsls	r2, r4, #31
 8009768:	d504      	bpl.n	8009774 <_strtod_l+0x534>
 800976a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976e:	f7f6 ff63 	bl	8000638 <__aeabi_dmul>
 8009772:	2301      	movs	r3, #1
 8009774:	3601      	adds	r6, #1
 8009776:	1064      	asrs	r4, r4, #1
 8009778:	3708      	adds	r7, #8
 800977a:	e7d0      	b.n	800971e <_strtod_l+0x4de>
 800977c:	d0f0      	beq.n	8009760 <_strtod_l+0x520>
 800977e:	4264      	negs	r4, r4
 8009780:	f014 020f 	ands.w	r2, r4, #15
 8009784:	d00a      	beq.n	800979c <_strtod_l+0x55c>
 8009786:	4b12      	ldr	r3, [pc, #72]	@ (80097d0 <_strtod_l+0x590>)
 8009788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800978c:	4650      	mov	r0, sl
 800978e:	4659      	mov	r1, fp
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f7 f87a 	bl	800088c <__aeabi_ddiv>
 8009798:	4682      	mov	sl, r0
 800979a:	468b      	mov	fp, r1
 800979c:	1124      	asrs	r4, r4, #4
 800979e:	d0df      	beq.n	8009760 <_strtod_l+0x520>
 80097a0:	2c1f      	cmp	r4, #31
 80097a2:	dd1f      	ble.n	80097e4 <_strtod_l+0x5a4>
 80097a4:	2400      	movs	r4, #0
 80097a6:	46a0      	mov	r8, r4
 80097a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097aa:	46a1      	mov	r9, r4
 80097ac:	9a05      	ldr	r2, [sp, #20]
 80097ae:	2322      	movs	r3, #34	@ 0x22
 80097b0:	f04f 0a00 	mov.w	sl, #0
 80097b4:	f04f 0b00 	mov.w	fp, #0
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	e76b      	b.n	8009694 <_strtod_l+0x454>
 80097bc:	0800b145 	.word	0x0800b145
 80097c0:	0800b410 	.word	0x0800b410
 80097c4:	0800b13d 	.word	0x0800b13d
 80097c8:	0800b174 	.word	0x0800b174
 80097cc:	0800b2ad 	.word	0x0800b2ad
 80097d0:	0800b348 	.word	0x0800b348
 80097d4:	0800b320 	.word	0x0800b320
 80097d8:	7ff00000 	.word	0x7ff00000
 80097dc:	7ca00000 	.word	0x7ca00000
 80097e0:	7fefffff 	.word	0x7fefffff
 80097e4:	f014 0310 	ands.w	r3, r4, #16
 80097e8:	bf18      	it	ne
 80097ea:	236a      	movne	r3, #106	@ 0x6a
 80097ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009a94 <_strtod_l+0x854>)
 80097ee:	9308      	str	r3, [sp, #32]
 80097f0:	4650      	mov	r0, sl
 80097f2:	4659      	mov	r1, fp
 80097f4:	2300      	movs	r3, #0
 80097f6:	07e7      	lsls	r7, r4, #31
 80097f8:	d504      	bpl.n	8009804 <_strtod_l+0x5c4>
 80097fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097fe:	f7f6 ff1b 	bl	8000638 <__aeabi_dmul>
 8009802:	2301      	movs	r3, #1
 8009804:	1064      	asrs	r4, r4, #1
 8009806:	f106 0608 	add.w	r6, r6, #8
 800980a:	d1f4      	bne.n	80097f6 <_strtod_l+0x5b6>
 800980c:	b10b      	cbz	r3, 8009812 <_strtod_l+0x5d2>
 800980e:	4682      	mov	sl, r0
 8009810:	468b      	mov	fp, r1
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	b1b3      	cbz	r3, 8009844 <_strtod_l+0x604>
 8009816:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800981a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800981e:	2b00      	cmp	r3, #0
 8009820:	4659      	mov	r1, fp
 8009822:	dd0f      	ble.n	8009844 <_strtod_l+0x604>
 8009824:	2b1f      	cmp	r3, #31
 8009826:	dd56      	ble.n	80098d6 <_strtod_l+0x696>
 8009828:	2b34      	cmp	r3, #52	@ 0x34
 800982a:	bfde      	ittt	le
 800982c:	f04f 33ff 	movle.w	r3, #4294967295
 8009830:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009834:	4093      	lslle	r3, r2
 8009836:	f04f 0a00 	mov.w	sl, #0
 800983a:	bfcc      	ite	gt
 800983c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009840:	ea03 0b01 	andle.w	fp, r3, r1
 8009844:	2200      	movs	r2, #0
 8009846:	2300      	movs	r3, #0
 8009848:	4650      	mov	r0, sl
 800984a:	4659      	mov	r1, fp
 800984c:	f7f7 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8009850:	2800      	cmp	r0, #0
 8009852:	d1a7      	bne.n	80097a4 <_strtod_l+0x564>
 8009854:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800985a:	9805      	ldr	r0, [sp, #20]
 800985c:	462b      	mov	r3, r5
 800985e:	464a      	mov	r2, r9
 8009860:	f7ff f8cc 	bl	80089fc <__s2b>
 8009864:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009866:	2800      	cmp	r0, #0
 8009868:	f43f af09 	beq.w	800967e <_strtod_l+0x43e>
 800986c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800986e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009870:	2a00      	cmp	r2, #0
 8009872:	eba3 0308 	sub.w	r3, r3, r8
 8009876:	bfa8      	it	ge
 8009878:	2300      	movge	r3, #0
 800987a:	9312      	str	r3, [sp, #72]	@ 0x48
 800987c:	2400      	movs	r4, #0
 800987e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009882:	9316      	str	r3, [sp, #88]	@ 0x58
 8009884:	46a0      	mov	r8, r4
 8009886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009888:	9805      	ldr	r0, [sp, #20]
 800988a:	6859      	ldr	r1, [r3, #4]
 800988c:	f7ff f80e 	bl	80088ac <_Balloc>
 8009890:	4681      	mov	r9, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	f43f aef7 	beq.w	8009686 <_strtod_l+0x446>
 8009898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	3202      	adds	r2, #2
 800989e:	f103 010c 	add.w	r1, r3, #12
 80098a2:	0092      	lsls	r2, r2, #2
 80098a4:	300c      	adds	r0, #12
 80098a6:	f000 ff27 	bl	800a6f8 <memcpy>
 80098aa:	ec4b ab10 	vmov	d0, sl, fp
 80098ae:	9805      	ldr	r0, [sp, #20]
 80098b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80098b2:	a91b      	add	r1, sp, #108	@ 0x6c
 80098b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80098b8:	f7ff fbd4 	bl	8009064 <__d2b>
 80098bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f aee1 	beq.w	8009686 <_strtod_l+0x446>
 80098c4:	9805      	ldr	r0, [sp, #20]
 80098c6:	2101      	movs	r1, #1
 80098c8:	f7ff f92e 	bl	8008b28 <__i2b>
 80098cc:	4680      	mov	r8, r0
 80098ce:	b948      	cbnz	r0, 80098e4 <_strtod_l+0x6a4>
 80098d0:	f04f 0800 	mov.w	r8, #0
 80098d4:	e6d7      	b.n	8009686 <_strtod_l+0x446>
 80098d6:	f04f 32ff 	mov.w	r2, #4294967295
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	ea03 0a0a 	and.w	sl, r3, sl
 80098e2:	e7af      	b.n	8009844 <_strtod_l+0x604>
 80098e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80098e8:	2d00      	cmp	r5, #0
 80098ea:	bfab      	itete	ge
 80098ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80098ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80098f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80098f4:	bfac      	ite	ge
 80098f6:	18ef      	addge	r7, r5, r3
 80098f8:	1b5e      	sublt	r6, r3, r5
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	1aed      	subs	r5, r5, r3
 80098fe:	4415      	add	r5, r2
 8009900:	4b65      	ldr	r3, [pc, #404]	@ (8009a98 <_strtod_l+0x858>)
 8009902:	3d01      	subs	r5, #1
 8009904:	429d      	cmp	r5, r3
 8009906:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800990a:	da50      	bge.n	80099ae <_strtod_l+0x76e>
 800990c:	1b5b      	subs	r3, r3, r5
 800990e:	2b1f      	cmp	r3, #31
 8009910:	eba2 0203 	sub.w	r2, r2, r3
 8009914:	f04f 0101 	mov.w	r1, #1
 8009918:	dc3d      	bgt.n	8009996 <_strtod_l+0x756>
 800991a:	fa01 f303 	lsl.w	r3, r1, r3
 800991e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009920:	2300      	movs	r3, #0
 8009922:	9310      	str	r3, [sp, #64]	@ 0x40
 8009924:	18bd      	adds	r5, r7, r2
 8009926:	9b08      	ldr	r3, [sp, #32]
 8009928:	42af      	cmp	r7, r5
 800992a:	4416      	add	r6, r2
 800992c:	441e      	add	r6, r3
 800992e:	463b      	mov	r3, r7
 8009930:	bfa8      	it	ge
 8009932:	462b      	movge	r3, r5
 8009934:	42b3      	cmp	r3, r6
 8009936:	bfa8      	it	ge
 8009938:	4633      	movge	r3, r6
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfc2      	ittt	gt
 800993e:	1aed      	subgt	r5, r5, r3
 8009940:	1af6      	subgt	r6, r6, r3
 8009942:	1aff      	subgt	r7, r7, r3
 8009944:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd16      	ble.n	8009978 <_strtod_l+0x738>
 800994a:	4641      	mov	r1, r8
 800994c:	9805      	ldr	r0, [sp, #20]
 800994e:	461a      	mov	r2, r3
 8009950:	f7ff f9a2 	bl	8008c98 <__pow5mult>
 8009954:	4680      	mov	r8, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	d0ba      	beq.n	80098d0 <_strtod_l+0x690>
 800995a:	4601      	mov	r1, r0
 800995c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800995e:	9805      	ldr	r0, [sp, #20]
 8009960:	f7ff f8f8 	bl	8008b54 <__multiply>
 8009964:	900a      	str	r0, [sp, #40]	@ 0x28
 8009966:	2800      	cmp	r0, #0
 8009968:	f43f ae8d 	beq.w	8009686 <_strtod_l+0x446>
 800996c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800996e:	9805      	ldr	r0, [sp, #20]
 8009970:	f7fe ffdc 	bl	800892c <_Bfree>
 8009974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009976:	931a      	str	r3, [sp, #104]	@ 0x68
 8009978:	2d00      	cmp	r5, #0
 800997a:	dc1d      	bgt.n	80099b8 <_strtod_l+0x778>
 800997c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd23      	ble.n	80099ca <_strtod_l+0x78a>
 8009982:	4649      	mov	r1, r9
 8009984:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009986:	9805      	ldr	r0, [sp, #20]
 8009988:	f7ff f986 	bl	8008c98 <__pow5mult>
 800998c:	4681      	mov	r9, r0
 800998e:	b9e0      	cbnz	r0, 80099ca <_strtod_l+0x78a>
 8009990:	f04f 0900 	mov.w	r9, #0
 8009994:	e677      	b.n	8009686 <_strtod_l+0x446>
 8009996:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800999a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800999e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80099a2:	35e2      	adds	r5, #226	@ 0xe2
 80099a4:	fa01 f305 	lsl.w	r3, r1, r5
 80099a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80099aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80099ac:	e7ba      	b.n	8009924 <_strtod_l+0x6e4>
 80099ae:	2300      	movs	r3, #0
 80099b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80099b2:	2301      	movs	r3, #1
 80099b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099b6:	e7b5      	b.n	8009924 <_strtod_l+0x6e4>
 80099b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ba:	9805      	ldr	r0, [sp, #20]
 80099bc:	462a      	mov	r2, r5
 80099be:	f7ff f9c5 	bl	8008d4c <__lshift>
 80099c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1d9      	bne.n	800997c <_strtod_l+0x73c>
 80099c8:	e65d      	b.n	8009686 <_strtod_l+0x446>
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	dd07      	ble.n	80099de <_strtod_l+0x79e>
 80099ce:	4649      	mov	r1, r9
 80099d0:	9805      	ldr	r0, [sp, #20]
 80099d2:	4632      	mov	r2, r6
 80099d4:	f7ff f9ba 	bl	8008d4c <__lshift>
 80099d8:	4681      	mov	r9, r0
 80099da:	2800      	cmp	r0, #0
 80099dc:	d0d8      	beq.n	8009990 <_strtod_l+0x750>
 80099de:	2f00      	cmp	r7, #0
 80099e0:	dd08      	ble.n	80099f4 <_strtod_l+0x7b4>
 80099e2:	4641      	mov	r1, r8
 80099e4:	9805      	ldr	r0, [sp, #20]
 80099e6:	463a      	mov	r2, r7
 80099e8:	f7ff f9b0 	bl	8008d4c <__lshift>
 80099ec:	4680      	mov	r8, r0
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f ae49 	beq.w	8009686 <_strtod_l+0x446>
 80099f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099f6:	9805      	ldr	r0, [sp, #20]
 80099f8:	464a      	mov	r2, r9
 80099fa:	f7ff fa2f 	bl	8008e5c <__mdiff>
 80099fe:	4604      	mov	r4, r0
 8009a00:	2800      	cmp	r0, #0
 8009a02:	f43f ae40 	beq.w	8009686 <_strtod_l+0x446>
 8009a06:	68c3      	ldr	r3, [r0, #12]
 8009a08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60c3      	str	r3, [r0, #12]
 8009a0e:	4641      	mov	r1, r8
 8009a10:	f7ff fa08 	bl	8008e24 <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	da45      	bge.n	8009aa4 <_strtod_l+0x864>
 8009a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a1e:	d16b      	bne.n	8009af8 <_strtod_l+0x8b8>
 8009a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d167      	bne.n	8009af8 <_strtod_l+0x8b8>
 8009a28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a2c:	0d1b      	lsrs	r3, r3, #20
 8009a2e:	051b      	lsls	r3, r3, #20
 8009a30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a34:	d960      	bls.n	8009af8 <_strtod_l+0x8b8>
 8009a36:	6963      	ldr	r3, [r4, #20]
 8009a38:	b913      	cbnz	r3, 8009a40 <_strtod_l+0x800>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	dd5b      	ble.n	8009af8 <_strtod_l+0x8b8>
 8009a40:	4621      	mov	r1, r4
 8009a42:	2201      	movs	r2, #1
 8009a44:	9805      	ldr	r0, [sp, #20]
 8009a46:	f7ff f981 	bl	8008d4c <__lshift>
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	f7ff f9e9 	bl	8008e24 <__mcmp>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	dd50      	ble.n	8009af8 <_strtod_l+0x8b8>
 8009a56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a5a:	9a08      	ldr	r2, [sp, #32]
 8009a5c:	0d1b      	lsrs	r3, r3, #20
 8009a5e:	051b      	lsls	r3, r3, #20
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d06a      	beq.n	8009b3a <_strtod_l+0x8fa>
 8009a64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a68:	d867      	bhi.n	8009b3a <_strtod_l+0x8fa>
 8009a6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a6e:	f67f ae9d 	bls.w	80097ac <_strtod_l+0x56c>
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <_strtod_l+0x85c>)
 8009a74:	4650      	mov	r0, sl
 8009a76:	4659      	mov	r1, fp
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f7f6 fddd 	bl	8000638 <__aeabi_dmul>
 8009a7e:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <_strtod_l+0x860>)
 8009a80:	400b      	ands	r3, r1
 8009a82:	4682      	mov	sl, r0
 8009a84:	468b      	mov	fp, r1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f47f ae08 	bne.w	800969c <_strtod_l+0x45c>
 8009a8c:	9a05      	ldr	r2, [sp, #20]
 8009a8e:	2322      	movs	r3, #34	@ 0x22
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	e603      	b.n	800969c <_strtod_l+0x45c>
 8009a94:	0800b438 	.word	0x0800b438
 8009a98:	fffffc02 	.word	0xfffffc02
 8009a9c:	39500000 	.word	0x39500000
 8009aa0:	7ff00000 	.word	0x7ff00000
 8009aa4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009aa8:	d165      	bne.n	8009b76 <_strtod_l+0x936>
 8009aaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ab0:	b35a      	cbz	r2, 8009b0a <_strtod_l+0x8ca>
 8009ab2:	4a9f      	ldr	r2, [pc, #636]	@ (8009d30 <_strtod_l+0xaf0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d12b      	bne.n	8009b10 <_strtod_l+0x8d0>
 8009ab8:	9b08      	ldr	r3, [sp, #32]
 8009aba:	4651      	mov	r1, sl
 8009abc:	b303      	cbz	r3, 8009b00 <_strtod_l+0x8c0>
 8009abe:	4b9d      	ldr	r3, [pc, #628]	@ (8009d34 <_strtod_l+0xaf4>)
 8009ac0:	465a      	mov	r2, fp
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8009acc:	d81b      	bhi.n	8009b06 <_strtod_l+0x8c6>
 8009ace:	0d1b      	lsrs	r3, r3, #20
 8009ad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	d119      	bne.n	8009b10 <_strtod_l+0x8d0>
 8009adc:	4b96      	ldr	r3, [pc, #600]	@ (8009d38 <_strtod_l+0xaf8>)
 8009ade:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d102      	bne.n	8009aea <_strtod_l+0x8aa>
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	f43f adce 	beq.w	8009686 <_strtod_l+0x446>
 8009aea:	4b92      	ldr	r3, [pc, #584]	@ (8009d34 <_strtod_l+0xaf4>)
 8009aec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009aee:	401a      	ands	r2, r3
 8009af0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009af4:	f04f 0a00 	mov.w	sl, #0
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1b9      	bne.n	8009a72 <_strtod_l+0x832>
 8009afe:	e5cd      	b.n	800969c <_strtod_l+0x45c>
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	e7e8      	b.n	8009ad8 <_strtod_l+0x898>
 8009b06:	4613      	mov	r3, r2
 8009b08:	e7e6      	b.n	8009ad8 <_strtod_l+0x898>
 8009b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b0e:	d0a2      	beq.n	8009a56 <_strtod_l+0x816>
 8009b10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b12:	b1db      	cbz	r3, 8009b4c <_strtod_l+0x90c>
 8009b14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b16:	4213      	tst	r3, r2
 8009b18:	d0ee      	beq.n	8009af8 <_strtod_l+0x8b8>
 8009b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1c:	9a08      	ldr	r2, [sp, #32]
 8009b1e:	4650      	mov	r0, sl
 8009b20:	4659      	mov	r1, fp
 8009b22:	b1bb      	cbz	r3, 8009b54 <_strtod_l+0x914>
 8009b24:	f7ff fb6c 	bl	8009200 <sulp>
 8009b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b2c:	ec53 2b10 	vmov	r2, r3, d0
 8009b30:	f7f6 fbcc 	bl	80002cc <__adddf3>
 8009b34:	4682      	mov	sl, r0
 8009b36:	468b      	mov	fp, r1
 8009b38:	e7de      	b.n	8009af8 <_strtod_l+0x8b8>
 8009b3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b46:	f04f 3aff 	mov.w	sl, #4294967295
 8009b4a:	e7d5      	b.n	8009af8 <_strtod_l+0x8b8>
 8009b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b4e:	ea13 0f0a 	tst.w	r3, sl
 8009b52:	e7e1      	b.n	8009b18 <_strtod_l+0x8d8>
 8009b54:	f7ff fb54 	bl	8009200 <sulp>
 8009b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b5c:	ec53 2b10 	vmov	r2, r3, d0
 8009b60:	f7f6 fbb2 	bl	80002c8 <__aeabi_dsub>
 8009b64:	2200      	movs	r2, #0
 8009b66:	2300      	movs	r3, #0
 8009b68:	4682      	mov	sl, r0
 8009b6a:	468b      	mov	fp, r1
 8009b6c:	f7f6 ffcc 	bl	8000b08 <__aeabi_dcmpeq>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0c1      	beq.n	8009af8 <_strtod_l+0x8b8>
 8009b74:	e61a      	b.n	80097ac <_strtod_l+0x56c>
 8009b76:	4641      	mov	r1, r8
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff facb 	bl	8009114 <__ratio>
 8009b7e:	ec57 6b10 	vmov	r6, r7, d0
 8009b82:	2200      	movs	r2, #0
 8009b84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 ffd0 	bl	8000b30 <__aeabi_dcmple>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d06f      	beq.n	8009c74 <_strtod_l+0xa34>
 8009b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d17a      	bne.n	8009c90 <_strtod_l+0xa50>
 8009b9a:	f1ba 0f00 	cmp.w	sl, #0
 8009b9e:	d158      	bne.n	8009c52 <_strtod_l+0xa12>
 8009ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d15a      	bne.n	8009c60 <_strtod_l+0xa20>
 8009baa:	4b64      	ldr	r3, [pc, #400]	@ (8009d3c <_strtod_l+0xafc>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d159      	bne.n	8009c6e <_strtod_l+0xa2e>
 8009bba:	4630      	mov	r0, r6
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	4b60      	ldr	r3, [pc, #384]	@ (8009d40 <_strtod_l+0xb00>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f7f6 fd39 	bl	8000638 <__aeabi_dmul>
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009bce:	9606      	str	r6, [sp, #24]
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bd6:	4d57      	ldr	r5, [pc, #348]	@ (8009d34 <_strtod_l+0xaf4>)
 8009bd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bde:	401d      	ands	r5, r3
 8009be0:	4b58      	ldr	r3, [pc, #352]	@ (8009d44 <_strtod_l+0xb04>)
 8009be2:	429d      	cmp	r5, r3
 8009be4:	f040 80b2 	bne.w	8009d4c <_strtod_l+0xb0c>
 8009be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009bee:	ec4b ab10 	vmov	d0, sl, fp
 8009bf2:	f7ff f9c7 	bl	8008f84 <__ulp>
 8009bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bfa:	ec51 0b10 	vmov	r0, r1, d0
 8009bfe:	f7f6 fd1b 	bl	8000638 <__aeabi_dmul>
 8009c02:	4652      	mov	r2, sl
 8009c04:	465b      	mov	r3, fp
 8009c06:	f7f6 fb61 	bl	80002cc <__adddf3>
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4949      	ldr	r1, [pc, #292]	@ (8009d34 <_strtod_l+0xaf4>)
 8009c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8009d48 <_strtod_l+0xb08>)
 8009c10:	4019      	ands	r1, r3
 8009c12:	4291      	cmp	r1, r2
 8009c14:	4682      	mov	sl, r0
 8009c16:	d942      	bls.n	8009c9e <_strtod_l+0xa5e>
 8009c18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c1a:	4b47      	ldr	r3, [pc, #284]	@ (8009d38 <_strtod_l+0xaf8>)
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d103      	bne.n	8009c28 <_strtod_l+0x9e8>
 8009c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c22:	3301      	adds	r3, #1
 8009c24:	f43f ad2f 	beq.w	8009686 <_strtod_l+0x446>
 8009c28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d38 <_strtod_l+0xaf8>
 8009c2c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c32:	9805      	ldr	r0, [sp, #20]
 8009c34:	f7fe fe7a 	bl	800892c <_Bfree>
 8009c38:	9805      	ldr	r0, [sp, #20]
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7fe fe76 	bl	800892c <_Bfree>
 8009c40:	9805      	ldr	r0, [sp, #20]
 8009c42:	4641      	mov	r1, r8
 8009c44:	f7fe fe72 	bl	800892c <_Bfree>
 8009c48:	9805      	ldr	r0, [sp, #20]
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	f7fe fe6e 	bl	800892c <_Bfree>
 8009c50:	e619      	b.n	8009886 <_strtod_l+0x646>
 8009c52:	f1ba 0f01 	cmp.w	sl, #1
 8009c56:	d103      	bne.n	8009c60 <_strtod_l+0xa20>
 8009c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f43f ada6 	beq.w	80097ac <_strtod_l+0x56c>
 8009c60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009d10 <_strtod_l+0xad0>
 8009c64:	4f35      	ldr	r7, [pc, #212]	@ (8009d3c <_strtod_l+0xafc>)
 8009c66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	e7b1      	b.n	8009bd2 <_strtod_l+0x992>
 8009c6e:	4f34      	ldr	r7, [pc, #208]	@ (8009d40 <_strtod_l+0xb00>)
 8009c70:	2600      	movs	r6, #0
 8009c72:	e7aa      	b.n	8009bca <_strtod_l+0x98a>
 8009c74:	4b32      	ldr	r3, [pc, #200]	@ (8009d40 <_strtod_l+0xb00>)
 8009c76:	4630      	mov	r0, r6
 8009c78:	4639      	mov	r1, r7
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f7f6 fcdc 	bl	8000638 <__aeabi_dmul>
 8009c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c82:	4606      	mov	r6, r0
 8009c84:	460f      	mov	r7, r1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d09f      	beq.n	8009bca <_strtod_l+0x98a>
 8009c8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c8e:	e7a0      	b.n	8009bd2 <_strtod_l+0x992>
 8009c90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d18 <_strtod_l+0xad8>
 8009c94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c98:	ec57 6b17 	vmov	r6, r7, d7
 8009c9c:	e799      	b.n	8009bd2 <_strtod_l+0x992>
 8009c9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1c1      	bne.n	8009c30 <_strtod_l+0x9f0>
 8009cac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cb0:	0d1b      	lsrs	r3, r3, #20
 8009cb2:	051b      	lsls	r3, r3, #20
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	d1bb      	bne.n	8009c30 <_strtod_l+0x9f0>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	4639      	mov	r1, r7
 8009cbc:	f7f7 f81c 	bl	8000cf8 <__aeabi_d2lz>
 8009cc0:	f7f6 fc8c 	bl	80005dc <__aeabi_l2d>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fafc 	bl	80002c8 <__aeabi_dsub>
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cde:	ea46 060a 	orr.w	r6, r6, sl
 8009ce2:	431e      	orrs	r6, r3
 8009ce4:	d06f      	beq.n	8009dc6 <_strtod_l+0xb86>
 8009ce6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d20 <_strtod_l+0xae0>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 ff16 	bl	8000b1c <__aeabi_dcmplt>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f47f acd3 	bne.w	800969c <_strtod_l+0x45c>
 8009cf6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d28 <_strtod_l+0xae8>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d00:	f7f6 ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d093      	beq.n	8009c30 <_strtod_l+0x9f0>
 8009d08:	e4c8      	b.n	800969c <_strtod_l+0x45c>
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	00000000 	.word	0x00000000
 8009d14:	bff00000 	.word	0xbff00000
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	3ff00000 	.word	0x3ff00000
 8009d20:	94a03595 	.word	0x94a03595
 8009d24:	3fdfffff 	.word	0x3fdfffff
 8009d28:	35afe535 	.word	0x35afe535
 8009d2c:	3fe00000 	.word	0x3fe00000
 8009d30:	000fffff 	.word	0x000fffff
 8009d34:	7ff00000 	.word	0x7ff00000
 8009d38:	7fefffff 	.word	0x7fefffff
 8009d3c:	3ff00000 	.word	0x3ff00000
 8009d40:	3fe00000 	.word	0x3fe00000
 8009d44:	7fe00000 	.word	0x7fe00000
 8009d48:	7c9fffff 	.word	0x7c9fffff
 8009d4c:	9b08      	ldr	r3, [sp, #32]
 8009d4e:	b323      	cbz	r3, 8009d9a <_strtod_l+0xb5a>
 8009d50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d54:	d821      	bhi.n	8009d9a <_strtod_l+0xb5a>
 8009d56:	a328      	add	r3, pc, #160	@ (adr r3, 8009df8 <_strtod_l+0xbb8>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 fee6 	bl	8000b30 <__aeabi_dcmple>
 8009d64:	b1a0      	cbz	r0, 8009d90 <_strtod_l+0xb50>
 8009d66:	4639      	mov	r1, r7
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7f6 ff3d 	bl	8000be8 <__aeabi_d2uiz>
 8009d6e:	2801      	cmp	r0, #1
 8009d70:	bf38      	it	cc
 8009d72:	2001      	movcc	r0, #1
 8009d74:	f7f6 fbe6 	bl	8000544 <__aeabi_ui2d>
 8009d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460f      	mov	r7, r1
 8009d7e:	b9fb      	cbnz	r3, 8009dc0 <_strtod_l+0xb80>
 8009d80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d84:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d86:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d96:	1b5b      	subs	r3, r3, r5
 8009d98:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009da2:	f7ff f8ef 	bl	8008f84 <__ulp>
 8009da6:	4650      	mov	r0, sl
 8009da8:	ec53 2b10 	vmov	r2, r3, d0
 8009dac:	4659      	mov	r1, fp
 8009dae:	f7f6 fc43 	bl	8000638 <__aeabi_dmul>
 8009db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009db6:	f7f6 fa89 	bl	80002cc <__adddf3>
 8009dba:	4682      	mov	sl, r0
 8009dbc:	468b      	mov	fp, r1
 8009dbe:	e770      	b.n	8009ca2 <_strtod_l+0xa62>
 8009dc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009dc4:	e7e0      	b.n	8009d88 <_strtod_l+0xb48>
 8009dc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e00 <_strtod_l+0xbc0>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 fea6 	bl	8000b1c <__aeabi_dcmplt>
 8009dd0:	e798      	b.n	8009d04 <_strtod_l+0xac4>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	f7ff ba6d 	b.w	80092ba <_strtod_l+0x7a>
 8009de0:	2a65      	cmp	r2, #101	@ 0x65
 8009de2:	f43f ab68 	beq.w	80094b6 <_strtod_l+0x276>
 8009de6:	2a45      	cmp	r2, #69	@ 0x45
 8009de8:	f43f ab65 	beq.w	80094b6 <_strtod_l+0x276>
 8009dec:	2301      	movs	r3, #1
 8009dee:	f7ff bba0 	b.w	8009532 <_strtod_l+0x2f2>
 8009df2:	bf00      	nop
 8009df4:	f3af 8000 	nop.w
 8009df8:	ffc00000 	.word	0xffc00000
 8009dfc:	41dfffff 	.word	0x41dfffff
 8009e00:	94a03595 	.word	0x94a03595
 8009e04:	3fcfffff 	.word	0x3fcfffff

08009e08 <_strtod_r>:
 8009e08:	4b01      	ldr	r3, [pc, #4]	@ (8009e10 <_strtod_r+0x8>)
 8009e0a:	f7ff ba19 	b.w	8009240 <_strtod_l>
 8009e0e:	bf00      	nop
 8009e10:	2000006c 	.word	0x2000006c

08009e14 <_strtol_l.isra.0>:
 8009e14:	2b24      	cmp	r3, #36	@ 0x24
 8009e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1a:	4686      	mov	lr, r0
 8009e1c:	4690      	mov	r8, r2
 8009e1e:	d801      	bhi.n	8009e24 <_strtol_l.isra.0+0x10>
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d106      	bne.n	8009e32 <_strtol_l.isra.0+0x1e>
 8009e24:	f7fd fe6a 	bl	8007afc <__errno>
 8009e28:	2316      	movs	r3, #22
 8009e2a:	6003      	str	r3, [r0, #0]
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e32:	4834      	ldr	r0, [pc, #208]	@ (8009f04 <_strtol_l.isra.0+0xf0>)
 8009e34:	460d      	mov	r5, r1
 8009e36:	462a      	mov	r2, r5
 8009e38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e3c:	5d06      	ldrb	r6, [r0, r4]
 8009e3e:	f016 0608 	ands.w	r6, r6, #8
 8009e42:	d1f8      	bne.n	8009e36 <_strtol_l.isra.0+0x22>
 8009e44:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e46:	d110      	bne.n	8009e6a <_strtol_l.isra.0+0x56>
 8009e48:	782c      	ldrb	r4, [r5, #0]
 8009e4a:	2601      	movs	r6, #1
 8009e4c:	1c95      	adds	r5, r2, #2
 8009e4e:	f033 0210 	bics.w	r2, r3, #16
 8009e52:	d115      	bne.n	8009e80 <_strtol_l.isra.0+0x6c>
 8009e54:	2c30      	cmp	r4, #48	@ 0x30
 8009e56:	d10d      	bne.n	8009e74 <_strtol_l.isra.0+0x60>
 8009e58:	782a      	ldrb	r2, [r5, #0]
 8009e5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e5e:	2a58      	cmp	r2, #88	@ 0x58
 8009e60:	d108      	bne.n	8009e74 <_strtol_l.isra.0+0x60>
 8009e62:	786c      	ldrb	r4, [r5, #1]
 8009e64:	3502      	adds	r5, #2
 8009e66:	2310      	movs	r3, #16
 8009e68:	e00a      	b.n	8009e80 <_strtol_l.isra.0+0x6c>
 8009e6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e6c:	bf04      	itt	eq
 8009e6e:	782c      	ldrbeq	r4, [r5, #0]
 8009e70:	1c95      	addeq	r5, r2, #2
 8009e72:	e7ec      	b.n	8009e4e <_strtol_l.isra.0+0x3a>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1f6      	bne.n	8009e66 <_strtol_l.isra.0+0x52>
 8009e78:	2c30      	cmp	r4, #48	@ 0x30
 8009e7a:	bf14      	ite	ne
 8009e7c:	230a      	movne	r3, #10
 8009e7e:	2308      	moveq	r3, #8
 8009e80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e88:	2200      	movs	r2, #0
 8009e8a:	fbbc f9f3 	udiv	r9, ip, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e98:	2f09      	cmp	r7, #9
 8009e9a:	d80f      	bhi.n	8009ebc <_strtol_l.isra.0+0xa8>
 8009e9c:	463c      	mov	r4, r7
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	dd1b      	ble.n	8009eda <_strtol_l.isra.0+0xc6>
 8009ea2:	1c57      	adds	r7, r2, #1
 8009ea4:	d007      	beq.n	8009eb6 <_strtol_l.isra.0+0xa2>
 8009ea6:	4581      	cmp	r9, r0
 8009ea8:	d314      	bcc.n	8009ed4 <_strtol_l.isra.0+0xc0>
 8009eaa:	d101      	bne.n	8009eb0 <_strtol_l.isra.0+0x9c>
 8009eac:	45a2      	cmp	sl, r4
 8009eae:	db11      	blt.n	8009ed4 <_strtol_l.isra.0+0xc0>
 8009eb0:	fb00 4003 	mla	r0, r0, r3, r4
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eba:	e7eb      	b.n	8009e94 <_strtol_l.isra.0+0x80>
 8009ebc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ec0:	2f19      	cmp	r7, #25
 8009ec2:	d801      	bhi.n	8009ec8 <_strtol_l.isra.0+0xb4>
 8009ec4:	3c37      	subs	r4, #55	@ 0x37
 8009ec6:	e7ea      	b.n	8009e9e <_strtol_l.isra.0+0x8a>
 8009ec8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ecc:	2f19      	cmp	r7, #25
 8009ece:	d804      	bhi.n	8009eda <_strtol_l.isra.0+0xc6>
 8009ed0:	3c57      	subs	r4, #87	@ 0x57
 8009ed2:	e7e4      	b.n	8009e9e <_strtol_l.isra.0+0x8a>
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed8:	e7ed      	b.n	8009eb6 <_strtol_l.isra.0+0xa2>
 8009eda:	1c53      	adds	r3, r2, #1
 8009edc:	d108      	bne.n	8009ef0 <_strtol_l.isra.0+0xdc>
 8009ede:	2322      	movs	r3, #34	@ 0x22
 8009ee0:	f8ce 3000 	str.w	r3, [lr]
 8009ee4:	4660      	mov	r0, ip
 8009ee6:	f1b8 0f00 	cmp.w	r8, #0
 8009eea:	d0a0      	beq.n	8009e2e <_strtol_l.isra.0+0x1a>
 8009eec:	1e69      	subs	r1, r5, #1
 8009eee:	e006      	b.n	8009efe <_strtol_l.isra.0+0xea>
 8009ef0:	b106      	cbz	r6, 8009ef4 <_strtol_l.isra.0+0xe0>
 8009ef2:	4240      	negs	r0, r0
 8009ef4:	f1b8 0f00 	cmp.w	r8, #0
 8009ef8:	d099      	beq.n	8009e2e <_strtol_l.isra.0+0x1a>
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	d1f6      	bne.n	8009eec <_strtol_l.isra.0+0xd8>
 8009efe:	f8c8 1000 	str.w	r1, [r8]
 8009f02:	e794      	b.n	8009e2e <_strtol_l.isra.0+0x1a>
 8009f04:	0800b461 	.word	0x0800b461

08009f08 <_strtol_r>:
 8009f08:	f7ff bf84 	b.w	8009e14 <_strtol_l.isra.0>

08009f0c <__ssputs_r>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	688e      	ldr	r6, [r1, #8]
 8009f12:	461f      	mov	r7, r3
 8009f14:	42be      	cmp	r6, r7
 8009f16:	680b      	ldr	r3, [r1, #0]
 8009f18:	4682      	mov	sl, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	4690      	mov	r8, r2
 8009f1e:	d82d      	bhi.n	8009f7c <__ssputs_r+0x70>
 8009f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f28:	d026      	beq.n	8009f78 <__ssputs_r+0x6c>
 8009f2a:	6965      	ldr	r5, [r4, #20]
 8009f2c:	6909      	ldr	r1, [r1, #16]
 8009f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f32:	eba3 0901 	sub.w	r9, r3, r1
 8009f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f3a:	1c7b      	adds	r3, r7, #1
 8009f3c:	444b      	add	r3, r9
 8009f3e:	106d      	asrs	r5, r5, #1
 8009f40:	429d      	cmp	r5, r3
 8009f42:	bf38      	it	cc
 8009f44:	461d      	movcc	r5, r3
 8009f46:	0553      	lsls	r3, r2, #21
 8009f48:	d527      	bpl.n	8009f9a <__ssputs_r+0x8e>
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	f7fc fc58 	bl	8006800 <_malloc_r>
 8009f50:	4606      	mov	r6, r0
 8009f52:	b360      	cbz	r0, 8009fae <__ssputs_r+0xa2>
 8009f54:	6921      	ldr	r1, [r4, #16]
 8009f56:	464a      	mov	r2, r9
 8009f58:	f000 fbce 	bl	800a6f8 <memcpy>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	6126      	str	r6, [r4, #16]
 8009f6a:	6165      	str	r5, [r4, #20]
 8009f6c:	444e      	add	r6, r9
 8009f6e:	eba5 0509 	sub.w	r5, r5, r9
 8009f72:	6026      	str	r6, [r4, #0]
 8009f74:	60a5      	str	r5, [r4, #8]
 8009f76:	463e      	mov	r6, r7
 8009f78:	42be      	cmp	r6, r7
 8009f7a:	d900      	bls.n	8009f7e <__ssputs_r+0x72>
 8009f7c:	463e      	mov	r6, r7
 8009f7e:	6820      	ldr	r0, [r4, #0]
 8009f80:	4632      	mov	r2, r6
 8009f82:	4641      	mov	r1, r8
 8009f84:	f000 fb6a 	bl	800a65c <memmove>
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	1b9b      	subs	r3, r3, r6
 8009f8c:	60a3      	str	r3, [r4, #8]
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	4433      	add	r3, r6
 8009f92:	6023      	str	r3, [r4, #0]
 8009f94:	2000      	movs	r0, #0
 8009f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	f000 ff41 	bl	800ae22 <_realloc_r>
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d1e0      	bne.n	8009f68 <__ssputs_r+0x5c>
 8009fa6:	6921      	ldr	r1, [r4, #16]
 8009fa8:	4650      	mov	r0, sl
 8009faa:	f7fe fc35 	bl	8008818 <_free_r>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	f8ca 3000 	str.w	r3, [sl]
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	e7e9      	b.n	8009f96 <__ssputs_r+0x8a>
	...

08009fc4 <_svfiprintf_r>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	4698      	mov	r8, r3
 8009fca:	898b      	ldrh	r3, [r1, #12]
 8009fcc:	061b      	lsls	r3, r3, #24
 8009fce:	b09d      	sub	sp, #116	@ 0x74
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	d510      	bpl.n	8009ffa <_svfiprintf_r+0x36>
 8009fd8:	690b      	ldr	r3, [r1, #16]
 8009fda:	b973      	cbnz	r3, 8009ffa <_svfiprintf_r+0x36>
 8009fdc:	2140      	movs	r1, #64	@ 0x40
 8009fde:	f7fc fc0f 	bl	8006800 <_malloc_r>
 8009fe2:	6028      	str	r0, [r5, #0]
 8009fe4:	6128      	str	r0, [r5, #16]
 8009fe6:	b930      	cbnz	r0, 8009ff6 <_svfiprintf_r+0x32>
 8009fe8:	230c      	movs	r3, #12
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	b01d      	add	sp, #116	@ 0x74
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	2340      	movs	r3, #64	@ 0x40
 8009ff8:	616b      	str	r3, [r5, #20]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ffe:	2320      	movs	r3, #32
 800a000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a004:	f8cd 800c 	str.w	r8, [sp, #12]
 800a008:	2330      	movs	r3, #48	@ 0x30
 800a00a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1a8 <_svfiprintf_r+0x1e4>
 800a00e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a012:	f04f 0901 	mov.w	r9, #1
 800a016:	4623      	mov	r3, r4
 800a018:	469a      	mov	sl, r3
 800a01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a01e:	b10a      	cbz	r2, 800a024 <_svfiprintf_r+0x60>
 800a020:	2a25      	cmp	r2, #37	@ 0x25
 800a022:	d1f9      	bne.n	800a018 <_svfiprintf_r+0x54>
 800a024:	ebba 0b04 	subs.w	fp, sl, r4
 800a028:	d00b      	beq.n	800a042 <_svfiprintf_r+0x7e>
 800a02a:	465b      	mov	r3, fp
 800a02c:	4622      	mov	r2, r4
 800a02e:	4629      	mov	r1, r5
 800a030:	4638      	mov	r0, r7
 800a032:	f7ff ff6b 	bl	8009f0c <__ssputs_r>
 800a036:	3001      	adds	r0, #1
 800a038:	f000 80a7 	beq.w	800a18a <_svfiprintf_r+0x1c6>
 800a03c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a03e:	445a      	add	r2, fp
 800a040:	9209      	str	r2, [sp, #36]	@ 0x24
 800a042:	f89a 3000 	ldrb.w	r3, [sl]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 809f 	beq.w	800a18a <_svfiprintf_r+0x1c6>
 800a04c:	2300      	movs	r3, #0
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295
 800a052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a056:	f10a 0a01 	add.w	sl, sl, #1
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	9307      	str	r3, [sp, #28]
 800a05e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a062:	931a      	str	r3, [sp, #104]	@ 0x68
 800a064:	4654      	mov	r4, sl
 800a066:	2205      	movs	r2, #5
 800a068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06c:	484e      	ldr	r0, [pc, #312]	@ (800a1a8 <_svfiprintf_r+0x1e4>)
 800a06e:	f7f6 f8cf 	bl	8000210 <memchr>
 800a072:	9a04      	ldr	r2, [sp, #16]
 800a074:	b9d8      	cbnz	r0, 800a0ae <_svfiprintf_r+0xea>
 800a076:	06d0      	lsls	r0, r2, #27
 800a078:	bf44      	itt	mi
 800a07a:	2320      	movmi	r3, #32
 800a07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a080:	0711      	lsls	r1, r2, #28
 800a082:	bf44      	itt	mi
 800a084:	232b      	movmi	r3, #43	@ 0x2b
 800a086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a08a:	f89a 3000 	ldrb.w	r3, [sl]
 800a08e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a090:	d015      	beq.n	800a0be <_svfiprintf_r+0xfa>
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	4654      	mov	r4, sl
 800a096:	2000      	movs	r0, #0
 800a098:	f04f 0c0a 	mov.w	ip, #10
 800a09c:	4621      	mov	r1, r4
 800a09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a2:	3b30      	subs	r3, #48	@ 0x30
 800a0a4:	2b09      	cmp	r3, #9
 800a0a6:	d94b      	bls.n	800a140 <_svfiprintf_r+0x17c>
 800a0a8:	b1b0      	cbz	r0, 800a0d8 <_svfiprintf_r+0x114>
 800a0aa:	9207      	str	r2, [sp, #28]
 800a0ac:	e014      	b.n	800a0d8 <_svfiprintf_r+0x114>
 800a0ae:	eba0 0308 	sub.w	r3, r0, r8
 800a0b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	46a2      	mov	sl, r4
 800a0bc:	e7d2      	b.n	800a064 <_svfiprintf_r+0xa0>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	1d19      	adds	r1, r3, #4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	9103      	str	r1, [sp, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfbb      	ittet	lt
 800a0ca:	425b      	neglt	r3, r3
 800a0cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a0d0:	9307      	strge	r3, [sp, #28]
 800a0d2:	9307      	strlt	r3, [sp, #28]
 800a0d4:	bfb8      	it	lt
 800a0d6:	9204      	strlt	r2, [sp, #16]
 800a0d8:	7823      	ldrb	r3, [r4, #0]
 800a0da:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0dc:	d10a      	bne.n	800a0f4 <_svfiprintf_r+0x130>
 800a0de:	7863      	ldrb	r3, [r4, #1]
 800a0e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e2:	d132      	bne.n	800a14a <_svfiprintf_r+0x186>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	1d1a      	adds	r2, r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	9203      	str	r2, [sp, #12]
 800a0ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0f0:	3402      	adds	r4, #2
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1b8 <_svfiprintf_r+0x1f4>
 800a0f8:	7821      	ldrb	r1, [r4, #0]
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	f7f6 f887 	bl	8000210 <memchr>
 800a102:	b138      	cbz	r0, 800a114 <_svfiprintf_r+0x150>
 800a104:	9b04      	ldr	r3, [sp, #16]
 800a106:	eba0 000a 	sub.w	r0, r0, sl
 800a10a:	2240      	movs	r2, #64	@ 0x40
 800a10c:	4082      	lsls	r2, r0
 800a10e:	4313      	orrs	r3, r2
 800a110:	3401      	adds	r4, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a118:	4824      	ldr	r0, [pc, #144]	@ (800a1ac <_svfiprintf_r+0x1e8>)
 800a11a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a11e:	2206      	movs	r2, #6
 800a120:	f7f6 f876 	bl	8000210 <memchr>
 800a124:	2800      	cmp	r0, #0
 800a126:	d036      	beq.n	800a196 <_svfiprintf_r+0x1d2>
 800a128:	4b21      	ldr	r3, [pc, #132]	@ (800a1b0 <_svfiprintf_r+0x1ec>)
 800a12a:	bb1b      	cbnz	r3, 800a174 <_svfiprintf_r+0x1b0>
 800a12c:	9b03      	ldr	r3, [sp, #12]
 800a12e:	3307      	adds	r3, #7
 800a130:	f023 0307 	bic.w	r3, r3, #7
 800a134:	3308      	adds	r3, #8
 800a136:	9303      	str	r3, [sp, #12]
 800a138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13a:	4433      	add	r3, r6
 800a13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a13e:	e76a      	b.n	800a016 <_svfiprintf_r+0x52>
 800a140:	fb0c 3202 	mla	r2, ip, r2, r3
 800a144:	460c      	mov	r4, r1
 800a146:	2001      	movs	r0, #1
 800a148:	e7a8      	b.n	800a09c <_svfiprintf_r+0xd8>
 800a14a:	2300      	movs	r3, #0
 800a14c:	3401      	adds	r4, #1
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	4619      	mov	r1, r3
 800a152:	f04f 0c0a 	mov.w	ip, #10
 800a156:	4620      	mov	r0, r4
 800a158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a15c:	3a30      	subs	r2, #48	@ 0x30
 800a15e:	2a09      	cmp	r2, #9
 800a160:	d903      	bls.n	800a16a <_svfiprintf_r+0x1a6>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0c6      	beq.n	800a0f4 <_svfiprintf_r+0x130>
 800a166:	9105      	str	r1, [sp, #20]
 800a168:	e7c4      	b.n	800a0f4 <_svfiprintf_r+0x130>
 800a16a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a16e:	4604      	mov	r4, r0
 800a170:	2301      	movs	r3, #1
 800a172:	e7f0      	b.n	800a156 <_svfiprintf_r+0x192>
 800a174:	ab03      	add	r3, sp, #12
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	462a      	mov	r2, r5
 800a17a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b4 <_svfiprintf_r+0x1f0>)
 800a17c:	a904      	add	r1, sp, #16
 800a17e:	4638      	mov	r0, r7
 800a180:	f7fc fc6a 	bl	8006a58 <_printf_float>
 800a184:	1c42      	adds	r2, r0, #1
 800a186:	4606      	mov	r6, r0
 800a188:	d1d6      	bne.n	800a138 <_svfiprintf_r+0x174>
 800a18a:	89ab      	ldrh	r3, [r5, #12]
 800a18c:	065b      	lsls	r3, r3, #25
 800a18e:	f53f af2d 	bmi.w	8009fec <_svfiprintf_r+0x28>
 800a192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a194:	e72c      	b.n	8009ff0 <_svfiprintf_r+0x2c>
 800a196:	ab03      	add	r3, sp, #12
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	462a      	mov	r2, r5
 800a19c:	4b05      	ldr	r3, [pc, #20]	@ (800a1b4 <_svfiprintf_r+0x1f0>)
 800a19e:	a904      	add	r1, sp, #16
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f7fc fef1 	bl	8006f88 <_printf_i>
 800a1a6:	e7ed      	b.n	800a184 <_svfiprintf_r+0x1c0>
 800a1a8:	0800b259 	.word	0x0800b259
 800a1ac:	0800b263 	.word	0x0800b263
 800a1b0:	08006a59 	.word	0x08006a59
 800a1b4:	08009f0d 	.word	0x08009f0d
 800a1b8:	0800b25f 	.word	0x0800b25f

0800a1bc <__sfputc_r>:
 800a1bc:	6893      	ldr	r3, [r2, #8]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	b410      	push	{r4}
 800a1c4:	6093      	str	r3, [r2, #8]
 800a1c6:	da08      	bge.n	800a1da <__sfputc_r+0x1e>
 800a1c8:	6994      	ldr	r4, [r2, #24]
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	db01      	blt.n	800a1d2 <__sfputc_r+0x16>
 800a1ce:	290a      	cmp	r1, #10
 800a1d0:	d103      	bne.n	800a1da <__sfputc_r+0x1e>
 800a1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1d6:	f7fd bb9a 	b.w	800790e <__swbuf_r>
 800a1da:	6813      	ldr	r3, [r2, #0]
 800a1dc:	1c58      	adds	r0, r3, #1
 800a1de:	6010      	str	r0, [r2, #0]
 800a1e0:	7019      	strb	r1, [r3, #0]
 800a1e2:	4608      	mov	r0, r1
 800a1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <__sfputs_r>:
 800a1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460f      	mov	r7, r1
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	18d5      	adds	r5, r2, r3
 800a1f4:	42ac      	cmp	r4, r5
 800a1f6:	d101      	bne.n	800a1fc <__sfputs_r+0x12>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e007      	b.n	800a20c <__sfputs_r+0x22>
 800a1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a200:	463a      	mov	r2, r7
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ffda 	bl	800a1bc <__sfputc_r>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d1f3      	bne.n	800a1f4 <__sfputs_r+0xa>
 800a20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a210 <_vfiprintf_r>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	460d      	mov	r5, r1
 800a216:	b09d      	sub	sp, #116	@ 0x74
 800a218:	4614      	mov	r4, r2
 800a21a:	4698      	mov	r8, r3
 800a21c:	4606      	mov	r6, r0
 800a21e:	b118      	cbz	r0, 800a228 <_vfiprintf_r+0x18>
 800a220:	6a03      	ldr	r3, [r0, #32]
 800a222:	b90b      	cbnz	r3, 800a228 <_vfiprintf_r+0x18>
 800a224:	f7fd fa68 	bl	80076f8 <__sinit>
 800a228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a22a:	07d9      	lsls	r1, r3, #31
 800a22c:	d405      	bmi.n	800a23a <_vfiprintf_r+0x2a>
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	059a      	lsls	r2, r3, #22
 800a232:	d402      	bmi.n	800a23a <_vfiprintf_r+0x2a>
 800a234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a236:	f7fd fc8c 	bl	8007b52 <__retarget_lock_acquire_recursive>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	071b      	lsls	r3, r3, #28
 800a23e:	d501      	bpl.n	800a244 <_vfiprintf_r+0x34>
 800a240:	692b      	ldr	r3, [r5, #16]
 800a242:	b99b      	cbnz	r3, 800a26c <_vfiprintf_r+0x5c>
 800a244:	4629      	mov	r1, r5
 800a246:	4630      	mov	r0, r6
 800a248:	f7fd fba0 	bl	800798c <__swsetup_r>
 800a24c:	b170      	cbz	r0, 800a26c <_vfiprintf_r+0x5c>
 800a24e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a250:	07dc      	lsls	r4, r3, #31
 800a252:	d504      	bpl.n	800a25e <_vfiprintf_r+0x4e>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	b01d      	add	sp, #116	@ 0x74
 800a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	0598      	lsls	r0, r3, #22
 800a262:	d4f7      	bmi.n	800a254 <_vfiprintf_r+0x44>
 800a264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a266:	f7fd fc75 	bl	8007b54 <__retarget_lock_release_recursive>
 800a26a:	e7f3      	b.n	800a254 <_vfiprintf_r+0x44>
 800a26c:	2300      	movs	r3, #0
 800a26e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a270:	2320      	movs	r3, #32
 800a272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a276:	f8cd 800c 	str.w	r8, [sp, #12]
 800a27a:	2330      	movs	r3, #48	@ 0x30
 800a27c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a42c <_vfiprintf_r+0x21c>
 800a280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a284:	f04f 0901 	mov.w	r9, #1
 800a288:	4623      	mov	r3, r4
 800a28a:	469a      	mov	sl, r3
 800a28c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a290:	b10a      	cbz	r2, 800a296 <_vfiprintf_r+0x86>
 800a292:	2a25      	cmp	r2, #37	@ 0x25
 800a294:	d1f9      	bne.n	800a28a <_vfiprintf_r+0x7a>
 800a296:	ebba 0b04 	subs.w	fp, sl, r4
 800a29a:	d00b      	beq.n	800a2b4 <_vfiprintf_r+0xa4>
 800a29c:	465b      	mov	r3, fp
 800a29e:	4622      	mov	r2, r4
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f7ff ffa1 	bl	800a1ea <__sfputs_r>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f000 80a7 	beq.w	800a3fc <_vfiprintf_r+0x1ec>
 800a2ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b0:	445a      	add	r2, fp
 800a2b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 809f 	beq.w	800a3fc <_vfiprintf_r+0x1ec>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c8:	f10a 0a01 	add.w	sl, sl, #1
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	9307      	str	r3, [sp, #28]
 800a2d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2d6:	4654      	mov	r4, sl
 800a2d8:	2205      	movs	r2, #5
 800a2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2de:	4853      	ldr	r0, [pc, #332]	@ (800a42c <_vfiprintf_r+0x21c>)
 800a2e0:	f7f5 ff96 	bl	8000210 <memchr>
 800a2e4:	9a04      	ldr	r2, [sp, #16]
 800a2e6:	b9d8      	cbnz	r0, 800a320 <_vfiprintf_r+0x110>
 800a2e8:	06d1      	lsls	r1, r2, #27
 800a2ea:	bf44      	itt	mi
 800a2ec:	2320      	movmi	r3, #32
 800a2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2f2:	0713      	lsls	r3, r2, #28
 800a2f4:	bf44      	itt	mi
 800a2f6:	232b      	movmi	r3, #43	@ 0x2b
 800a2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a300:	2b2a      	cmp	r3, #42	@ 0x2a
 800a302:	d015      	beq.n	800a330 <_vfiprintf_r+0x120>
 800a304:	9a07      	ldr	r2, [sp, #28]
 800a306:	4654      	mov	r4, sl
 800a308:	2000      	movs	r0, #0
 800a30a:	f04f 0c0a 	mov.w	ip, #10
 800a30e:	4621      	mov	r1, r4
 800a310:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a314:	3b30      	subs	r3, #48	@ 0x30
 800a316:	2b09      	cmp	r3, #9
 800a318:	d94b      	bls.n	800a3b2 <_vfiprintf_r+0x1a2>
 800a31a:	b1b0      	cbz	r0, 800a34a <_vfiprintf_r+0x13a>
 800a31c:	9207      	str	r2, [sp, #28]
 800a31e:	e014      	b.n	800a34a <_vfiprintf_r+0x13a>
 800a320:	eba0 0308 	sub.w	r3, r0, r8
 800a324:	fa09 f303 	lsl.w	r3, r9, r3
 800a328:	4313      	orrs	r3, r2
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	46a2      	mov	sl, r4
 800a32e:	e7d2      	b.n	800a2d6 <_vfiprintf_r+0xc6>
 800a330:	9b03      	ldr	r3, [sp, #12]
 800a332:	1d19      	adds	r1, r3, #4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	9103      	str	r1, [sp, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfbb      	ittet	lt
 800a33c:	425b      	neglt	r3, r3
 800a33e:	f042 0202 	orrlt.w	r2, r2, #2
 800a342:	9307      	strge	r3, [sp, #28]
 800a344:	9307      	strlt	r3, [sp, #28]
 800a346:	bfb8      	it	lt
 800a348:	9204      	strlt	r2, [sp, #16]
 800a34a:	7823      	ldrb	r3, [r4, #0]
 800a34c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a34e:	d10a      	bne.n	800a366 <_vfiprintf_r+0x156>
 800a350:	7863      	ldrb	r3, [r4, #1]
 800a352:	2b2a      	cmp	r3, #42	@ 0x2a
 800a354:	d132      	bne.n	800a3bc <_vfiprintf_r+0x1ac>
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	1d1a      	adds	r2, r3, #4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	9203      	str	r2, [sp, #12]
 800a35e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a362:	3402      	adds	r4, #2
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a43c <_vfiprintf_r+0x22c>
 800a36a:	7821      	ldrb	r1, [r4, #0]
 800a36c:	2203      	movs	r2, #3
 800a36e:	4650      	mov	r0, sl
 800a370:	f7f5 ff4e 	bl	8000210 <memchr>
 800a374:	b138      	cbz	r0, 800a386 <_vfiprintf_r+0x176>
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	eba0 000a 	sub.w	r0, r0, sl
 800a37c:	2240      	movs	r2, #64	@ 0x40
 800a37e:	4082      	lsls	r2, r0
 800a380:	4313      	orrs	r3, r2
 800a382:	3401      	adds	r4, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38a:	4829      	ldr	r0, [pc, #164]	@ (800a430 <_vfiprintf_r+0x220>)
 800a38c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a390:	2206      	movs	r2, #6
 800a392:	f7f5 ff3d 	bl	8000210 <memchr>
 800a396:	2800      	cmp	r0, #0
 800a398:	d03f      	beq.n	800a41a <_vfiprintf_r+0x20a>
 800a39a:	4b26      	ldr	r3, [pc, #152]	@ (800a434 <_vfiprintf_r+0x224>)
 800a39c:	bb1b      	cbnz	r3, 800a3e6 <_vfiprintf_r+0x1d6>
 800a39e:	9b03      	ldr	r3, [sp, #12]
 800a3a0:	3307      	adds	r3, #7
 800a3a2:	f023 0307 	bic.w	r3, r3, #7
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ac:	443b      	add	r3, r7
 800a3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3b0:	e76a      	b.n	800a288 <_vfiprintf_r+0x78>
 800a3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	e7a8      	b.n	800a30e <_vfiprintf_r+0xfe>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	3401      	adds	r4, #1
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f04f 0c0a 	mov.w	ip, #10
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ce:	3a30      	subs	r2, #48	@ 0x30
 800a3d0:	2a09      	cmp	r2, #9
 800a3d2:	d903      	bls.n	800a3dc <_vfiprintf_r+0x1cc>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0c6      	beq.n	800a366 <_vfiprintf_r+0x156>
 800a3d8:	9105      	str	r1, [sp, #20]
 800a3da:	e7c4      	b.n	800a366 <_vfiprintf_r+0x156>
 800a3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e7f0      	b.n	800a3c8 <_vfiprintf_r+0x1b8>
 800a3e6:	ab03      	add	r3, sp, #12
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	4b12      	ldr	r3, [pc, #72]	@ (800a438 <_vfiprintf_r+0x228>)
 800a3ee:	a904      	add	r1, sp, #16
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7fc fb31 	bl	8006a58 <_printf_float>
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	1c78      	adds	r0, r7, #1
 800a3fa:	d1d6      	bne.n	800a3aa <_vfiprintf_r+0x19a>
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x1fe>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x1fe>
 800a408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a40a:	f7fd fba3 	bl	8007b54 <__retarget_lock_release_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	065b      	lsls	r3, r3, #25
 800a412:	f53f af1f 	bmi.w	800a254 <_vfiprintf_r+0x44>
 800a416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a418:	e71e      	b.n	800a258 <_vfiprintf_r+0x48>
 800a41a:	ab03      	add	r3, sp, #12
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	462a      	mov	r2, r5
 800a420:	4b05      	ldr	r3, [pc, #20]	@ (800a438 <_vfiprintf_r+0x228>)
 800a422:	a904      	add	r1, sp, #16
 800a424:	4630      	mov	r0, r6
 800a426:	f7fc fdaf 	bl	8006f88 <_printf_i>
 800a42a:	e7e4      	b.n	800a3f6 <_vfiprintf_r+0x1e6>
 800a42c:	0800b259 	.word	0x0800b259
 800a430:	0800b263 	.word	0x0800b263
 800a434:	08006a59 	.word	0x08006a59
 800a438:	0800a1eb 	.word	0x0800a1eb
 800a43c:	0800b25f 	.word	0x0800b25f

0800a440 <__sflush_r>:
 800a440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a448:	0716      	lsls	r6, r2, #28
 800a44a:	4605      	mov	r5, r0
 800a44c:	460c      	mov	r4, r1
 800a44e:	d454      	bmi.n	800a4fa <__sflush_r+0xba>
 800a450:	684b      	ldr	r3, [r1, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	dc02      	bgt.n	800a45c <__sflush_r+0x1c>
 800a456:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dd48      	ble.n	800a4ee <__sflush_r+0xae>
 800a45c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a45e:	2e00      	cmp	r6, #0
 800a460:	d045      	beq.n	800a4ee <__sflush_r+0xae>
 800a462:	2300      	movs	r3, #0
 800a464:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a468:	682f      	ldr	r7, [r5, #0]
 800a46a:	6a21      	ldr	r1, [r4, #32]
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	d030      	beq.n	800a4d2 <__sflush_r+0x92>
 800a470:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	0759      	lsls	r1, r3, #29
 800a476:	d505      	bpl.n	800a484 <__sflush_r+0x44>
 800a478:	6863      	ldr	r3, [r4, #4]
 800a47a:	1ad2      	subs	r2, r2, r3
 800a47c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a47e:	b10b      	cbz	r3, 800a484 <__sflush_r+0x44>
 800a480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a482:	1ad2      	subs	r2, r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a488:	6a21      	ldr	r1, [r4, #32]
 800a48a:	4628      	mov	r0, r5
 800a48c:	47b0      	blx	r6
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	d106      	bne.n	800a4a2 <__sflush_r+0x62>
 800a494:	6829      	ldr	r1, [r5, #0]
 800a496:	291d      	cmp	r1, #29
 800a498:	d82b      	bhi.n	800a4f2 <__sflush_r+0xb2>
 800a49a:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <__sflush_r+0x104>)
 800a49c:	40ca      	lsrs	r2, r1
 800a49e:	07d6      	lsls	r6, r2, #31
 800a4a0:	d527      	bpl.n	800a4f2 <__sflush_r+0xb2>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	6062      	str	r2, [r4, #4]
 800a4a6:	04d9      	lsls	r1, r3, #19
 800a4a8:	6922      	ldr	r2, [r4, #16]
 800a4aa:	6022      	str	r2, [r4, #0]
 800a4ac:	d504      	bpl.n	800a4b8 <__sflush_r+0x78>
 800a4ae:	1c42      	adds	r2, r0, #1
 800a4b0:	d101      	bne.n	800a4b6 <__sflush_r+0x76>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b903      	cbnz	r3, 800a4b8 <__sflush_r+0x78>
 800a4b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ba:	602f      	str	r7, [r5, #0]
 800a4bc:	b1b9      	cbz	r1, 800a4ee <__sflush_r+0xae>
 800a4be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4c2:	4299      	cmp	r1, r3
 800a4c4:	d002      	beq.n	800a4cc <__sflush_r+0x8c>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f7fe f9a6 	bl	8008818 <_free_r>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d0:	e00d      	b.n	800a4ee <__sflush_r+0xae>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b0      	blx	r6
 800a4d8:	4602      	mov	r2, r0
 800a4da:	1c50      	adds	r0, r2, #1
 800a4dc:	d1c9      	bne.n	800a472 <__sflush_r+0x32>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0c6      	beq.n	800a472 <__sflush_r+0x32>
 800a4e4:	2b1d      	cmp	r3, #29
 800a4e6:	d001      	beq.n	800a4ec <__sflush_r+0xac>
 800a4e8:	2b16      	cmp	r3, #22
 800a4ea:	d11e      	bne.n	800a52a <__sflush_r+0xea>
 800a4ec:	602f      	str	r7, [r5, #0]
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e022      	b.n	800a538 <__sflush_r+0xf8>
 800a4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f6:	b21b      	sxth	r3, r3
 800a4f8:	e01b      	b.n	800a532 <__sflush_r+0xf2>
 800a4fa:	690f      	ldr	r7, [r1, #16]
 800a4fc:	2f00      	cmp	r7, #0
 800a4fe:	d0f6      	beq.n	800a4ee <__sflush_r+0xae>
 800a500:	0793      	lsls	r3, r2, #30
 800a502:	680e      	ldr	r6, [r1, #0]
 800a504:	bf08      	it	eq
 800a506:	694b      	ldreq	r3, [r1, #20]
 800a508:	600f      	str	r7, [r1, #0]
 800a50a:	bf18      	it	ne
 800a50c:	2300      	movne	r3, #0
 800a50e:	eba6 0807 	sub.w	r8, r6, r7
 800a512:	608b      	str	r3, [r1, #8]
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	dde9      	ble.n	800a4ee <__sflush_r+0xae>
 800a51a:	6a21      	ldr	r1, [r4, #32]
 800a51c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a51e:	4643      	mov	r3, r8
 800a520:	463a      	mov	r2, r7
 800a522:	4628      	mov	r0, r5
 800a524:	47b0      	blx	r6
 800a526:	2800      	cmp	r0, #0
 800a528:	dc08      	bgt.n	800a53c <__sflush_r+0xfc>
 800a52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53c:	4407      	add	r7, r0
 800a53e:	eba8 0800 	sub.w	r8, r8, r0
 800a542:	e7e7      	b.n	800a514 <__sflush_r+0xd4>
 800a544:	20400001 	.word	0x20400001

0800a548 <_fflush_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	690b      	ldr	r3, [r1, #16]
 800a54c:	4605      	mov	r5, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	b913      	cbnz	r3, 800a558 <_fflush_r+0x10>
 800a552:	2500      	movs	r5, #0
 800a554:	4628      	mov	r0, r5
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	b118      	cbz	r0, 800a562 <_fflush_r+0x1a>
 800a55a:	6a03      	ldr	r3, [r0, #32]
 800a55c:	b90b      	cbnz	r3, 800a562 <_fflush_r+0x1a>
 800a55e:	f7fd f8cb 	bl	80076f8 <__sinit>
 800a562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0f3      	beq.n	800a552 <_fflush_r+0xa>
 800a56a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a56c:	07d0      	lsls	r0, r2, #31
 800a56e:	d404      	bmi.n	800a57a <_fflush_r+0x32>
 800a570:	0599      	lsls	r1, r3, #22
 800a572:	d402      	bmi.n	800a57a <_fflush_r+0x32>
 800a574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a576:	f7fd faec 	bl	8007b52 <__retarget_lock_acquire_recursive>
 800a57a:	4628      	mov	r0, r5
 800a57c:	4621      	mov	r1, r4
 800a57e:	f7ff ff5f 	bl	800a440 <__sflush_r>
 800a582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a584:	07da      	lsls	r2, r3, #31
 800a586:	4605      	mov	r5, r0
 800a588:	d4e4      	bmi.n	800a554 <_fflush_r+0xc>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	059b      	lsls	r3, r3, #22
 800a58e:	d4e1      	bmi.n	800a554 <_fflush_r+0xc>
 800a590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a592:	f7fd fadf 	bl	8007b54 <__retarget_lock_release_recursive>
 800a596:	e7dd      	b.n	800a554 <_fflush_r+0xc>

0800a598 <__swhatbuf_r>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	460c      	mov	r4, r1
 800a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a0:	2900      	cmp	r1, #0
 800a5a2:	b096      	sub	sp, #88	@ 0x58
 800a5a4:	4615      	mov	r5, r2
 800a5a6:	461e      	mov	r6, r3
 800a5a8:	da0d      	bge.n	800a5c6 <__swhatbuf_r+0x2e>
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5b0:	f04f 0100 	mov.w	r1, #0
 800a5b4:	bf14      	ite	ne
 800a5b6:	2340      	movne	r3, #64	@ 0x40
 800a5b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5bc:	2000      	movs	r0, #0
 800a5be:	6031      	str	r1, [r6, #0]
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	b016      	add	sp, #88	@ 0x58
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	466a      	mov	r2, sp
 800a5c8:	f000 f874 	bl	800a6b4 <_fstat_r>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	dbec      	blt.n	800a5aa <__swhatbuf_r+0x12>
 800a5d0:	9901      	ldr	r1, [sp, #4]
 800a5d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5da:	4259      	negs	r1, r3
 800a5dc:	4159      	adcs	r1, r3
 800a5de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e2:	e7eb      	b.n	800a5bc <__swhatbuf_r+0x24>

0800a5e4 <__smakebuf_r>:
 800a5e4:	898b      	ldrh	r3, [r1, #12]
 800a5e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e8:	079d      	lsls	r5, r3, #30
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	d507      	bpl.n	800a600 <__smakebuf_r+0x1c>
 800a5f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	6163      	str	r3, [r4, #20]
 800a5fc:	b003      	add	sp, #12
 800a5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a600:	ab01      	add	r3, sp, #4
 800a602:	466a      	mov	r2, sp
 800a604:	f7ff ffc8 	bl	800a598 <__swhatbuf_r>
 800a608:	9f00      	ldr	r7, [sp, #0]
 800a60a:	4605      	mov	r5, r0
 800a60c:	4639      	mov	r1, r7
 800a60e:	4630      	mov	r0, r6
 800a610:	f7fc f8f6 	bl	8006800 <_malloc_r>
 800a614:	b948      	cbnz	r0, 800a62a <__smakebuf_r+0x46>
 800a616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61a:	059a      	lsls	r2, r3, #22
 800a61c:	d4ee      	bmi.n	800a5fc <__smakebuf_r+0x18>
 800a61e:	f023 0303 	bic.w	r3, r3, #3
 800a622:	f043 0302 	orr.w	r3, r3, #2
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	e7e2      	b.n	800a5f0 <__smakebuf_r+0xc>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	6020      	str	r0, [r4, #0]
 800a62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	9b01      	ldr	r3, [sp, #4]
 800a636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a63a:	b15b      	cbz	r3, 800a654 <__smakebuf_r+0x70>
 800a63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f849 	bl	800a6d8 <_isatty_r>
 800a646:	b128      	cbz	r0, 800a654 <__smakebuf_r+0x70>
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	431d      	orrs	r5, r3
 800a658:	81a5      	strh	r5, [r4, #12]
 800a65a:	e7cf      	b.n	800a5fc <__smakebuf_r+0x18>

0800a65c <memmove>:
 800a65c:	4288      	cmp	r0, r1
 800a65e:	b510      	push	{r4, lr}
 800a660:	eb01 0402 	add.w	r4, r1, r2
 800a664:	d902      	bls.n	800a66c <memmove+0x10>
 800a666:	4284      	cmp	r4, r0
 800a668:	4623      	mov	r3, r4
 800a66a:	d807      	bhi.n	800a67c <memmove+0x20>
 800a66c:	1e43      	subs	r3, r0, #1
 800a66e:	42a1      	cmp	r1, r4
 800a670:	d008      	beq.n	800a684 <memmove+0x28>
 800a672:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a67a:	e7f8      	b.n	800a66e <memmove+0x12>
 800a67c:	4402      	add	r2, r0
 800a67e:	4601      	mov	r1, r0
 800a680:	428a      	cmp	r2, r1
 800a682:	d100      	bne.n	800a686 <memmove+0x2a>
 800a684:	bd10      	pop	{r4, pc}
 800a686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a68a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a68e:	e7f7      	b.n	800a680 <memmove+0x24>

0800a690 <strncmp>:
 800a690:	b510      	push	{r4, lr}
 800a692:	b16a      	cbz	r2, 800a6b0 <strncmp+0x20>
 800a694:	3901      	subs	r1, #1
 800a696:	1884      	adds	r4, r0, r2
 800a698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a69c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d103      	bne.n	800a6ac <strncmp+0x1c>
 800a6a4:	42a0      	cmp	r0, r4
 800a6a6:	d001      	beq.n	800a6ac <strncmp+0x1c>
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	d1f5      	bne.n	800a698 <strncmp+0x8>
 800a6ac:	1ad0      	subs	r0, r2, r3
 800a6ae:	bd10      	pop	{r4, pc}
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	e7fc      	b.n	800a6ae <strncmp+0x1e>

0800a6b4 <_fstat_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	@ (800a6d4 <_fstat_r+0x20>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	4611      	mov	r1, r2
 800a6c0:	602b      	str	r3, [r5, #0]
 800a6c2:	f7f8 f87b 	bl	80027bc <_fstat>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	d102      	bne.n	800a6d0 <_fstat_r+0x1c>
 800a6ca:	682b      	ldr	r3, [r5, #0]
 800a6cc:	b103      	cbz	r3, 800a6d0 <_fstat_r+0x1c>
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	bd38      	pop	{r3, r4, r5, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20001534 	.word	0x20001534

0800a6d8 <_isatty_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	@ (800a6f4 <_isatty_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f8 f87a 	bl	80027dc <_isatty>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_isatty_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_isatty_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20001534 	.word	0x20001534

0800a6f8 <memcpy>:
 800a6f8:	440a      	add	r2, r1
 800a6fa:	4291      	cmp	r1, r2
 800a6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a700:	d100      	bne.n	800a704 <memcpy+0xc>
 800a702:	4770      	bx	lr
 800a704:	b510      	push	{r4, lr}
 800a706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a70e:	4291      	cmp	r1, r2
 800a710:	d1f9      	bne.n	800a706 <memcpy+0xe>
 800a712:	bd10      	pop	{r4, pc}
 800a714:	0000      	movs	r0, r0
	...

0800a718 <nan>:
 800a718:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a720 <nan+0x8>
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	00000000 	.word	0x00000000
 800a724:	7ff80000 	.word	0x7ff80000

0800a728 <__assert_func>:
 800a728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a72a:	4614      	mov	r4, r2
 800a72c:	461a      	mov	r2, r3
 800a72e:	4b09      	ldr	r3, [pc, #36]	@ (800a754 <__assert_func+0x2c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4605      	mov	r5, r0
 800a734:	68d8      	ldr	r0, [r3, #12]
 800a736:	b14c      	cbz	r4, 800a74c <__assert_func+0x24>
 800a738:	4b07      	ldr	r3, [pc, #28]	@ (800a758 <__assert_func+0x30>)
 800a73a:	9100      	str	r1, [sp, #0]
 800a73c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a740:	4906      	ldr	r1, [pc, #24]	@ (800a75c <__assert_func+0x34>)
 800a742:	462b      	mov	r3, r5
 800a744:	f000 fba8 	bl	800ae98 <fiprintf>
 800a748:	f000 fbb8 	bl	800aebc <abort>
 800a74c:	4b04      	ldr	r3, [pc, #16]	@ (800a760 <__assert_func+0x38>)
 800a74e:	461c      	mov	r4, r3
 800a750:	e7f3      	b.n	800a73a <__assert_func+0x12>
 800a752:	bf00      	nop
 800a754:	2000001c 	.word	0x2000001c
 800a758:	0800b272 	.word	0x0800b272
 800a75c:	0800b27f 	.word	0x0800b27f
 800a760:	0800b2ad 	.word	0x0800b2ad

0800a764 <_calloc_r>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	fba1 5402 	umull	r5, r4, r1, r2
 800a76a:	b934      	cbnz	r4, 800a77a <_calloc_r+0x16>
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7fc f847 	bl	8006800 <_malloc_r>
 800a772:	4606      	mov	r6, r0
 800a774:	b928      	cbnz	r0, 800a782 <_calloc_r+0x1e>
 800a776:	4630      	mov	r0, r6
 800a778:	bd70      	pop	{r4, r5, r6, pc}
 800a77a:	220c      	movs	r2, #12
 800a77c:	6002      	str	r2, [r0, #0]
 800a77e:	2600      	movs	r6, #0
 800a780:	e7f9      	b.n	800a776 <_calloc_r+0x12>
 800a782:	462a      	mov	r2, r5
 800a784:	4621      	mov	r1, r4
 800a786:	f7fd f957 	bl	8007a38 <memset>
 800a78a:	e7f4      	b.n	800a776 <_calloc_r+0x12>

0800a78c <rshift>:
 800a78c:	6903      	ldr	r3, [r0, #16]
 800a78e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a796:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a79a:	f100 0414 	add.w	r4, r0, #20
 800a79e:	dd45      	ble.n	800a82c <rshift+0xa0>
 800a7a0:	f011 011f 	ands.w	r1, r1, #31
 800a7a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7ac:	d10c      	bne.n	800a7c8 <rshift+0x3c>
 800a7ae:	f100 0710 	add.w	r7, r0, #16
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	42b1      	cmp	r1, r6
 800a7b6:	d334      	bcc.n	800a822 <rshift+0x96>
 800a7b8:	1a9b      	subs	r3, r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	1eea      	subs	r2, r5, #3
 800a7be:	4296      	cmp	r6, r2
 800a7c0:	bf38      	it	cc
 800a7c2:	2300      	movcc	r3, #0
 800a7c4:	4423      	add	r3, r4
 800a7c6:	e015      	b.n	800a7f4 <rshift+0x68>
 800a7c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7cc:	f1c1 0820 	rsb	r8, r1, #32
 800a7d0:	40cf      	lsrs	r7, r1
 800a7d2:	f105 0e04 	add.w	lr, r5, #4
 800a7d6:	46a1      	mov	r9, r4
 800a7d8:	4576      	cmp	r6, lr
 800a7da:	46f4      	mov	ip, lr
 800a7dc:	d815      	bhi.n	800a80a <rshift+0x7e>
 800a7de:	1a9a      	subs	r2, r3, r2
 800a7e0:	0092      	lsls	r2, r2, #2
 800a7e2:	3a04      	subs	r2, #4
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	42ae      	cmp	r6, r5
 800a7e8:	bf38      	it	cc
 800a7ea:	2200      	movcc	r2, #0
 800a7ec:	18a3      	adds	r3, r4, r2
 800a7ee:	50a7      	str	r7, [r4, r2]
 800a7f0:	b107      	cbz	r7, 800a7f4 <rshift+0x68>
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	1b1a      	subs	r2, r3, r4
 800a7f6:	42a3      	cmp	r3, r4
 800a7f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7fc:	bf08      	it	eq
 800a7fe:	2300      	moveq	r3, #0
 800a800:	6102      	str	r2, [r0, #16]
 800a802:	bf08      	it	eq
 800a804:	6143      	streq	r3, [r0, #20]
 800a806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a80a:	f8dc c000 	ldr.w	ip, [ip]
 800a80e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a812:	ea4c 0707 	orr.w	r7, ip, r7
 800a816:	f849 7b04 	str.w	r7, [r9], #4
 800a81a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a81e:	40cf      	lsrs	r7, r1
 800a820:	e7da      	b.n	800a7d8 <rshift+0x4c>
 800a822:	f851 cb04 	ldr.w	ip, [r1], #4
 800a826:	f847 cf04 	str.w	ip, [r7, #4]!
 800a82a:	e7c3      	b.n	800a7b4 <rshift+0x28>
 800a82c:	4623      	mov	r3, r4
 800a82e:	e7e1      	b.n	800a7f4 <rshift+0x68>

0800a830 <__hexdig_fun>:
 800a830:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a834:	2b09      	cmp	r3, #9
 800a836:	d802      	bhi.n	800a83e <__hexdig_fun+0xe>
 800a838:	3820      	subs	r0, #32
 800a83a:	b2c0      	uxtb	r0, r0
 800a83c:	4770      	bx	lr
 800a83e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a842:	2b05      	cmp	r3, #5
 800a844:	d801      	bhi.n	800a84a <__hexdig_fun+0x1a>
 800a846:	3847      	subs	r0, #71	@ 0x47
 800a848:	e7f7      	b.n	800a83a <__hexdig_fun+0xa>
 800a84a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a84e:	2b05      	cmp	r3, #5
 800a850:	d801      	bhi.n	800a856 <__hexdig_fun+0x26>
 800a852:	3827      	subs	r0, #39	@ 0x27
 800a854:	e7f1      	b.n	800a83a <__hexdig_fun+0xa>
 800a856:	2000      	movs	r0, #0
 800a858:	4770      	bx	lr
	...

0800a85c <__gethex>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	b085      	sub	sp, #20
 800a862:	468a      	mov	sl, r1
 800a864:	9302      	str	r3, [sp, #8]
 800a866:	680b      	ldr	r3, [r1, #0]
 800a868:	9001      	str	r0, [sp, #4]
 800a86a:	4690      	mov	r8, r2
 800a86c:	1c9c      	adds	r4, r3, #2
 800a86e:	46a1      	mov	r9, r4
 800a870:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a874:	2830      	cmp	r0, #48	@ 0x30
 800a876:	d0fa      	beq.n	800a86e <__gethex+0x12>
 800a878:	eba9 0303 	sub.w	r3, r9, r3
 800a87c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a880:	f7ff ffd6 	bl	800a830 <__hexdig_fun>
 800a884:	4605      	mov	r5, r0
 800a886:	2800      	cmp	r0, #0
 800a888:	d168      	bne.n	800a95c <__gethex+0x100>
 800a88a:	49a0      	ldr	r1, [pc, #640]	@ (800ab0c <__gethex+0x2b0>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	4648      	mov	r0, r9
 800a890:	f7ff fefe 	bl	800a690 <strncmp>
 800a894:	4607      	mov	r7, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d167      	bne.n	800a96a <__gethex+0x10e>
 800a89a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a89e:	4626      	mov	r6, r4
 800a8a0:	f7ff ffc6 	bl	800a830 <__hexdig_fun>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d062      	beq.n	800a96e <__gethex+0x112>
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	7818      	ldrb	r0, [r3, #0]
 800a8ac:	2830      	cmp	r0, #48	@ 0x30
 800a8ae:	4699      	mov	r9, r3
 800a8b0:	f103 0301 	add.w	r3, r3, #1
 800a8b4:	d0f9      	beq.n	800a8aa <__gethex+0x4e>
 800a8b6:	f7ff ffbb 	bl	800a830 <__hexdig_fun>
 800a8ba:	fab0 f580 	clz	r5, r0
 800a8be:	096d      	lsrs	r5, r5, #5
 800a8c0:	f04f 0b01 	mov.w	fp, #1
 800a8c4:	464a      	mov	r2, r9
 800a8c6:	4616      	mov	r6, r2
 800a8c8:	3201      	adds	r2, #1
 800a8ca:	7830      	ldrb	r0, [r6, #0]
 800a8cc:	f7ff ffb0 	bl	800a830 <__hexdig_fun>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1f8      	bne.n	800a8c6 <__gethex+0x6a>
 800a8d4:	498d      	ldr	r1, [pc, #564]	@ (800ab0c <__gethex+0x2b0>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f7ff fed9 	bl	800a690 <strncmp>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d13f      	bne.n	800a962 <__gethex+0x106>
 800a8e2:	b944      	cbnz	r4, 800a8f6 <__gethex+0x9a>
 800a8e4:	1c74      	adds	r4, r6, #1
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	7830      	ldrb	r0, [r6, #0]
 800a8ee:	f7ff ff9f 	bl	800a830 <__hexdig_fun>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d1f8      	bne.n	800a8e8 <__gethex+0x8c>
 800a8f6:	1ba4      	subs	r4, r4, r6
 800a8f8:	00a7      	lsls	r7, r4, #2
 800a8fa:	7833      	ldrb	r3, [r6, #0]
 800a8fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a900:	2b50      	cmp	r3, #80	@ 0x50
 800a902:	d13e      	bne.n	800a982 <__gethex+0x126>
 800a904:	7873      	ldrb	r3, [r6, #1]
 800a906:	2b2b      	cmp	r3, #43	@ 0x2b
 800a908:	d033      	beq.n	800a972 <__gethex+0x116>
 800a90a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a90c:	d034      	beq.n	800a978 <__gethex+0x11c>
 800a90e:	1c71      	adds	r1, r6, #1
 800a910:	2400      	movs	r4, #0
 800a912:	7808      	ldrb	r0, [r1, #0]
 800a914:	f7ff ff8c 	bl	800a830 <__hexdig_fun>
 800a918:	1e43      	subs	r3, r0, #1
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b18      	cmp	r3, #24
 800a91e:	d830      	bhi.n	800a982 <__gethex+0x126>
 800a920:	f1a0 0210 	sub.w	r2, r0, #16
 800a924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a928:	f7ff ff82 	bl	800a830 <__hexdig_fun>
 800a92c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a930:	fa5f fc8c 	uxtb.w	ip, ip
 800a934:	f1bc 0f18 	cmp.w	ip, #24
 800a938:	f04f 030a 	mov.w	r3, #10
 800a93c:	d91e      	bls.n	800a97c <__gethex+0x120>
 800a93e:	b104      	cbz	r4, 800a942 <__gethex+0xe6>
 800a940:	4252      	negs	r2, r2
 800a942:	4417      	add	r7, r2
 800a944:	f8ca 1000 	str.w	r1, [sl]
 800a948:	b1ed      	cbz	r5, 800a986 <__gethex+0x12a>
 800a94a:	f1bb 0f00 	cmp.w	fp, #0
 800a94e:	bf0c      	ite	eq
 800a950:	2506      	moveq	r5, #6
 800a952:	2500      	movne	r5, #0
 800a954:	4628      	mov	r0, r5
 800a956:	b005      	add	sp, #20
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	2500      	movs	r5, #0
 800a95e:	462c      	mov	r4, r5
 800a960:	e7b0      	b.n	800a8c4 <__gethex+0x68>
 800a962:	2c00      	cmp	r4, #0
 800a964:	d1c7      	bne.n	800a8f6 <__gethex+0x9a>
 800a966:	4627      	mov	r7, r4
 800a968:	e7c7      	b.n	800a8fa <__gethex+0x9e>
 800a96a:	464e      	mov	r6, r9
 800a96c:	462f      	mov	r7, r5
 800a96e:	2501      	movs	r5, #1
 800a970:	e7c3      	b.n	800a8fa <__gethex+0x9e>
 800a972:	2400      	movs	r4, #0
 800a974:	1cb1      	adds	r1, r6, #2
 800a976:	e7cc      	b.n	800a912 <__gethex+0xb6>
 800a978:	2401      	movs	r4, #1
 800a97a:	e7fb      	b.n	800a974 <__gethex+0x118>
 800a97c:	fb03 0002 	mla	r0, r3, r2, r0
 800a980:	e7ce      	b.n	800a920 <__gethex+0xc4>
 800a982:	4631      	mov	r1, r6
 800a984:	e7de      	b.n	800a944 <__gethex+0xe8>
 800a986:	eba6 0309 	sub.w	r3, r6, r9
 800a98a:	3b01      	subs	r3, #1
 800a98c:	4629      	mov	r1, r5
 800a98e:	2b07      	cmp	r3, #7
 800a990:	dc0a      	bgt.n	800a9a8 <__gethex+0x14c>
 800a992:	9801      	ldr	r0, [sp, #4]
 800a994:	f7fd ff8a 	bl	80088ac <_Balloc>
 800a998:	4604      	mov	r4, r0
 800a99a:	b940      	cbnz	r0, 800a9ae <__gethex+0x152>
 800a99c:	4b5c      	ldr	r3, [pc, #368]	@ (800ab10 <__gethex+0x2b4>)
 800a99e:	4602      	mov	r2, r0
 800a9a0:	21e4      	movs	r1, #228	@ 0xe4
 800a9a2:	485c      	ldr	r0, [pc, #368]	@ (800ab14 <__gethex+0x2b8>)
 800a9a4:	f7ff fec0 	bl	800a728 <__assert_func>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	105b      	asrs	r3, r3, #1
 800a9ac:	e7ef      	b.n	800a98e <__gethex+0x132>
 800a9ae:	f100 0a14 	add.w	sl, r0, #20
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4655      	mov	r5, sl
 800a9b6:	469b      	mov	fp, r3
 800a9b8:	45b1      	cmp	r9, r6
 800a9ba:	d337      	bcc.n	800aa2c <__gethex+0x1d0>
 800a9bc:	f845 bb04 	str.w	fp, [r5], #4
 800a9c0:	eba5 050a 	sub.w	r5, r5, sl
 800a9c4:	10ad      	asrs	r5, r5, #2
 800a9c6:	6125      	str	r5, [r4, #16]
 800a9c8:	4658      	mov	r0, fp
 800a9ca:	f7fe f861 	bl	8008a90 <__hi0bits>
 800a9ce:	016d      	lsls	r5, r5, #5
 800a9d0:	f8d8 6000 	ldr.w	r6, [r8]
 800a9d4:	1a2d      	subs	r5, r5, r0
 800a9d6:	42b5      	cmp	r5, r6
 800a9d8:	dd54      	ble.n	800aa84 <__gethex+0x228>
 800a9da:	1bad      	subs	r5, r5, r6
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7fe fbed 	bl	80091be <__any_on>
 800a9e4:	4681      	mov	r9, r0
 800a9e6:	b178      	cbz	r0, 800aa08 <__gethex+0x1ac>
 800a9e8:	1e6b      	subs	r3, r5, #1
 800a9ea:	1159      	asrs	r1, r3, #5
 800a9ec:	f003 021f 	and.w	r2, r3, #31
 800a9f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a9f4:	f04f 0901 	mov.w	r9, #1
 800a9f8:	fa09 f202 	lsl.w	r2, r9, r2
 800a9fc:	420a      	tst	r2, r1
 800a9fe:	d003      	beq.n	800aa08 <__gethex+0x1ac>
 800aa00:	454b      	cmp	r3, r9
 800aa02:	dc36      	bgt.n	800aa72 <__gethex+0x216>
 800aa04:	f04f 0902 	mov.w	r9, #2
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f7ff febe 	bl	800a78c <rshift>
 800aa10:	442f      	add	r7, r5
 800aa12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa16:	42bb      	cmp	r3, r7
 800aa18:	da42      	bge.n	800aaa0 <__gethex+0x244>
 800aa1a:	9801      	ldr	r0, [sp, #4]
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	f7fd ff85 	bl	800892c <_Bfree>
 800aa22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa24:	2300      	movs	r3, #0
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	25a3      	movs	r5, #163	@ 0xa3
 800aa2a:	e793      	b.n	800a954 <__gethex+0xf8>
 800aa2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa30:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa32:	d012      	beq.n	800aa5a <__gethex+0x1fe>
 800aa34:	2b20      	cmp	r3, #32
 800aa36:	d104      	bne.n	800aa42 <__gethex+0x1e6>
 800aa38:	f845 bb04 	str.w	fp, [r5], #4
 800aa3c:	f04f 0b00 	mov.w	fp, #0
 800aa40:	465b      	mov	r3, fp
 800aa42:	7830      	ldrb	r0, [r6, #0]
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	f7ff fef3 	bl	800a830 <__hexdig_fun>
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	f000 000f 	and.w	r0, r0, #15
 800aa50:	4098      	lsls	r0, r3
 800aa52:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa56:	3304      	adds	r3, #4
 800aa58:	e7ae      	b.n	800a9b8 <__gethex+0x15c>
 800aa5a:	45b1      	cmp	r9, r6
 800aa5c:	d8ea      	bhi.n	800aa34 <__gethex+0x1d8>
 800aa5e:	492b      	ldr	r1, [pc, #172]	@ (800ab0c <__gethex+0x2b0>)
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7ff fe13 	bl	800a690 <strncmp>
 800aa6a:	9b03      	ldr	r3, [sp, #12]
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1e1      	bne.n	800aa34 <__gethex+0x1d8>
 800aa70:	e7a2      	b.n	800a9b8 <__gethex+0x15c>
 800aa72:	1ea9      	subs	r1, r5, #2
 800aa74:	4620      	mov	r0, r4
 800aa76:	f7fe fba2 	bl	80091be <__any_on>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d0c2      	beq.n	800aa04 <__gethex+0x1a8>
 800aa7e:	f04f 0903 	mov.w	r9, #3
 800aa82:	e7c1      	b.n	800aa08 <__gethex+0x1ac>
 800aa84:	da09      	bge.n	800aa9a <__gethex+0x23e>
 800aa86:	1b75      	subs	r5, r6, r5
 800aa88:	4621      	mov	r1, r4
 800aa8a:	9801      	ldr	r0, [sp, #4]
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	f7fe f95d 	bl	8008d4c <__lshift>
 800aa92:	1b7f      	subs	r7, r7, r5
 800aa94:	4604      	mov	r4, r0
 800aa96:	f100 0a14 	add.w	sl, r0, #20
 800aa9a:	f04f 0900 	mov.w	r9, #0
 800aa9e:	e7b8      	b.n	800aa12 <__gethex+0x1b6>
 800aaa0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aaa4:	42bd      	cmp	r5, r7
 800aaa6:	dd6f      	ble.n	800ab88 <__gethex+0x32c>
 800aaa8:	1bed      	subs	r5, r5, r7
 800aaaa:	42ae      	cmp	r6, r5
 800aaac:	dc34      	bgt.n	800ab18 <__gethex+0x2bc>
 800aaae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d022      	beq.n	800aafc <__gethex+0x2a0>
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d024      	beq.n	800ab04 <__gethex+0x2a8>
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d115      	bne.n	800aaea <__gethex+0x28e>
 800aabe:	42ae      	cmp	r6, r5
 800aac0:	d113      	bne.n	800aaea <__gethex+0x28e>
 800aac2:	2e01      	cmp	r6, #1
 800aac4:	d10b      	bne.n	800aade <__gethex+0x282>
 800aac6:	9a02      	ldr	r2, [sp, #8]
 800aac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aacc:	6013      	str	r3, [r2, #0]
 800aace:	2301      	movs	r3, #1
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	f8ca 3000 	str.w	r3, [sl]
 800aad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aad8:	2562      	movs	r5, #98	@ 0x62
 800aada:	601c      	str	r4, [r3, #0]
 800aadc:	e73a      	b.n	800a954 <__gethex+0xf8>
 800aade:	1e71      	subs	r1, r6, #1
 800aae0:	4620      	mov	r0, r4
 800aae2:	f7fe fb6c 	bl	80091be <__any_on>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d1ed      	bne.n	800aac6 <__gethex+0x26a>
 800aaea:	9801      	ldr	r0, [sp, #4]
 800aaec:	4621      	mov	r1, r4
 800aaee:	f7fd ff1d 	bl	800892c <_Bfree>
 800aaf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	2550      	movs	r5, #80	@ 0x50
 800aafa:	e72b      	b.n	800a954 <__gethex+0xf8>
 800aafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1f3      	bne.n	800aaea <__gethex+0x28e>
 800ab02:	e7e0      	b.n	800aac6 <__gethex+0x26a>
 800ab04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1dd      	bne.n	800aac6 <__gethex+0x26a>
 800ab0a:	e7ee      	b.n	800aaea <__gethex+0x28e>
 800ab0c:	0800b257 	.word	0x0800b257
 800ab10:	0800b1ed 	.word	0x0800b1ed
 800ab14:	0800b2ae 	.word	0x0800b2ae
 800ab18:	1e6f      	subs	r7, r5, #1
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	d130      	bne.n	800ab82 <__gethex+0x326>
 800ab20:	b127      	cbz	r7, 800ab2c <__gethex+0x2d0>
 800ab22:	4639      	mov	r1, r7
 800ab24:	4620      	mov	r0, r4
 800ab26:	f7fe fb4a 	bl	80091be <__any_on>
 800ab2a:	4681      	mov	r9, r0
 800ab2c:	117a      	asrs	r2, r7, #5
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab34:	f007 071f 	and.w	r7, r7, #31
 800ab38:	40bb      	lsls	r3, r7
 800ab3a:	4213      	tst	r3, r2
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4620      	mov	r0, r4
 800ab40:	bf18      	it	ne
 800ab42:	f049 0902 	orrne.w	r9, r9, #2
 800ab46:	f7ff fe21 	bl	800a78c <rshift>
 800ab4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab4e:	1b76      	subs	r6, r6, r5
 800ab50:	2502      	movs	r5, #2
 800ab52:	f1b9 0f00 	cmp.w	r9, #0
 800ab56:	d047      	beq.n	800abe8 <__gethex+0x38c>
 800ab58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d015      	beq.n	800ab8c <__gethex+0x330>
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d017      	beq.n	800ab94 <__gethex+0x338>
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d109      	bne.n	800ab7c <__gethex+0x320>
 800ab68:	f019 0f02 	tst.w	r9, #2
 800ab6c:	d006      	beq.n	800ab7c <__gethex+0x320>
 800ab6e:	f8da 3000 	ldr.w	r3, [sl]
 800ab72:	ea49 0903 	orr.w	r9, r9, r3
 800ab76:	f019 0f01 	tst.w	r9, #1
 800ab7a:	d10e      	bne.n	800ab9a <__gethex+0x33e>
 800ab7c:	f045 0510 	orr.w	r5, r5, #16
 800ab80:	e032      	b.n	800abe8 <__gethex+0x38c>
 800ab82:	f04f 0901 	mov.w	r9, #1
 800ab86:	e7d1      	b.n	800ab2c <__gethex+0x2d0>
 800ab88:	2501      	movs	r5, #1
 800ab8a:	e7e2      	b.n	800ab52 <__gethex+0x2f6>
 800ab8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab8e:	f1c3 0301 	rsb	r3, r3, #1
 800ab92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0f0      	beq.n	800ab7c <__gethex+0x320>
 800ab9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab9e:	f104 0314 	add.w	r3, r4, #20
 800aba2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aba6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abaa:	f04f 0c00 	mov.w	ip, #0
 800abae:	4618      	mov	r0, r3
 800abb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abb8:	d01b      	beq.n	800abf2 <__gethex+0x396>
 800abba:	3201      	adds	r2, #1
 800abbc:	6002      	str	r2, [r0, #0]
 800abbe:	2d02      	cmp	r5, #2
 800abc0:	f104 0314 	add.w	r3, r4, #20
 800abc4:	d13c      	bne.n	800ac40 <__gethex+0x3e4>
 800abc6:	f8d8 2000 	ldr.w	r2, [r8]
 800abca:	3a01      	subs	r2, #1
 800abcc:	42b2      	cmp	r2, r6
 800abce:	d109      	bne.n	800abe4 <__gethex+0x388>
 800abd0:	1171      	asrs	r1, r6, #5
 800abd2:	2201      	movs	r2, #1
 800abd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abd8:	f006 061f 	and.w	r6, r6, #31
 800abdc:	fa02 f606 	lsl.w	r6, r2, r6
 800abe0:	421e      	tst	r6, r3
 800abe2:	d13a      	bne.n	800ac5a <__gethex+0x3fe>
 800abe4:	f045 0520 	orr.w	r5, r5, #32
 800abe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abea:	601c      	str	r4, [r3, #0]
 800abec:	9b02      	ldr	r3, [sp, #8]
 800abee:	601f      	str	r7, [r3, #0]
 800abf0:	e6b0      	b.n	800a954 <__gethex+0xf8>
 800abf2:	4299      	cmp	r1, r3
 800abf4:	f843 cc04 	str.w	ip, [r3, #-4]
 800abf8:	d8d9      	bhi.n	800abae <__gethex+0x352>
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	459b      	cmp	fp, r3
 800abfe:	db17      	blt.n	800ac30 <__gethex+0x3d4>
 800ac00:	6861      	ldr	r1, [r4, #4]
 800ac02:	9801      	ldr	r0, [sp, #4]
 800ac04:	3101      	adds	r1, #1
 800ac06:	f7fd fe51 	bl	80088ac <_Balloc>
 800ac0a:	4681      	mov	r9, r0
 800ac0c:	b918      	cbnz	r0, 800ac16 <__gethex+0x3ba>
 800ac0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ac78 <__gethex+0x41c>)
 800ac10:	4602      	mov	r2, r0
 800ac12:	2184      	movs	r1, #132	@ 0x84
 800ac14:	e6c5      	b.n	800a9a2 <__gethex+0x146>
 800ac16:	6922      	ldr	r2, [r4, #16]
 800ac18:	3202      	adds	r2, #2
 800ac1a:	f104 010c 	add.w	r1, r4, #12
 800ac1e:	0092      	lsls	r2, r2, #2
 800ac20:	300c      	adds	r0, #12
 800ac22:	f7ff fd69 	bl	800a6f8 <memcpy>
 800ac26:	4621      	mov	r1, r4
 800ac28:	9801      	ldr	r0, [sp, #4]
 800ac2a:	f7fd fe7f 	bl	800892c <_Bfree>
 800ac2e:	464c      	mov	r4, r9
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac38:	6122      	str	r2, [r4, #16]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	615a      	str	r2, [r3, #20]
 800ac3e:	e7be      	b.n	800abbe <__gethex+0x362>
 800ac40:	6922      	ldr	r2, [r4, #16]
 800ac42:	455a      	cmp	r2, fp
 800ac44:	dd0b      	ble.n	800ac5e <__gethex+0x402>
 800ac46:	2101      	movs	r1, #1
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f7ff fd9f 	bl	800a78c <rshift>
 800ac4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac52:	3701      	adds	r7, #1
 800ac54:	42bb      	cmp	r3, r7
 800ac56:	f6ff aee0 	blt.w	800aa1a <__gethex+0x1be>
 800ac5a:	2501      	movs	r5, #1
 800ac5c:	e7c2      	b.n	800abe4 <__gethex+0x388>
 800ac5e:	f016 061f 	ands.w	r6, r6, #31
 800ac62:	d0fa      	beq.n	800ac5a <__gethex+0x3fe>
 800ac64:	4453      	add	r3, sl
 800ac66:	f1c6 0620 	rsb	r6, r6, #32
 800ac6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac6e:	f7fd ff0f 	bl	8008a90 <__hi0bits>
 800ac72:	42b0      	cmp	r0, r6
 800ac74:	dbe7      	blt.n	800ac46 <__gethex+0x3ea>
 800ac76:	e7f0      	b.n	800ac5a <__gethex+0x3fe>
 800ac78:	0800b1ed 	.word	0x0800b1ed

0800ac7c <L_shift>:
 800ac7c:	f1c2 0208 	rsb	r2, r2, #8
 800ac80:	0092      	lsls	r2, r2, #2
 800ac82:	b570      	push	{r4, r5, r6, lr}
 800ac84:	f1c2 0620 	rsb	r6, r2, #32
 800ac88:	6843      	ldr	r3, [r0, #4]
 800ac8a:	6804      	ldr	r4, [r0, #0]
 800ac8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ac90:	432c      	orrs	r4, r5
 800ac92:	40d3      	lsrs	r3, r2
 800ac94:	6004      	str	r4, [r0, #0]
 800ac96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac9a:	4288      	cmp	r0, r1
 800ac9c:	d3f4      	bcc.n	800ac88 <L_shift+0xc>
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}

0800aca0 <__match>:
 800aca0:	b530      	push	{r4, r5, lr}
 800aca2:	6803      	ldr	r3, [r0, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acaa:	b914      	cbnz	r4, 800acb2 <__match+0x12>
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	2001      	movs	r0, #1
 800acb0:	bd30      	pop	{r4, r5, pc}
 800acb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800acba:	2d19      	cmp	r5, #25
 800acbc:	bf98      	it	ls
 800acbe:	3220      	addls	r2, #32
 800acc0:	42a2      	cmp	r2, r4
 800acc2:	d0f0      	beq.n	800aca6 <__match+0x6>
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7f3      	b.n	800acb0 <__match+0x10>

0800acc8 <__hexnan>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	680b      	ldr	r3, [r1, #0]
 800acce:	6801      	ldr	r1, [r0, #0]
 800acd0:	115e      	asrs	r6, r3, #5
 800acd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800acd6:	f013 031f 	ands.w	r3, r3, #31
 800acda:	b087      	sub	sp, #28
 800acdc:	bf18      	it	ne
 800acde:	3604      	addne	r6, #4
 800ace0:	2500      	movs	r5, #0
 800ace2:	1f37      	subs	r7, r6, #4
 800ace4:	4682      	mov	sl, r0
 800ace6:	4690      	mov	r8, r2
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	f846 5c04 	str.w	r5, [r6, #-4]
 800acee:	46b9      	mov	r9, r7
 800acf0:	463c      	mov	r4, r7
 800acf2:	9502      	str	r5, [sp, #8]
 800acf4:	46ab      	mov	fp, r5
 800acf6:	784a      	ldrb	r2, [r1, #1]
 800acf8:	1c4b      	adds	r3, r1, #1
 800acfa:	9303      	str	r3, [sp, #12]
 800acfc:	b342      	cbz	r2, 800ad50 <__hexnan+0x88>
 800acfe:	4610      	mov	r0, r2
 800ad00:	9105      	str	r1, [sp, #20]
 800ad02:	9204      	str	r2, [sp, #16]
 800ad04:	f7ff fd94 	bl	800a830 <__hexdig_fun>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d151      	bne.n	800adb0 <__hexnan+0xe8>
 800ad0c:	9a04      	ldr	r2, [sp, #16]
 800ad0e:	9905      	ldr	r1, [sp, #20]
 800ad10:	2a20      	cmp	r2, #32
 800ad12:	d818      	bhi.n	800ad46 <__hexnan+0x7e>
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	459b      	cmp	fp, r3
 800ad18:	dd13      	ble.n	800ad42 <__hexnan+0x7a>
 800ad1a:	454c      	cmp	r4, r9
 800ad1c:	d206      	bcs.n	800ad2c <__hexnan+0x64>
 800ad1e:	2d07      	cmp	r5, #7
 800ad20:	dc04      	bgt.n	800ad2c <__hexnan+0x64>
 800ad22:	462a      	mov	r2, r5
 800ad24:	4649      	mov	r1, r9
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff ffa8 	bl	800ac7c <L_shift>
 800ad2c:	4544      	cmp	r4, r8
 800ad2e:	d952      	bls.n	800add6 <__hexnan+0x10e>
 800ad30:	2300      	movs	r3, #0
 800ad32:	f1a4 0904 	sub.w	r9, r4, #4
 800ad36:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad3a:	f8cd b008 	str.w	fp, [sp, #8]
 800ad3e:	464c      	mov	r4, r9
 800ad40:	461d      	mov	r5, r3
 800ad42:	9903      	ldr	r1, [sp, #12]
 800ad44:	e7d7      	b.n	800acf6 <__hexnan+0x2e>
 800ad46:	2a29      	cmp	r2, #41	@ 0x29
 800ad48:	d157      	bne.n	800adfa <__hexnan+0x132>
 800ad4a:	3102      	adds	r1, #2
 800ad4c:	f8ca 1000 	str.w	r1, [sl]
 800ad50:	f1bb 0f00 	cmp.w	fp, #0
 800ad54:	d051      	beq.n	800adfa <__hexnan+0x132>
 800ad56:	454c      	cmp	r4, r9
 800ad58:	d206      	bcs.n	800ad68 <__hexnan+0xa0>
 800ad5a:	2d07      	cmp	r5, #7
 800ad5c:	dc04      	bgt.n	800ad68 <__hexnan+0xa0>
 800ad5e:	462a      	mov	r2, r5
 800ad60:	4649      	mov	r1, r9
 800ad62:	4620      	mov	r0, r4
 800ad64:	f7ff ff8a 	bl	800ac7c <L_shift>
 800ad68:	4544      	cmp	r4, r8
 800ad6a:	d936      	bls.n	800adda <__hexnan+0x112>
 800ad6c:	f1a8 0204 	sub.w	r2, r8, #4
 800ad70:	4623      	mov	r3, r4
 800ad72:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad76:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad7a:	429f      	cmp	r7, r3
 800ad7c:	d2f9      	bcs.n	800ad72 <__hexnan+0xaa>
 800ad7e:	1b3b      	subs	r3, r7, r4
 800ad80:	f023 0303 	bic.w	r3, r3, #3
 800ad84:	3304      	adds	r3, #4
 800ad86:	3401      	adds	r4, #1
 800ad88:	3e03      	subs	r6, #3
 800ad8a:	42b4      	cmp	r4, r6
 800ad8c:	bf88      	it	hi
 800ad8e:	2304      	movhi	r3, #4
 800ad90:	4443      	add	r3, r8
 800ad92:	2200      	movs	r2, #0
 800ad94:	f843 2b04 	str.w	r2, [r3], #4
 800ad98:	429f      	cmp	r7, r3
 800ad9a:	d2fb      	bcs.n	800ad94 <__hexnan+0xcc>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	b91b      	cbnz	r3, 800ada8 <__hexnan+0xe0>
 800ada0:	4547      	cmp	r7, r8
 800ada2:	d128      	bne.n	800adf6 <__hexnan+0x12e>
 800ada4:	2301      	movs	r3, #1
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	2005      	movs	r0, #5
 800adaa:	b007      	add	sp, #28
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb0:	3501      	adds	r5, #1
 800adb2:	2d08      	cmp	r5, #8
 800adb4:	f10b 0b01 	add.w	fp, fp, #1
 800adb8:	dd06      	ble.n	800adc8 <__hexnan+0x100>
 800adba:	4544      	cmp	r4, r8
 800adbc:	d9c1      	bls.n	800ad42 <__hexnan+0x7a>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f844 3c04 	str.w	r3, [r4, #-4]
 800adc4:	2501      	movs	r5, #1
 800adc6:	3c04      	subs	r4, #4
 800adc8:	6822      	ldr	r2, [r4, #0]
 800adca:	f000 000f 	and.w	r0, r0, #15
 800adce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800add2:	6020      	str	r0, [r4, #0]
 800add4:	e7b5      	b.n	800ad42 <__hexnan+0x7a>
 800add6:	2508      	movs	r5, #8
 800add8:	e7b3      	b.n	800ad42 <__hexnan+0x7a>
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d0dd      	beq.n	800ad9c <__hexnan+0xd4>
 800ade0:	f1c3 0320 	rsb	r3, r3, #32
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	40da      	lsrs	r2, r3
 800adea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800adee:	4013      	ands	r3, r2
 800adf0:	f846 3c04 	str.w	r3, [r6, #-4]
 800adf4:	e7d2      	b.n	800ad9c <__hexnan+0xd4>
 800adf6:	3f04      	subs	r7, #4
 800adf8:	e7d0      	b.n	800ad9c <__hexnan+0xd4>
 800adfa:	2004      	movs	r0, #4
 800adfc:	e7d5      	b.n	800adaa <__hexnan+0xe2>

0800adfe <__ascii_mbtowc>:
 800adfe:	b082      	sub	sp, #8
 800ae00:	b901      	cbnz	r1, 800ae04 <__ascii_mbtowc+0x6>
 800ae02:	a901      	add	r1, sp, #4
 800ae04:	b142      	cbz	r2, 800ae18 <__ascii_mbtowc+0x1a>
 800ae06:	b14b      	cbz	r3, 800ae1c <__ascii_mbtowc+0x1e>
 800ae08:	7813      	ldrb	r3, [r2, #0]
 800ae0a:	600b      	str	r3, [r1, #0]
 800ae0c:	7812      	ldrb	r2, [r2, #0]
 800ae0e:	1e10      	subs	r0, r2, #0
 800ae10:	bf18      	it	ne
 800ae12:	2001      	movne	r0, #1
 800ae14:	b002      	add	sp, #8
 800ae16:	4770      	bx	lr
 800ae18:	4610      	mov	r0, r2
 800ae1a:	e7fb      	b.n	800ae14 <__ascii_mbtowc+0x16>
 800ae1c:	f06f 0001 	mvn.w	r0, #1
 800ae20:	e7f8      	b.n	800ae14 <__ascii_mbtowc+0x16>

0800ae22 <_realloc_r>:
 800ae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	4607      	mov	r7, r0
 800ae28:	4614      	mov	r4, r2
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	b921      	cbnz	r1, 800ae38 <_realloc_r+0x16>
 800ae2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	4611      	mov	r1, r2
 800ae34:	f7fb bce4 	b.w	8006800 <_malloc_r>
 800ae38:	b92a      	cbnz	r2, 800ae46 <_realloc_r+0x24>
 800ae3a:	f7fd fced 	bl	8008818 <_free_r>
 800ae3e:	4625      	mov	r5, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae46:	f000 f840 	bl	800aeca <_malloc_usable_size_r>
 800ae4a:	4284      	cmp	r4, r0
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	d802      	bhi.n	800ae56 <_realloc_r+0x34>
 800ae50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae54:	d8f4      	bhi.n	800ae40 <_realloc_r+0x1e>
 800ae56:	4621      	mov	r1, r4
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7fb fcd1 	bl	8006800 <_malloc_r>
 800ae5e:	4680      	mov	r8, r0
 800ae60:	b908      	cbnz	r0, 800ae66 <_realloc_r+0x44>
 800ae62:	4645      	mov	r5, r8
 800ae64:	e7ec      	b.n	800ae40 <_realloc_r+0x1e>
 800ae66:	42b4      	cmp	r4, r6
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	bf28      	it	cs
 800ae6e:	4632      	movcs	r2, r6
 800ae70:	f7ff fc42 	bl	800a6f8 <memcpy>
 800ae74:	4629      	mov	r1, r5
 800ae76:	4638      	mov	r0, r7
 800ae78:	f7fd fcce 	bl	8008818 <_free_r>
 800ae7c:	e7f1      	b.n	800ae62 <_realloc_r+0x40>

0800ae7e <__ascii_wctomb>:
 800ae7e:	4603      	mov	r3, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	b141      	cbz	r1, 800ae96 <__ascii_wctomb+0x18>
 800ae84:	2aff      	cmp	r2, #255	@ 0xff
 800ae86:	d904      	bls.n	800ae92 <__ascii_wctomb+0x14>
 800ae88:	228a      	movs	r2, #138	@ 0x8a
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	4770      	bx	lr
 800ae92:	700a      	strb	r2, [r1, #0]
 800ae94:	2001      	movs	r0, #1
 800ae96:	4770      	bx	lr

0800ae98 <fiprintf>:
 800ae98:	b40e      	push	{r1, r2, r3}
 800ae9a:	b503      	push	{r0, r1, lr}
 800ae9c:	4601      	mov	r1, r0
 800ae9e:	ab03      	add	r3, sp, #12
 800aea0:	4805      	ldr	r0, [pc, #20]	@ (800aeb8 <fiprintf+0x20>)
 800aea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea6:	6800      	ldr	r0, [r0, #0]
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	f7ff f9b1 	bl	800a210 <_vfiprintf_r>
 800aeae:	b002      	add	sp, #8
 800aeb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeb4:	b003      	add	sp, #12
 800aeb6:	4770      	bx	lr
 800aeb8:	2000001c 	.word	0x2000001c

0800aebc <abort>:
 800aebc:	b508      	push	{r3, lr}
 800aebe:	2006      	movs	r0, #6
 800aec0:	f000 f834 	bl	800af2c <raise>
 800aec4:	2001      	movs	r0, #1
 800aec6:	f7f7 fc29 	bl	800271c <_exit>

0800aeca <_malloc_usable_size_r>:
 800aeca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aece:	1f18      	subs	r0, r3, #4
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	bfbc      	itt	lt
 800aed4:	580b      	ldrlt	r3, [r1, r0]
 800aed6:	18c0      	addlt	r0, r0, r3
 800aed8:	4770      	bx	lr

0800aeda <_raise_r>:
 800aeda:	291f      	cmp	r1, #31
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4605      	mov	r5, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	d904      	bls.n	800aeee <_raise_r+0x14>
 800aee4:	2316      	movs	r3, #22
 800aee6:	6003      	str	r3, [r0, #0]
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	bd38      	pop	{r3, r4, r5, pc}
 800aeee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aef0:	b112      	cbz	r2, 800aef8 <_raise_r+0x1e>
 800aef2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aef6:	b94b      	cbnz	r3, 800af0c <_raise_r+0x32>
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 f831 	bl	800af60 <_getpid_r>
 800aefe:	4622      	mov	r2, r4
 800af00:	4601      	mov	r1, r0
 800af02:	4628      	mov	r0, r5
 800af04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af08:	f000 b818 	b.w	800af3c <_kill_r>
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d00a      	beq.n	800af26 <_raise_r+0x4c>
 800af10:	1c59      	adds	r1, r3, #1
 800af12:	d103      	bne.n	800af1c <_raise_r+0x42>
 800af14:	2316      	movs	r3, #22
 800af16:	6003      	str	r3, [r0, #0]
 800af18:	2001      	movs	r0, #1
 800af1a:	e7e7      	b.n	800aeec <_raise_r+0x12>
 800af1c:	2100      	movs	r1, #0
 800af1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af22:	4620      	mov	r0, r4
 800af24:	4798      	blx	r3
 800af26:	2000      	movs	r0, #0
 800af28:	e7e0      	b.n	800aeec <_raise_r+0x12>
	...

0800af2c <raise>:
 800af2c:	4b02      	ldr	r3, [pc, #8]	@ (800af38 <raise+0xc>)
 800af2e:	4601      	mov	r1, r0
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	f7ff bfd2 	b.w	800aeda <_raise_r>
 800af36:	bf00      	nop
 800af38:	2000001c 	.word	0x2000001c

0800af3c <_kill_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	@ (800af5c <_kill_r+0x20>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	4611      	mov	r1, r2
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	f7f7 fbd7 	bl	80026fc <_kill>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	d102      	bne.n	800af58 <_kill_r+0x1c>
 800af52:	682b      	ldr	r3, [r5, #0]
 800af54:	b103      	cbz	r3, 800af58 <_kill_r+0x1c>
 800af56:	6023      	str	r3, [r4, #0]
 800af58:	bd38      	pop	{r3, r4, r5, pc}
 800af5a:	bf00      	nop
 800af5c:	20001534 	.word	0x20001534

0800af60 <_getpid_r>:
 800af60:	f7f7 bbc4 	b.w	80026ec <_getpid>
 800af64:	0000      	movs	r0, r0
	...

0800af68 <floor>:
 800af68:	ec51 0b10 	vmov	r0, r1, d0
 800af6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af74:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800af78:	2e13      	cmp	r6, #19
 800af7a:	460c      	mov	r4, r1
 800af7c:	4605      	mov	r5, r0
 800af7e:	4680      	mov	r8, r0
 800af80:	dc34      	bgt.n	800afec <floor+0x84>
 800af82:	2e00      	cmp	r6, #0
 800af84:	da17      	bge.n	800afb6 <floor+0x4e>
 800af86:	a332      	add	r3, pc, #200	@ (adr r3, 800b050 <floor+0xe8>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 f99e 	bl	80002cc <__adddf3>
 800af90:	2200      	movs	r2, #0
 800af92:	2300      	movs	r3, #0
 800af94:	f7f5 fde0 	bl	8000b58 <__aeabi_dcmpgt>
 800af98:	b150      	cbz	r0, 800afb0 <floor+0x48>
 800af9a:	2c00      	cmp	r4, #0
 800af9c:	da55      	bge.n	800b04a <floor+0xe2>
 800af9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800afa2:	432c      	orrs	r4, r5
 800afa4:	2500      	movs	r5, #0
 800afa6:	42ac      	cmp	r4, r5
 800afa8:	4c2b      	ldr	r4, [pc, #172]	@ (800b058 <floor+0xf0>)
 800afaa:	bf08      	it	eq
 800afac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	e023      	b.n	800affe <floor+0x96>
 800afb6:	4f29      	ldr	r7, [pc, #164]	@ (800b05c <floor+0xf4>)
 800afb8:	4137      	asrs	r7, r6
 800afba:	ea01 0307 	and.w	r3, r1, r7
 800afbe:	4303      	orrs	r3, r0
 800afc0:	d01d      	beq.n	800affe <floor+0x96>
 800afc2:	a323      	add	r3, pc, #140	@ (adr r3, 800b050 <floor+0xe8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 f980 	bl	80002cc <__adddf3>
 800afcc:	2200      	movs	r2, #0
 800afce:	2300      	movs	r3, #0
 800afd0:	f7f5 fdc2 	bl	8000b58 <__aeabi_dcmpgt>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d0eb      	beq.n	800afb0 <floor+0x48>
 800afd8:	2c00      	cmp	r4, #0
 800afda:	bfbe      	ittt	lt
 800afdc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800afe0:	4133      	asrlt	r3, r6
 800afe2:	18e4      	addlt	r4, r4, r3
 800afe4:	ea24 0407 	bic.w	r4, r4, r7
 800afe8:	2500      	movs	r5, #0
 800afea:	e7e1      	b.n	800afb0 <floor+0x48>
 800afec:	2e33      	cmp	r6, #51	@ 0x33
 800afee:	dd0a      	ble.n	800b006 <floor+0x9e>
 800aff0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800aff4:	d103      	bne.n	800affe <floor+0x96>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	f7f5 f967 	bl	80002cc <__adddf3>
 800affe:	ec41 0b10 	vmov	d0, r0, r1
 800b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b006:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b00a:	f04f 37ff 	mov.w	r7, #4294967295
 800b00e:	40df      	lsrs	r7, r3
 800b010:	4207      	tst	r7, r0
 800b012:	d0f4      	beq.n	800affe <floor+0x96>
 800b014:	a30e      	add	r3, pc, #56	@ (adr r3, 800b050 <floor+0xe8>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 f957 	bl	80002cc <__adddf3>
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	f7f5 fd99 	bl	8000b58 <__aeabi_dcmpgt>
 800b026:	2800      	cmp	r0, #0
 800b028:	d0c2      	beq.n	800afb0 <floor+0x48>
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	da0a      	bge.n	800b044 <floor+0xdc>
 800b02e:	2e14      	cmp	r6, #20
 800b030:	d101      	bne.n	800b036 <floor+0xce>
 800b032:	3401      	adds	r4, #1
 800b034:	e006      	b.n	800b044 <floor+0xdc>
 800b036:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b03a:	2301      	movs	r3, #1
 800b03c:	40b3      	lsls	r3, r6
 800b03e:	441d      	add	r5, r3
 800b040:	4545      	cmp	r5, r8
 800b042:	d3f6      	bcc.n	800b032 <floor+0xca>
 800b044:	ea25 0507 	bic.w	r5, r5, r7
 800b048:	e7b2      	b.n	800afb0 <floor+0x48>
 800b04a:	2500      	movs	r5, #0
 800b04c:	462c      	mov	r4, r5
 800b04e:	e7af      	b.n	800afb0 <floor+0x48>
 800b050:	8800759c 	.word	0x8800759c
 800b054:	7e37e43c 	.word	0x7e37e43c
 800b058:	bff00000 	.word	0xbff00000
 800b05c:	000fffff 	.word	0x000fffff

0800b060 <_init>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	bf00      	nop
 800b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b066:	bc08      	pop	{r3}
 800b068:	469e      	mov	lr, r3
 800b06a:	4770      	bx	lr

0800b06c <_fini>:
 800b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06e:	bf00      	nop
 800b070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b072:	bc08      	pop	{r3}
 800b074:	469e      	mov	lr, r3
 800b076:	4770      	bx	lr
