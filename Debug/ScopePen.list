
ScopePen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080058a8  080058a8  000068a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e0  080058e0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e8  080058e8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e8  080058e8  000068e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080058f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000068  08005958  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005958  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca74  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f85  00000000  00000000  00013b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00015a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b6  00000000  00000000  000165c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022918  00000000  00000000  00016e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f526  00000000  00000000  00039796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce717  00000000  00000000  00048cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001173d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  00117418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011aa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005890 	.word	0x08005890

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	08005890 	.word	0x08005890

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b988 	b.w	8000c4c <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	468e      	mov	lr, r1
 800095c:	4604      	mov	r4, r0
 800095e:	4688      	mov	r8, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d14a      	bne.n	80009fa <__udivmoddi4+0xa6>
 8000964:	428a      	cmp	r2, r1
 8000966:	4617      	mov	r7, r2
 8000968:	d962      	bls.n	8000a30 <__udivmoddi4+0xdc>
 800096a:	fab2 f682 	clz	r6, r2
 800096e:	b14e      	cbz	r6, 8000984 <__udivmoddi4+0x30>
 8000970:	f1c6 0320 	rsb	r3, r6, #32
 8000974:	fa01 f806 	lsl.w	r8, r1, r6
 8000978:	fa20 f303 	lsr.w	r3, r0, r3
 800097c:	40b7      	lsls	r7, r6
 800097e:	ea43 0808 	orr.w	r8, r3, r8
 8000982:	40b4      	lsls	r4, r6
 8000984:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000988:	fa1f fc87 	uxth.w	ip, r7
 800098c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000990:	0c23      	lsrs	r3, r4, #16
 8000992:	fb0e 8811 	mls	r8, lr, r1, r8
 8000996:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800099a:	fb01 f20c 	mul.w	r2, r1, ip
 800099e:	429a      	cmp	r2, r3
 80009a0:	d909      	bls.n	80009b6 <__udivmoddi4+0x62>
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80009a8:	f080 80ea 	bcs.w	8000b80 <__udivmoddi4+0x22c>
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f240 80e7 	bls.w	8000b80 <__udivmoddi4+0x22c>
 80009b2:	3902      	subs	r1, #2
 80009b4:	443b      	add	r3, r7
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	b2a3      	uxth	r3, r4
 80009ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80009be:	fb0e 2210 	mls	r2, lr, r0, r2
 80009c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80009ca:	459c      	cmp	ip, r3
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0x8e>
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80009d4:	f080 80d6 	bcs.w	8000b84 <__udivmoddi4+0x230>
 80009d8:	459c      	cmp	ip, r3
 80009da:	f240 80d3 	bls.w	8000b84 <__udivmoddi4+0x230>
 80009de:	443b      	add	r3, r7
 80009e0:	3802      	subs	r0, #2
 80009e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e6:	eba3 030c 	sub.w	r3, r3, ip
 80009ea:	2100      	movs	r1, #0
 80009ec:	b11d      	cbz	r5, 80009f6 <__udivmoddi4+0xa2>
 80009ee:	40f3      	lsrs	r3, r6
 80009f0:	2200      	movs	r2, #0
 80009f2:	e9c5 3200 	strd	r3, r2, [r5]
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d905      	bls.n	8000a0a <__udivmoddi4+0xb6>
 80009fe:	b10d      	cbz	r5, 8000a04 <__udivmoddi4+0xb0>
 8000a00:	e9c5 0100 	strd	r0, r1, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4608      	mov	r0, r1
 8000a08:	e7f5      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a0a:	fab3 f183 	clz	r1, r3
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d146      	bne.n	8000aa0 <__udivmoddi4+0x14c>
 8000a12:	4573      	cmp	r3, lr
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xc8>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 8105 	bhi.w	8000c26 <__udivmoddi4+0x2d2>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	4690      	mov	r8, r2
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e5      	beq.n	80009f6 <__udivmoddi4+0xa2>
 8000a2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a2e:	e7e2      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	f000 8090 	beq.w	8000b56 <__udivmoddi4+0x202>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	f040 80a4 	bne.w	8000b88 <__udivmoddi4+0x234>
 8000a40:	1a8a      	subs	r2, r1, r2
 8000a42:	0c03      	lsrs	r3, r0, #16
 8000a44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a48:	b280      	uxth	r0, r0
 8000a4a:	b2bc      	uxth	r4, r7
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d907      	bls.n	8000a72 <__udivmoddi4+0x11e>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x11c>
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	f200 80e0 	bhi.w	8000c30 <__udivmoddi4+0x2dc>
 8000a70:	46c4      	mov	ip, r8
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a80:	fb02 f404 	mul.w	r4, r2, r4
 8000a84:	429c      	cmp	r4, r3
 8000a86:	d907      	bls.n	8000a98 <__udivmoddi4+0x144>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x142>
 8000a90:	429c      	cmp	r4, r3
 8000a92:	f200 80ca 	bhi.w	8000c2a <__udivmoddi4+0x2d6>
 8000a96:	4602      	mov	r2, r0
 8000a98:	1b1b      	subs	r3, r3, r4
 8000a9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a9e:	e7a5      	b.n	80009ec <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa22 f706 	lsr.w	r7, r2, r6
 8000aaa:	431f      	orrs	r7, r3
 8000aac:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ab4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ab8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000abc:	4323      	orrs	r3, r4
 8000abe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ac2:	fa1f fc87 	uxth.w	ip, r7
 8000ac6:	fbbe f0f9 	udiv	r0, lr, r9
 8000aca:	0c1c      	lsrs	r4, r3, #16
 8000acc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ad4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ad8:	45a6      	cmp	lr, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x1a0>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	f080 809c 	bcs.w	8000c22 <__udivmoddi4+0x2ce>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f240 8099 	bls.w	8000c22 <__udivmoddi4+0x2ce>
 8000af0:	3802      	subs	r0, #2
 8000af2:	443c      	add	r4, r7
 8000af4:	eba4 040e 	sub.w	r4, r4, lr
 8000af8:	fa1f fe83 	uxth.w	lr, r3
 8000afc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b00:	fb09 4413 	mls	r4, r9, r3, r4
 8000b04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0c:	45a4      	cmp	ip, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x1ce>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b16:	f080 8082 	bcs.w	8000c1e <__udivmoddi4+0x2ca>
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d97f      	bls.n	8000c1e <__udivmoddi4+0x2ca>
 8000b1e:	3b02      	subs	r3, #2
 8000b20:	443c      	add	r4, r7
 8000b22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b2e:	4564      	cmp	r4, ip
 8000b30:	4673      	mov	r3, lr
 8000b32:	46e1      	mov	r9, ip
 8000b34:	d362      	bcc.n	8000bfc <__udivmoddi4+0x2a8>
 8000b36:	d05f      	beq.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b38:	b15d      	cbz	r5, 8000b52 <__udivmoddi4+0x1fe>
 8000b3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b42:	fa04 f606 	lsl.w	r6, r4, r6
 8000b46:	fa22 f301 	lsr.w	r3, r2, r1
 8000b4a:	431e      	orrs	r6, r3
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b52:	2100      	movs	r1, #0
 8000b54:	e74f      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000b56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b5a:	0c01      	lsrs	r1, r0, #16
 8000b5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b60:	b280      	uxth	r0, r0
 8000b62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b66:	463b      	mov	r3, r7
 8000b68:	4638      	mov	r0, r7
 8000b6a:	463c      	mov	r4, r7
 8000b6c:	46b8      	mov	r8, r7
 8000b6e:	46be      	mov	lr, r7
 8000b70:	2620      	movs	r6, #32
 8000b72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b76:	eba2 0208 	sub.w	r2, r2, r8
 8000b7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b7e:	e766      	b.n	8000a4e <__udivmoddi4+0xfa>
 8000b80:	4601      	mov	r1, r0
 8000b82:	e718      	b.n	80009b6 <__udivmoddi4+0x62>
 8000b84:	4610      	mov	r0, r2
 8000b86:	e72c      	b.n	80009e2 <__udivmoddi4+0x8e>
 8000b88:	f1c6 0220 	rsb	r2, r6, #32
 8000b8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000b90:	40b7      	lsls	r7, r6
 8000b92:	40b1      	lsls	r1, r6
 8000b94:	fa20 f202 	lsr.w	r2, r0, r2
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ba8:	0c11      	lsrs	r1, r2, #16
 8000baa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bae:	fb08 f904 	mul.w	r9, r8, r4
 8000bb2:	40b0      	lsls	r0, r6
 8000bb4:	4589      	cmp	r9, r1
 8000bb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bba:	b280      	uxth	r0, r0
 8000bbc:	d93e      	bls.n	8000c3c <__udivmoddi4+0x2e8>
 8000bbe:	1879      	adds	r1, r7, r1
 8000bc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bc4:	d201      	bcs.n	8000bca <__udivmoddi4+0x276>
 8000bc6:	4589      	cmp	r9, r1
 8000bc8:	d81f      	bhi.n	8000c0a <__udivmoddi4+0x2b6>
 8000bca:	eba1 0109 	sub.w	r1, r1, r9
 8000bce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd2:	fb09 f804 	mul.w	r8, r9, r4
 8000bd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bda:	b292      	uxth	r2, r2
 8000bdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be0:	4542      	cmp	r2, r8
 8000be2:	d229      	bcs.n	8000c38 <__udivmoddi4+0x2e4>
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bea:	d2c4      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bec:	4542      	cmp	r2, r8
 8000bee:	d2c2      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bf0:	f1a9 0102 	sub.w	r1, r9, #2
 8000bf4:	443a      	add	r2, r7
 8000bf6:	e7be      	b.n	8000b76 <__udivmoddi4+0x222>
 8000bf8:	45f0      	cmp	r8, lr
 8000bfa:	d29d      	bcs.n	8000b38 <__udivmoddi4+0x1e4>
 8000bfc:	ebbe 0302 	subs.w	r3, lr, r2
 8000c00:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c04:	3801      	subs	r0, #1
 8000c06:	46e1      	mov	r9, ip
 8000c08:	e796      	b.n	8000b38 <__udivmoddi4+0x1e4>
 8000c0a:	eba7 0909 	sub.w	r9, r7, r9
 8000c0e:	4449      	add	r1, r9
 8000c10:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c14:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c18:	fb09 f804 	mul.w	r8, r9, r4
 8000c1c:	e7db      	b.n	8000bd6 <__udivmoddi4+0x282>
 8000c1e:	4673      	mov	r3, lr
 8000c20:	e77f      	b.n	8000b22 <__udivmoddi4+0x1ce>
 8000c22:	4650      	mov	r0, sl
 8000c24:	e766      	b.n	8000af4 <__udivmoddi4+0x1a0>
 8000c26:	4608      	mov	r0, r1
 8000c28:	e6fd      	b.n	8000a26 <__udivmoddi4+0xd2>
 8000c2a:	443b      	add	r3, r7
 8000c2c:	3a02      	subs	r2, #2
 8000c2e:	e733      	b.n	8000a98 <__udivmoddi4+0x144>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	443b      	add	r3, r7
 8000c36:	e71c      	b.n	8000a72 <__udivmoddi4+0x11e>
 8000c38:	4649      	mov	r1, r9
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x222>
 8000c3c:	eba1 0109 	sub.w	r1, r1, r9
 8000c40:	46c4      	mov	ip, r8
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	e7c4      	b.n	8000bd6 <__udivmoddi4+0x282>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c58:	1d39      	adds	r1, r7, #4
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <__io_putchar+0x20>)
 8000c62:	f003 fd2f 	bl	80046c4 <HAL_UART_Transmit>
    return ch;
 8000c66:	687b      	ldr	r3, [r7, #4]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000d8 	.word	0x200000d8

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c78:	f001 f94e 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7c:	f000 f822 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c80:	f000 f934 	bl	8000eec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c84:	f000 f8e4 	bl	8000e50 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c88:	f000 f88a 	bl	8000da0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000c8c:	f000 f8b6 	bl	8000dfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  si5351_Init();
 8000c90:	f000 f998 	bl	8000fc4 <si5351_Init>

  // Set clock 0 to 16MHz
  // 25mhz crystal osc * 32 == 800MHz
  // 800MHz / 50 = 16Mhz
  //
  si5351_setupPLLInt(SI5351_PLL_A, 32);
 8000c94:	2120      	movs	r1, #32
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fa4a 	bl	8001130 <si5351_setupPLLInt>
  si5351_setupMultisynthInt(0, SI5351_PLL_A, 20);
 8000c9c:	2214      	movs	r2, #20
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 fc23 	bl	80014ec <si5351_setupMultisynthInt>
  si5351_setupRdiv(0, SI5351_R_DIV_1);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 fc35 	bl	8001518 <si5351_setupRdiv>

  si5351_enableOutputs(0xFF);
 8000cae:	20ff      	movs	r0, #255	@ 0xff
 8000cb0:	f000 fef2 	bl	8001a98 <si5351_enableOutputs>

  printf("Clock IC Programmed\r\n");
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <main+0x4c>)
 8000cb6:	f004 f9d9 	bl	800506c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cba:	bf00      	nop
 8000cbc:	e7fd      	b.n	8000cba <main+0x46>
 8000cbe:	bf00      	nop
 8000cc0:	080058a8 	.word	0x080058a8

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b094      	sub	sp, #80	@ 0x50
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2234      	movs	r2, #52	@ 0x34
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 faaa 	bl	800522c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <SystemClock_Config+0xd4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	4a29      	ldr	r2, [pc, #164]	@ (8000d98 <SystemClock_Config+0xd4>)
 8000cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <SystemClock_Config+0xd4>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <SystemClock_Config+0xd8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d10:	4a22      	ldr	r2, [pc, #136]	@ (8000d9c <SystemClock_Config+0xd8>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <SystemClock_Config+0xd8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d30:	2302      	movs	r3, #2
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 f9c8 	bl	80040e8 <HAL_RCC_OscConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d5e:	f000 f92b 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d62:	230f      	movs	r3, #15
 8000d64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d66:	2302      	movs	r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fe68 	bl	8003a54 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d8a:	f000 f915 	bl	8000fb8 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	@ (8000df4 <MX_I2C1_Init+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dac:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <MX_I2C1_Init+0x58>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_I2C1_Init+0x50>)
 8000dde:	f001 fce7 	bl	80027b0 <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 f8e6 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000084 	.word	0x20000084
 8000df4:	40005400 	.word	0x40005400
 8000df8:	000186a0 	.word	0x000186a0

08000dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <MX_USART2_UART_Init+0x50>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_USART2_UART_Init+0x4c>)
 8000e34:	f003 fbf6 	bl	8004624 <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e3e:	f000 f8bb 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000d8 	.word	0x200000d8
 8000e4c:	40004400 	.word	0x40004400

08000e50 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_DMA_Init+0x90>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ee0 <MX_DMA_Init+0x90>)
 8000e60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <MX_DMA_Init+0x90>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <MX_DMA_Init+0x98>)
 8000e76:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e90:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e98:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000e9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_DMA_Init+0x94>)
 8000ec8:	f001 f97e 	bl	80021c8 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8000ed2:	f000 f871 	bl	8000fb8 <Error_Handler>
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	20000120 	.word	0x20000120
 8000ee8:	40026410 	.word	0x40026410

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a22      	ldr	r2, [pc, #136]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_GPIO_Init+0xc4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <MX_GPIO_Init+0xc8>)
 8000f8a:	f001 fa7d 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f8e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f92:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_GPIO_Init+0xc8>)
 8000fa4:	f001 fa70 	bl	8002488 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	@ 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <Error_Handler+0x8>

08000fc4 <si5351_Init>:
    Initializes I2C and configures the breakout (call this function before
    doing anything else)
*/
/**************************************************************************/
err_t si5351_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

	/*!
	    Constructor
	*/
	  m_si5351Config.initialised     = 0;
 8000fca:	4b57      	ldr	r3, [pc, #348]	@ (8001128 <si5351_Init+0x164>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 8000fd0:	4b55      	ldr	r3, [pc, #340]	@ (8001128 <si5351_Init+0x164>)
 8000fd2:	4a56      	ldr	r2, [pc, #344]	@ (800112c <si5351_Init+0x168>)
 8000fd4:	605a      	str	r2, [r3, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 8000fd6:	4b54      	ldr	r3, [pc, #336]	@ (8001128 <si5351_Init+0x164>)
 8000fd8:	22c0      	movs	r2, #192	@ 0xc0
 8000fda:	721a      	strb	r2, [r3, #8]
	  m_si5351Config.crystalPPM      = 30;
 8000fdc:	4b52      	ldr	r3, [pc, #328]	@ (8001128 <si5351_Init+0x164>)
 8000fde:	221e      	movs	r2, #30
 8000fe0:	60da      	str	r2, [r3, #12]
	  m_si5351Config.plla_configured = 0;
 8000fe2:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <si5351_Init+0x164>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	741a      	strb	r2, [r3, #16]
	  m_si5351Config.plla_freq       = 0;
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8001128 <si5351_Init+0x164>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
	  m_si5351Config.pllb_configured = 0;
 8000fee:	4b4e      	ldr	r3, [pc, #312]	@ (8001128 <si5351_Init+0x164>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	761a      	strb	r2, [r3, #24]
	  m_si5351Config.pllb_freq       = 0;
 8000ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8001128 <si5351_Init+0x164>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
	  m_si5351Config.ms0_freq		 = 0;
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8001128 <si5351_Init+0x164>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
	  m_si5351Config.ms1_freq		 = 0;
 8001000:	4b49      	ldr	r3, [pc, #292]	@ (8001128 <si5351_Init+0x164>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
	  m_si5351Config.ms2_freq		 = 0;
 8001006:	4b48      	ldr	r3, [pc, #288]	@ (8001128 <si5351_Init+0x164>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	@ 0x28
	  m_si5351Config.ms0_r_div		 = 0;
 800100c:	4b46      	ldr	r3, [pc, #280]	@ (8001128 <si5351_Init+0x164>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	@ 0x2c
	  m_si5351Config.ms1_r_div		 = 0;
 8001012:	4b45      	ldr	r3, [pc, #276]	@ (8001128 <si5351_Init+0x164>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	@ 0x30
	  m_si5351Config.ms2_r_div		 = 0;
 8001018:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <si5351_Init+0x164>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	@ 0x34



  /* Disable all outputs setting CLKx_DIS high */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 800101e:	21ff      	movs	r1, #255	@ 0xff
 8001020:	2003      	movs	r0, #3
 8001022:	f000 fd5d 	bl	8001ae0 <si5351_write8>
 8001026:	4603      	mov	r3, r0
 8001028:	82fb      	strh	r3, [r7, #22]
 800102a:	8afb      	ldrh	r3, [r7, #22]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <si5351_Init+0x70>
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	e074      	b.n	800111e <si5351_Init+0x15a>

  /* Power down all output drivers */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	2010      	movs	r0, #16
 8001038:	f000 fd52 	bl	8001ae0 <si5351_write8>
 800103c:	4603      	mov	r3, r0
 800103e:	82bb      	strh	r3, [r7, #20]
 8001040:	8abb      	ldrh	r3, [r7, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <si5351_Init+0x86>
 8001046:	8abb      	ldrh	r3, [r7, #20]
 8001048:	e069      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	2011      	movs	r0, #17
 800104e:	f000 fd47 	bl	8001ae0 <si5351_write8>
 8001052:	4603      	mov	r3, r0
 8001054:	827b      	strh	r3, [r7, #18]
 8001056:	8a7b      	ldrh	r3, [r7, #18]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <si5351_Init+0x9c>
 800105c:	8a7b      	ldrh	r3, [r7, #18]
 800105e:	e05e      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 8001060:	2180      	movs	r1, #128	@ 0x80
 8001062:	2012      	movs	r0, #18
 8001064:	f000 fd3c 	bl	8001ae0 <si5351_write8>
 8001068:	4603      	mov	r3, r0
 800106a:	823b      	strh	r3, [r7, #16]
 800106c:	8a3b      	ldrh	r3, [r7, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <si5351_Init+0xb2>
 8001072:	8a3b      	ldrh	r3, [r7, #16]
 8001074:	e053      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	2013      	movs	r0, #19
 800107a:	f000 fd31 	bl	8001ae0 <si5351_write8>
 800107e:	4603      	mov	r3, r0
 8001080:	81fb      	strh	r3, [r7, #14]
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <si5351_Init+0xc8>
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	e048      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 800108c:	2180      	movs	r1, #128	@ 0x80
 800108e:	2014      	movs	r0, #20
 8001090:	f000 fd26 	bl	8001ae0 <si5351_write8>
 8001094:	4603      	mov	r3, r0
 8001096:	81bb      	strh	r3, [r7, #12]
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <si5351_Init+0xde>
 800109e:	89bb      	ldrh	r3, [r7, #12]
 80010a0:	e03d      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	2015      	movs	r0, #21
 80010a6:	f000 fd1b 	bl	8001ae0 <si5351_write8>
 80010aa:	4603      	mov	r3, r0
 80010ac:	817b      	strh	r3, [r7, #10]
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <si5351_Init+0xf4>
 80010b4:	897b      	ldrh	r3, [r7, #10]
 80010b6:	e032      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	2016      	movs	r0, #22
 80010bc:	f000 fd10 	bl	8001ae0 <si5351_write8>
 80010c0:	4603      	mov	r3, r0
 80010c2:	813b      	strh	r3, [r7, #8]
 80010c4:	893b      	ldrh	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <si5351_Init+0x10a>
 80010ca:	893b      	ldrh	r3, [r7, #8]
 80010cc:	e027      	b.n	800111e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	2017      	movs	r0, #23
 80010d2:	f000 fd05 	bl	8001ae0 <si5351_write8>
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <si5351_Init+0x120>
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	e01c      	b.n	800111e <si5351_Init+0x15a>

  /* Set the load capacitance for the XTAL */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <si5351_Init+0x164>)
 80010e6:	7a1b      	ldrb	r3, [r3, #8]
 80010e8:	4619      	mov	r1, r3
 80010ea:	20b7      	movs	r0, #183	@ 0xb7
 80010ec:	f000 fcf8 	bl	8001ae0 <si5351_write8>
 80010f0:	4603      	mov	r3, r0
 80010f2:	80bb      	strh	r3, [r7, #4]
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <si5351_Init+0x13a>
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	e00f      	b.n	800111e <si5351_Init+0x15a>
     By default, ClockBuilder Desktop sets this register to 0x18.
     Note that the least significant nibble must remain 0x8, but the most
     significant nibble may be modified to suit your needs. */

  /* Reset the PLL config fields just in case we call init again */
  m_si5351Config.plla_configured = 0;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <si5351_Init+0x164>)
 8001100:	2200      	movs	r2, #0
 8001102:	741a      	strb	r2, [r3, #16]
  m_si5351Config.plla_freq = 0;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <si5351_Init+0x164>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  m_si5351Config.pllb_configured = 0;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <si5351_Init+0x164>)
 800110c:	2200      	movs	r2, #0
 800110e:	761a      	strb	r2, [r3, #24]
  m_si5351Config.pllb_freq = 0;
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <si5351_Init+0x164>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]

  /* All done! */
  m_si5351Config.initialised = 1;
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <si5351_Init+0x164>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]

  return ERROR_NONE;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000180 	.word	0x20000180
 800112c:	017d7840 	.word	0x017d7840

08001130 <si5351_setupPLLInt>:
                - SI5351_PLL_B
  @param  mult  The PLL integer multiplier (must be between 15 and 90)
*/
/**************************************************************************/
err_t si5351_setupPLLInt(si5351PLL_t pll, uint8_t mult)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
  return si5351_setupPLL(pll, mult, 0, 1);
 8001140:	79b9      	ldrb	r1, [r7, #6]
 8001142:	79f8      	ldrb	r0, [r7, #7]
 8001144:	2301      	movs	r3, #1
 8001146:	2200      	movs	r2, #0
 8001148:	f000 f806 	bl	8001158 <si5351_setupPLL>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <si5351_setupPLL>:
/**************************************************************************/
err_t si5351_setupPLL(si5351PLL_t pll,
                                uint8_t     mult,
                                uint32_t    num,
                                uint32_t    denom)
{
 8001158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800115c:	b08e      	sub	sp, #56	@ 0x38
 800115e:	af00      	add	r7, sp, #0
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	460b      	mov	r3, r1
 800116a:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* PLL config register P1 */
  uint32_t P2;	     /* PLL config register P2 */
  uint32_t P3;	     /* PLL config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 800116c:	4ba5      	ldr	r3, [pc, #660]	@ (8001404 <si5351_setupPLL+0x2ac>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <si5351_setupPLL+0x20>
 8001174:	2305      	movs	r3, #5
 8001176:	e1b2      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b0e      	cmp	r3, #14
 800117c:	d902      	bls.n	8001184 <si5351_setupPLL+0x2c>
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	2b5a      	cmp	r3, #90	@ 0x5a
 8001182:	d901      	bls.n	8001188 <si5351_setupPLL+0x30>
 8001184:	2304      	movs	r3, #4
 8001186:	e1aa      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT( denom > 0,                  ERROR_INVALIDPARAMETER ); /* Avoid divide by zero */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <si5351_setupPLL+0x3a>
 800118e:	2304      	movs	r3, #4
 8001190:	e1a5      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001198:	d301      	bcc.n	800119e <si5351_setupPLL+0x46>
 800119a:	2304      	movs	r3, #4
 800119c:	e19f      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80011a4:	d301      	bcc.n	80011aa <si5351_setupPLL+0x52>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e199      	b.n	80014de <si5351_setupPLL+0x386>
   *
   * 	P3[19:0] = denom
   */

  /* Set the main PLL config registers */
  if (num == 0)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d108      	bne.n	80011c2 <si5351_setupPLL+0x6a>
  {
    /* Integer mode */
    P1 = 128 * mult - 512;
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	3b04      	subs	r3, #4
 80011b4:	01db      	lsls	r3, r3, #7
 80011b6:	637b      	str	r3, [r7, #52]	@ 0x34
    P2 = num;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	633b      	str	r3, [r7, #48]	@ 0x30
    P3 = denom;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c0:	e074      	b.n	80012ac <si5351_setupPLL+0x154>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	01db      	lsls	r3, r3, #7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fa9a 	bl	8000700 <__aeabi_i2d>
 80011cc:	4604      	mov	r4, r0
 80011ce:	460d      	mov	r5, r1
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001408 <si5351_setupPLL+0x2b0>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff fa96 	bl	8000724 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b10 	vmov	d0, r2, r3
 8001200:	f004 faca 	bl	8005798 <floor>
 8001204:	ec53 2b10 	vmov	r2, r3, d0
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f92c 	bl	8000468 <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001220:	f7ff f920 	bl	8000464 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fb5a 	bl	80008e4 <__aeabi_d2uiz>
 8001230:	4603      	mov	r3, r0
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fa51 	bl	80006e0 <__aeabi_ui2d>
 800123e:	4604      	mov	r4, r0
 8001240:	460d      	mov	r5, r1
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fa4c 	bl	80006e0 <__aeabi_ui2d>
 8001248:	4680      	mov	r8, r0
 800124a:	4689      	mov	r9, r1
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001264:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001408 <si5351_setupPLL+0x2b0>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	ee17 0a90 	vmov	r0, s15
 8001270:	f7ff fa58 	bl	8000724 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	ec43 2b10 	vmov	d0, r2, r3
 800127c:	f004 fa8c 	bl	8005798 <floor>
 8001280:	ec53 2b10 	vmov	r2, r3, d0
 8001284:	4640      	mov	r0, r8
 8001286:	4649      	mov	r1, r9
 8001288:	f7fe ffbe 	bl	8000208 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4620      	mov	r0, r4
 8001292:	4629      	mov	r1, r5
 8001294:	f7ff f8e6 	bl	8000464 <__aeabi_dsub>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fb20 	bl	80008e4 <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
    P3 = denom;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <si5351_setupPLL+0x15e>
 80012b2:	231a      	movs	r3, #26
 80012b4:	e000      	b.n	80012b8 <si5351_setupPLL+0x160>
 80012b6:	2322      	movs	r3, #34	@ 0x22
 80012b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* The datasheet is a nightmare of typos and inconsistencies here! */
  ASSERT_STATUS( si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8));
 80012bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fc09 	bl	8001ae0 <si5351_write8>
 80012ce:	4603      	mov	r3, r0
 80012d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80012d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <si5351_setupPLL+0x184>
 80012d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012da:	e100      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+1, (P3 & 0x000000FF)));
 80012dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fbf8 	bl	8001ae0 <si5351_write8>
 80012f0:	4603      	mov	r3, r0
 80012f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <si5351_setupPLL+0x1a6>
 80012fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012fc:	e0ef      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16));
 80012fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001302:	3302      	adds	r3, #2
 8001304:	b2da      	uxtb	r2, r3
 8001306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f000 fbe3 	bl	8001ae0 <si5351_write8>
 800131a:	4603      	mov	r3, r0
 800131c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800131e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <si5351_setupPLL+0x1d0>
 8001324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001326:	e0da      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8));
 8001328:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800132c:	3303      	adds	r3, #3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f000 fbd1 	bl	8001ae0 <si5351_write8>
 800133e:	4603      	mov	r3, r0
 8001340:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001342:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <si5351_setupPLL+0x1f4>
 8001348:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800134a:	e0c8      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+4, (P1 & 0x000000FF)));
 800134c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001350:	3304      	adds	r3, #4
 8001352:	b2db      	uxtb	r3, r3
 8001354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fbc0 	bl	8001ae0 <si5351_write8>
 8001360:	4603      	mov	r3, r0
 8001362:	843b      	strh	r3, [r7, #32]
 8001364:	8c3b      	ldrh	r3, [r7, #32]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <si5351_setupPLL+0x216>
 800136a:	8c3b      	ldrh	r3, [r7, #32]
 800136c:	e0b7      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) ));
 800136e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001372:	3305      	adds	r3, #5
 8001374:	b2d8      	uxtb	r0, r3
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	0b1b      	lsrs	r3, r3, #12
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f023 030f 	bic.w	r3, r3, #15
 8001380:	b2da      	uxtb	r2, r3
 8001382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fba4 	bl	8001ae0 <si5351_write8>
 8001398:	4603      	mov	r3, r0
 800139a:	83fb      	strh	r3, [r7, #30]
 800139c:	8bfb      	ldrh	r3, [r7, #30]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <si5351_setupPLL+0x24e>
 80013a2:	8bfb      	ldrh	r3, [r7, #30]
 80013a4:	e09b      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8));
 80013a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80013aa:	3306      	adds	r3, #6
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f000 fb92 	bl	8001ae0 <si5351_write8>
 80013bc:	4603      	mov	r3, r0
 80013be:	83bb      	strh	r3, [r7, #28]
 80013c0:	8bbb      	ldrh	r3, [r7, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <si5351_setupPLL+0x272>
 80013c6:	8bbb      	ldrh	r3, [r7, #28]
 80013c8:	e089      	b.n	80014de <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+7, (P2 & 0x000000FF)));
 80013ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80013ce:	3307      	adds	r3, #7
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fb81 	bl	8001ae0 <si5351_write8>
 80013de:	4603      	mov	r3, r0
 80013e0:	837b      	strh	r3, [r7, #26]
 80013e2:	8b7b      	ldrh	r3, [r7, #26]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <si5351_setupPLL+0x294>
 80013e8:	8b7b      	ldrh	r3, [r7, #26]
 80013ea:	e078      	b.n	80014de <si5351_setupPLL+0x386>

  /* Reset both PLLs */
  ASSERT_STATUS( si5351_write8(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) ));
 80013ec:	21a0      	movs	r1, #160	@ 0xa0
 80013ee:	20b1      	movs	r0, #177	@ 0xb1
 80013f0:	f000 fb76 	bl	8001ae0 <si5351_write8>
 80013f4:	4603      	mov	r3, r0
 80013f6:	833b      	strh	r3, [r7, #24]
 80013f8:	8b3b      	ldrh	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <si5351_setupPLL+0x2b4>
 80013fe:	8b3b      	ldrh	r3, [r7, #24]
 8001400:	e06d      	b.n	80014de <si5351_setupPLL+0x386>
 8001402:	bf00      	nop
 8001404:	20000180 	.word	0x20000180
 8001408:	43000000 	.word	0x43000000

  /* Store the frequency settings for use with the Multisynth helper */
  if (pll == SI5351_PLL_A)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d132      	bne.n	8001478 <si5351_setupPLL+0x320>
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001412:	4b35      	ldr	r3, [pc, #212]	@ (80014e8 <si5351_setupPLL+0x390>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800143c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	edc7 7a04 	vstr	s15, [r7, #16]
    m_si5351Config.plla_configured = 1; //true
 800144c:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <si5351_setupPLL+0x390>)
 800144e:	2201      	movs	r2, #1
 8001450:	741a      	strb	r2, [r3, #16]
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 8001452:	6938      	ldr	r0, [r7, #16]
 8001454:	f7ff f966 	bl	8000724 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	ec43 2b10 	vmov	d0, r2, r3
 8001460:	f004 f99a 	bl	8005798 <floor>
 8001464:	ec53 2b10 	vmov	r2, r3, d0
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fa3a 	bl	80008e4 <__aeabi_d2uiz>
 8001470:	4603      	mov	r3, r0
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <si5351_setupPLL+0x390>)
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	e031      	b.n	80014dc <si5351_setupPLL+0x384>
  }
  else
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <si5351_setupPLL+0x390>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80014a2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80014a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	edc7 7a05 	vstr	s15, [r7, #20]
    m_si5351Config.pllb_configured = 1; //true
 80014b2:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <si5351_setupPLL+0x390>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	761a      	strb	r2, [r3, #24]
    m_si5351Config.pllb_freq = (uint32_t)floor(fvco);
 80014b8:	6978      	ldr	r0, [r7, #20]
 80014ba:	f7ff f933 	bl	8000724 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	ec43 2b10 	vmov	d0, r2, r3
 80014c6:	f004 f967 	bl	8005798 <floor>
 80014ca:	ec53 2b10 	vmov	r2, r3, d0
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fa07 	bl	80008e4 <__aeabi_d2uiz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a03      	ldr	r2, [pc, #12]	@ (80014e8 <si5351_setupPLL+0x390>)
 80014da:	61d3      	str	r3, [r2, #28]
  }

  return ERROR_NONE;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3738      	adds	r7, #56	@ 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e8:	20000180 	.word	0x20000180

080014ec <si5351_setupMultisynthInt>:
*/
/**************************************************************************/
err_t si5351_setupMultisynthInt(uint8_t               output,
                                          si5351PLL_t           pllSource,
                                          si5351MultisynthDiv_t div)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	460b      	mov	r3, r1
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	4613      	mov	r3, r2
 80014fc:	717b      	strb	r3, [r7, #5]
  return si5351_setupMultisynth(output, pllSource, div, 0, 1);
 80014fe:	797a      	ldrb	r2, [r7, #5]
 8001500:	79b9      	ldrb	r1, [r7, #6]
 8001502:	79f8      	ldrb	r0, [r7, #7]
 8001504:	2301      	movs	r3, #1
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	f000 f88d 	bl	8001628 <si5351_setupMultisynth>
 800150e:	4603      	mov	r3, r0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <si5351_setupRdiv>:


err_t si5351_setupRdiv(uint8_t  output, si5351RDiv_t div) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <si5351_setupRdiv+0x1a>
 800152e:	2304      	movs	r3, #4
 8001530:	e073      	b.n	800161a <si5351_setupRdiv+0x102>
  
  uint8_t Rreg, regval, rDiv;

  if (output == 0) Rreg = SI5351_REGISTER_44_MULTISYNTH0_PARAMETERS_3;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <si5351_setupRdiv+0x24>
 8001538:	232c      	movs	r3, #44	@ 0x2c
 800153a:	73fb      	strb	r3, [r7, #15]
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <si5351_setupRdiv+0x2e>
 8001542:	2334      	movs	r3, #52	@ 0x34
 8001544:	73fb      	strb	r3, [r7, #15]
  if (output == 2) Rreg = SI5351_REGISTER_60_MULTISYNTH2_PARAMETERS_3;
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d101      	bne.n	8001550 <si5351_setupRdiv+0x38>
 800154c:	233c      	movs	r3, #60	@ 0x3c
 800154e:	73fb      	strb	r3, [r7, #15]

  si5351_read8(Rreg, &regval);
 8001550:	f107 020c 	add.w	r2, r7, #12
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 faed 	bl	8001b38 <si5351_read8>

  regval &= 0x0F;
 800155e:	7b3b      	ldrb	r3, [r7, #12]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	b2db      	uxtb	r3, r3
 8001566:	733b      	strb	r3, [r7, #12]
  uint8_t divider = div;
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	737b      	strb	r3, [r7, #13]
  divider &= 0x07;
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	737b      	strb	r3, [r7, #13]
  divider <<= 4;
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	737b      	strb	r3, [r7, #13]
  regval |= divider;
 800157a:	7b3a      	ldrb	r2, [r7, #12]
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	733b      	strb	r3, [r7, #12]
  si5351_write8(Rreg, regval);
 8001584:	7b3a      	ldrb	r2, [r7, #12]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 faa8 	bl	8001ae0 <si5351_write8>

  switch(div)
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	2b07      	cmp	r3, #7
 8001594:	d82a      	bhi.n	80015ec <si5351_setupRdiv+0xd4>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <si5351_setupRdiv+0x84>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015bd 	.word	0x080015bd
 80015a0:	080015c3 	.word	0x080015c3
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	080015cf 	.word	0x080015cf
 80015ac:	080015d5 	.word	0x080015d5
 80015b0:	080015db 	.word	0x080015db
 80015b4:	080015e1 	.word	0x080015e1
 80015b8:	080015e7 	.word	0x080015e7
  {
  case 0:
  rDiv = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	73bb      	strb	r3, [r7, #14]
  break;
 80015c0:	e014      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 1:
  rDiv = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	73bb      	strb	r3, [r7, #14]
  break;
 80015c6:	e011      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 2:
  rDiv = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	73bb      	strb	r3, [r7, #14]
  break;
 80015cc:	e00e      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 3:
  rDiv = 8;
 80015ce:	2308      	movs	r3, #8
 80015d0:	73bb      	strb	r3, [r7, #14]
  break;
 80015d2:	e00b      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 4:
  rDiv = 16;
 80015d4:	2310      	movs	r3, #16
 80015d6:	73bb      	strb	r3, [r7, #14]
  break;
 80015d8:	e008      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 5:
  rDiv = 32;
 80015da:	2320      	movs	r3, #32
 80015dc:	73bb      	strb	r3, [r7, #14]
  break;
 80015de:	e005      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 6:
  rDiv = 64;
 80015e0:	2340      	movs	r3, #64	@ 0x40
 80015e2:	73bb      	strb	r3, [r7, #14]
  break;
 80015e4:	e002      	b.n	80015ec <si5351_setupRdiv+0xd4>

  case 7:
  rDiv = 128;
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	73bb      	strb	r3, [r7, #14]
  break;
 80015ea:	bf00      	nop
  }

  switch(output)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d00e      	beq.n	8001610 <si5351_setupRdiv+0xf8>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	dc10      	bgt.n	8001618 <si5351_setupRdiv+0x100>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <si5351_setupRdiv+0xe8>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d004      	beq.n	8001608 <si5351_setupRdiv+0xf0>
 80015fe:	e00b      	b.n	8001618 <si5351_setupRdiv+0x100>
  {
  case 0:
  m_si5351Config.ms0_r_div = rDiv;
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <si5351_setupRdiv+0x10c>)
 8001604:	62d3      	str	r3, [r2, #44]	@ 0x2c
  break;
 8001606:	e007      	b.n	8001618 <si5351_setupRdiv+0x100>

  case 1:
  m_si5351Config.ms1_r_div = rDiv;
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <si5351_setupRdiv+0x10c>)
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
  break;
 800160e:	e003      	b.n	8001618 <si5351_setupRdiv+0x100>

  case 2:
  m_si5351Config.ms2_r_div = rDiv;
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <si5351_setupRdiv+0x10c>)
 8001614:	6353      	str	r3, [r2, #52]	@ 0x34
  break;
 8001616:	bf00      	nop
  }

  return ERROR_NONE;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000180 	.word	0x20000180

08001628 <si5351_setupMultisynth>:
err_t si5351_setupMultisynth(uint8_t     output,
                                       si5351PLL_t pllSource,
                                       uint32_t    div,
                                       uint32_t    num,
                                       uint32_t    denom)
{
 8001628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800162c:	b08c      	sub	sp, #48	@ 0x30
 800162e:	af00      	add	r7, sp, #0
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	460b      	mov	r3, r1
 800163a:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* Multisynth config register P1 */
  uint32_t P2;	     /* Multisynth config register P2 */
  uint32_t P3;	     /* Multisynth config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 800163c:	4bba      	ldr	r3, [pc, #744]	@ (8001928 <si5351_setupMultisynth+0x300>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <si5351_setupMultisynth+0x20>
 8001644:	2305      	movs	r3, #5
 8001646:	e21f      	b.n	8001a88 <si5351_setupMultisynth+0x460>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <si5351_setupMultisynth+0x2a>
 800164e:	2304      	movs	r3, #4
 8001650:	e21a      	b.n	8001a88 <si5351_setupMultisynth+0x460>
  //ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
  //ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */


  /* Make sure the requested PLL has been initialised */
  if (pllSource == SI5351_PLL_A)
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <si5351_setupMultisynth+0x38>
  {
    ASSERT(m_si5351Config.plla_configured = 1, ERROR_INVALIDPARAMETER);
 8001658:	4bb3      	ldr	r3, [pc, #716]	@ (8001928 <si5351_setupMultisynth+0x300>)
 800165a:	2201      	movs	r2, #1
 800165c:	741a      	strb	r2, [r3, #16]
 800165e:	e002      	b.n	8001666 <si5351_setupMultisynth+0x3e>
  }
  else
  {
    ASSERT(m_si5351Config.pllb_configured = 1, ERROR_INVALIDPARAMETER);
 8001660:	4bb1      	ldr	r3, [pc, #708]	@ (8001928 <si5351_setupMultisynth+0x300>)
 8001662:	2201      	movs	r2, #1
 8001664:	761a      	strb	r2, [r3, #24]
   *
   * 	P3[19:0] = c
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <si5351_setupMultisynth+0x5a>
  {
    /* Integer mode */
    P1 = 128 * div - 512;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001672:	3b04      	subs	r3, #4
 8001674:	01db      	lsls	r3, r3, #7
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    P2 = num;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
    P3 = denom;
 800167c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e074      	b.n	800176c <si5351_setupMultisynth+0x144>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num/(float)denom)) - 512);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f82a 	bl	80006e0 <__aeabi_ui2d>
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800169a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800192c <si5351_setupMultisynth+0x304>
 80016ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b0:	ee17 0a90 	vmov	r0, s15
 80016b4:	f7ff f836 	bl	8000724 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	ec43 2b10 	vmov	d0, r2, r3
 80016c0:	f004 f86a 	bl	8005798 <floor>
 80016c4:	ec53 2b10 	vmov	r2, r3, d0
 80016c8:	4620      	mov	r0, r4
 80016ca:	4629      	mov	r1, r5
 80016cc:	f7fe fecc 	bl	8000468 <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80016e0:	f7fe fec0 	bl	8000464 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f8fa 	bl	80008e4 <__aeabi_d2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	01db      	lsls	r3, r3, #7
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fff1 	bl	80006e0 <__aeabi_ui2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001704:	f7fe ffec 	bl	80006e0 <__aeabi_ui2d>
 8001708:	4680      	mov	r8, r0
 800170a:	4689      	mov	r9, r1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001724:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800192c <si5351_setupMultisynth+0x304>
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	ee17 0a90 	vmov	r0, s15
 8001730:	f7fe fff8 	bl	8000724 <__aeabi_f2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	ec43 2b10 	vmov	d0, r2, r3
 800173c:	f004 f82c 	bl	8005798 <floor>
 8001740:	ec53 2b10 	vmov	r2, r3, d0
 8001744:	4640      	mov	r0, r8
 8001746:	4649      	mov	r1, r9
 8001748:	f7fe fd5e 	bl	8000208 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fe86 	bl	8000464 <__aeabi_dsub>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f8c0 	bl	80008e4 <__aeabi_d2uiz>
 8001764:	4603      	mov	r3, r0
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
    P3 = denom;
 8001768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  switch (output)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d00e      	beq.n	8001796 <si5351_setupMultisynth+0x16e>
 8001778:	2b02      	cmp	r3, #2
 800177a:	dc10      	bgt.n	800179e <si5351_setupMultisynth+0x176>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <si5351_setupMultisynth+0x15e>
 8001780:	2b01      	cmp	r3, #1
 8001782:	d004      	beq.n	800178e <si5351_setupMultisynth+0x166>
 8001784:	e00b      	b.n	800179e <si5351_setupMultisynth+0x176>
  {
    case 0:
      baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8001786:	232a      	movs	r3, #42	@ 0x2a
 8001788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 800178c:	e007      	b.n	800179e <si5351_setupMultisynth+0x176>
    case 1:
      baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800178e:	2332      	movs	r3, #50	@ 0x32
 8001790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 8001794:	e003      	b.n	800179e <si5351_setupMultisynth+0x176>
    case 2:
      baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8001796:	233a      	movs	r3, #58	@ 0x3a
 8001798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 800179c:	bf00      	nop
  }

  /* Set the MSx config registers */
  si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8);
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f998 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+1, (P3 & 0x000000FF));
 80017b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f98e 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16);	/* ToDo: Add DIVBY4 (>150MHz) and R0 support (<500kHz) later */
 80017c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017c8:	3302      	adds	r3, #2
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f000 f980 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8);
 80017e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017e4:	3303      	adds	r3, #3
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f000 f975 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+4, (P1 & 0x000000FF));
 80017f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017fa:	3304      	adds	r3, #4
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f96b 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) );
 800180a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800180e:	3305      	adds	r3, #5
 8001810:	b2d8      	uxtb	r0, r3
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	0b1b      	lsrs	r3, r3, #12
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f023 030f 	bic.w	r3, r3, #15
 800181c:	b2da      	uxtb	r2, r3
 800181e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	f000 f956 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8);
 8001834:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001838:	3306      	adds	r3, #6
 800183a:	b2da      	uxtb	r2, r3
 800183c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f000 f94b 	bl	8001ae0 <si5351_write8>
  si5351_write8( baseaddr+7, (P2 & 0x000000FF));
 800184a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800184e:	3307      	adds	r3, #7
 8001850:	b2db      	uxtb	r3, r3
 8001852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f941 	bl	8001ae0 <si5351_write8>


  if (pllSource == SI5351_PLL_A)
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d165      	bne.n	8001930 <si5351_setupMultisynth+0x308>
  {
          float fvco = m_si5351Config.plla_freq / (div + ( (float)num / (float)denom ));
 8001864:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <si5351_setupMultisynth+0x300>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800188e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189a:	edc7 7a06 	vstr	s15, [r7, #24]
          switch (output)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d02d      	beq.n	8001900 <si5351_setupMultisynth+0x2d8>
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	f300 80a3 	bgt.w	80019f0 <si5351_setupMultisynth+0x3c8>
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <si5351_setupMultisynth+0x28c>
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d013      	beq.n	80018da <si5351_setupMultisynth+0x2b2>
 80018b2:	e09d      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 80018b4:	69b8      	ldr	r0, [r7, #24]
 80018b6:	f7fe ff35 	bl	8000724 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b10 	vmov	d0, r2, r3
 80018c2:	f003 ff69 	bl	8005798 <floor>
 80018c6:	ec53 2b10 	vmov	r2, r3, d0
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f809 	bl	80008e4 <__aeabi_d2uiz>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <si5351_setupMultisynth+0x300>)
 80018d6:	6213      	str	r3, [r2, #32]
           break;
 80018d8:	e08a      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 80018da:	69b8      	ldr	r0, [r7, #24]
 80018dc:	f7fe ff22 	bl	8000724 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b10 	vmov	d0, r2, r3
 80018e8:	f003 ff56 	bl	8005798 <floor>
 80018ec:	ec53 2b10 	vmov	r2, r3, d0
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7fe fff6 	bl	80008e4 <__aeabi_d2uiz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <si5351_setupMultisynth+0x300>)
 80018fc:	6253      	str	r3, [r2, #36]	@ 0x24
           break;
 80018fe:	e077      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8001900:	69b8      	ldr	r0, [r7, #24]
 8001902:	f7fe ff0f 	bl	8000724 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	ec43 2b10 	vmov	d0, r2, r3
 800190e:	f003 ff43 	bl	8005798 <floor>
 8001912:	ec53 2b10 	vmov	r2, r3, d0
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7fe ffe3 	bl	80008e4 <__aeabi_d2uiz>
 800191e:	4603      	mov	r3, r0
 8001920:	4a01      	ldr	r2, [pc, #4]	@ (8001928 <si5351_setupMultisynth+0x300>)
 8001922:	6293      	str	r3, [r2, #40]	@ 0x28
           break;
 8001924:	e064      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
 8001926:	bf00      	nop
 8001928:	20000180 	.word	0x20000180
 800192c:	43000000 	.word	0x43000000
          }
  }
  else
  {
          float fvco = m_si5351Config.pllb_freq / (div + ( (float)num / (float)denom));
 8001930:	4b58      	ldr	r3, [pc, #352]	@ (8001a94 <si5351_setupMultisynth+0x46c>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800195a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800195e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001966:	edc7 7a07 	vstr	s15, [r7, #28]
          switch (output)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d02c      	beq.n	80019ca <si5351_setupMultisynth+0x3a2>
 8001970:	2b02      	cmp	r3, #2
 8001972:	dc3d      	bgt.n	80019f0 <si5351_setupMultisynth+0x3c8>
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <si5351_setupMultisynth+0x356>
 8001978:	2b01      	cmp	r3, #1
 800197a:	d013      	beq.n	80019a4 <si5351_setupMultisynth+0x37c>
 800197c:	e038      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 800197e:	69f8      	ldr	r0, [r7, #28]
 8001980:	f7fe fed0 	bl	8000724 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	ec43 2b10 	vmov	d0, r2, r3
 800198c:	f003 ff04 	bl	8005798 <floor>
 8001990:	ec53 2b10 	vmov	r2, r3, d0
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7fe ffa4 	bl	80008e4 <__aeabi_d2uiz>
 800199c:	4603      	mov	r3, r0
 800199e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a94 <si5351_setupMultisynth+0x46c>)
 80019a0:	6213      	str	r3, [r2, #32]
           break;
 80019a2:	e025      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 80019a4:	69f8      	ldr	r0, [r7, #28]
 80019a6:	f7fe febd 	bl	8000724 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ec43 2b10 	vmov	d0, r2, r3
 80019b2:	f003 fef1 	bl	8005798 <floor>
 80019b6:	ec53 2b10 	vmov	r2, r3, d0
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7fe ff91 	bl	80008e4 <__aeabi_d2uiz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a33      	ldr	r2, [pc, #204]	@ (8001a94 <si5351_setupMultisynth+0x46c>)
 80019c6:	6253      	str	r3, [r2, #36]	@ 0x24
           break;
 80019c8:	e012      	b.n	80019f0 <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 80019ca:	69f8      	ldr	r0, [r7, #28]
 80019cc:	f7fe feaa 	bl	8000724 <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b10 	vmov	d0, r2, r3
 80019d8:	f003 fede 	bl	8005798 <floor>
 80019dc:	ec53 2b10 	vmov	r2, r3, d0
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7fe ff7e 	bl	80008e4 <__aeabi_d2uiz>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001a94 <si5351_setupMultisynth+0x46c>)
 80019ec:	6293      	str	r3, [r2, #40]	@ 0x28
           break;
 80019ee:	bf00      	nop
  }



  /* Configure the clk control and enable the output */
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 80019f0:	230f      	movs	r3, #15
 80019f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (pllSource == SI5351_PLL_B) clkControlReg |= (1 << 5); /* Uses PLLB */
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <si5351_setupMultisynth+0x3e0>
 80019fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <si5351_setupMultisynth+0x3f2>
 8001a0e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a16:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  switch (output)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d020      	beq.n	8001a62 <si5351_setupMultisynth+0x43a>
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	dc30      	bgt.n	8001a86 <si5351_setupMultisynth+0x45e>
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <si5351_setupMultisynth+0x406>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d00d      	beq.n	8001a48 <si5351_setupMultisynth+0x420>
 8001a2c:	e02b      	b.n	8001a86 <si5351_setupMultisynth+0x45e>
  {
    case 0:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg));
 8001a2e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a32:	4619      	mov	r1, r3
 8001a34:	2010      	movs	r0, #16
 8001a36:	f000 f853 	bl	8001ae0 <si5351_write8>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	827b      	strh	r3, [r7, #18]
 8001a3e:	8a7b      	ldrh	r3, [r7, #18]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <si5351_setupMultisynth+0x454>
 8001a44:	8a7b      	ldrh	r3, [r7, #18]
 8001a46:	e01f      	b.n	8001a88 <si5351_setupMultisynth+0x460>
      break;
    case 1:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg));
 8001a48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2011      	movs	r0, #17
 8001a50:	f000 f846 	bl	8001ae0 <si5351_write8>
 8001a54:	4603      	mov	r3, r0
 8001a56:	82bb      	strh	r3, [r7, #20]
 8001a58:	8abb      	ldrh	r3, [r7, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <si5351_setupMultisynth+0x458>
 8001a5e:	8abb      	ldrh	r3, [r7, #20]
 8001a60:	e012      	b.n	8001a88 <si5351_setupMultisynth+0x460>
      break;
    case 2:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 8001a62:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a66:	4619      	mov	r1, r3
 8001a68:	2012      	movs	r0, #18
 8001a6a:	f000 f839 	bl	8001ae0 <si5351_write8>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	82fb      	strh	r3, [r7, #22]
 8001a72:	8afb      	ldrh	r3, [r7, #22]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <si5351_setupMultisynth+0x45c>
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	e005      	b.n	8001a88 <si5351_setupMultisynth+0x460>
      break;
 8001a7c:	bf00      	nop
 8001a7e:	e002      	b.n	8001a86 <si5351_setupMultisynth+0x45e>
      break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <si5351_setupMultisynth+0x45e>
      break;
 8001a84:	bf00      	nop
  }

  return ERROR_NONE;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3730      	adds	r7, #48	@ 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a92:	bf00      	nop
 8001a94:	20000180 	.word	0x20000180

08001a98 <si5351_enableOutputs>:
/*!
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t si5351_enableOutputs(uint8_t enabled)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  /* Make sure we've called init first */
  ASSERT(m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <si5351_enableOutputs+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <si5351_enableOutputs+0x16>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e011      	b.n	8001ad2 <si5351_enableOutputs+0x3a>

  /* Enabled desired outputs (see Register 3) */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00: 0xFF));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <si5351_enableOutputs+0x20>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <si5351_enableOutputs+0x22>
 8001ab8:	23ff      	movs	r3, #255	@ 0xff
 8001aba:	4619      	mov	r1, r3
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f80f 	bl	8001ae0 <si5351_write8>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	81fb      	strh	r3, [r7, #14]
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <si5351_enableOutputs+0x38>
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	e000      	b.n	8001ad2 <si5351_enableOutputs+0x3a>

  return ERROR_NONE;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000180 	.word	0x20000180

08001ae0 <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af04      	add	r7, sp, #16
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460a      	mov	r2, r1
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  
	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8001af4:	bf00      	nop
 8001af6:	2364      	movs	r3, #100	@ 0x64
 8001af8:	2203      	movs	r2, #3
 8001afa:	21c0      	movs	r1, #192	@ 0xc0
 8001afc:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <si5351_write8+0x54>)
 8001afe:	f001 fac7 	bl	8003090 <HAL_I2C_IsDeviceReady>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f6      	bne.n	8001af6 <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2364      	movs	r3, #100	@ 0x64
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	1dbb      	adds	r3, r7, #6
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	21c0      	movs	r1, #192	@ 0xc0
 8001b1c:	4805      	ldr	r0, [pc, #20]	@ (8001b34 <si5351_write8+0x54>)
 8001b1e:	f000 ff8b 	bl	8002a38 <HAL_I2C_Mem_Write>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	b29b      	uxth	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000084 	.word	0x20000084

08001b38 <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8001b48:	bf00      	nop
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	21c0      	movs	r1, #192	@ 0xc0
 8001b50:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <si5351_read8+0x50>)
 8001b52:	f001 fa9d 	bl	8003090 <HAL_I2C_IsDeviceReady>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f6      	bne.n	8001b4a <si5351_read8+0x12>

    status = HAL_I2C_Mem_Read(&hi2c1,							// i2c handle
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	463b      	mov	r3, r7
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	21c0      	movs	r1, #192	@ 0xc0
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <si5351_read8+0x50>)
 8001b72:	f001 f85b 	bl	8002c2c <HAL_I2C_Mem_Read>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	b29b      	uxth	r3, r3
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000084 	.word	0x20000084

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bca:	2007      	movs	r0, #7
 8001bcc:	f000 fac8 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	@ (8001c60 <HAL_I2C_MspInit+0x84>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12c      	bne.n	8001c58 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <HAL_I2C_MspInit+0x8c>)
 8001c38:	f000 fc26 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	4a07      	ldr	r2, [pc, #28]	@ (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	@ 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40005400 	.word	0x40005400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <HAL_UART_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12b      	bne.n	8001ce6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_UART_MspInit+0x88>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	4a17      	ldr	r2, [pc, #92]	@ (8001cf4 <HAL_UART_MspInit+0x88>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_UART_MspInit+0x88>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_UART_MspInit+0x88>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a10      	ldr	r2, [pc, #64]	@ (8001cf4 <HAL_UART_MspInit+0x88>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_UART_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc6:	230c      	movs	r3, #12
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <HAL_UART_MspInit+0x8c>)
 8001ce2:	f000 fbd1 	bl	8002488 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <NMI_Handler+0x4>

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f000 f933 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e00a      	b.n	8001d82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6c:	f3af 8000 	nop.w
 8001d70:	4601      	mov	r1, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	60ba      	str	r2, [r7, #8]
 8001d78:	b2ca      	uxtb	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dbf0      	blt.n	8001d6c <_read+0x12>
  }

  return len;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e009      	b.n	8001dba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	60ba      	str	r2, [r7, #8]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff4e 	bl	8000c50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbf1      	blt.n	8001da6 <_write+0x12>
  }
  return len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_close>:

int _close(int file)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df4:	605a      	str	r2, [r3, #4]
  return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_isatty>:

int _isatty(int file)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f003 fa30 	bl	80052c8 <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20020000 	.word	0x20020000
 8001e94:	00000400 	.word	0x00000400
 8001e98:	200001b8 	.word	0x200001b8
 8001e9c:	20000310 	.word	0x20000310

08001ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <SystemInit+0x20>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <SystemInit+0x20>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001efc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ec8:	f7ff ffea 	bl	8001ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f003 f9ef 	bl	80052d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7fe febd 	bl	8000c74 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f08:	080058f0 	.word	0x080058f0
  ldr r2, =_sbss
 8001f0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f10:	2000030c 	.word	0x2000030c

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <HAL_Init+0x40>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_Init+0x40>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <HAL_Init+0x40>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f90d 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff fe1e 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f917 	bl	80021ae <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f000 f8ed 	bl	8002176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	@ (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	200001bc 	.word	0x200001bc

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200001bc 	.word	0x200001bc

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	@ (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff8e 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	@ (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff47 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002188:	f7ff ff5c 	bl	8002044 <__NVIC_GetPriorityGrouping>
 800218c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff8e 	bl	80020b4 <NVIC_EncodePriority>
 8002198:	4602      	mov	r2, r0
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff5d 	bl	8002060 <__NVIC_SetPriority>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffb0 	bl	800211c <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ff06 	bl	8001fe4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e099      	b.n	8002318 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002204:	e00f      	b.n	8002226 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002206:	f7ff feed 	bl	8001fe4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b05      	cmp	r3, #5
 8002212:	d908      	bls.n	8002226 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e078      	b.n	8002318 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e8      	bne.n	8002206 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_DMA_Init+0x158>)
 8002240:	4013      	ands	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	2b04      	cmp	r3, #4
 800227e:	d107      	bne.n	8002290 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	4313      	orrs	r3, r2
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0307 	bic.w	r3, r3, #7
 80022a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d117      	bne.n	80022ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f85f 	bl	8002390 <DMA_CheckFifoParam>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022e6:	2301      	movs	r3, #1
 80022e8:	e016      	b.n	8002318 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f816 	bl	8002324 <DMA_CalcBaseAndBitshift>
 80022f8:	4603      	mov	r3, r0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	223f      	movs	r2, #63	@ 0x3f
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	f010803f 	.word	0xf010803f

08002324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3b10      	subs	r3, #16
 8002334:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <DMA_CalcBaseAndBitshift+0x64>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <DMA_CalcBaseAndBitshift+0x68>)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d909      	bls.n	8002366 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	1d1a      	adds	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	@ 0x58
 8002364:	e007      	b.n	8002376 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	aaaaaaab 	.word	0xaaaaaaab
 800238c:	080058d8 	.word	0x080058d8

08002390 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11f      	bne.n	80023ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d856      	bhi.n	800245e <DMA_CheckFifoParam+0xce>
 80023b0:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <DMA_CheckFifoParam+0x28>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023db 	.word	0x080023db
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	0800245f 	.word	0x0800245f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d046      	beq.n	8002462 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d8:	e043      	b.n	8002462 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023e2:	d140      	bne.n	8002466 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e8:	e03d      	b.n	8002466 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f2:	d121      	bne.n	8002438 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d837      	bhi.n	800246a <DMA_CheckFifoParam+0xda>
 80023fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <DMA_CheckFifoParam+0x70>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002411 	.word	0x08002411
 8002404:	08002417 	.word	0x08002417
 8002408:	08002411 	.word	0x08002411
 800240c:	08002429 	.word	0x08002429
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e030      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d025      	beq.n	800246e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002426:	e022      	b.n	800246e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002430:	d11f      	bne.n	8002472 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002436:	e01c      	b.n	8002472 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d903      	bls.n	8002446 <DMA_CheckFifoParam+0xb6>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d003      	beq.n	800244c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002444:	e018      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      break;
 800244a:	e015      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00e      	beq.n	8002476 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e00b      	b.n	8002476 <DMA_CheckFifoParam+0xe6>
      break;
 800245e:	bf00      	nop
 8002460:	e00a      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e008      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e006      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e004      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;   
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
    }
  } 
  
  return status; 
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e165      	b.n	8002770 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f040 8154 	bne.w	800276a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d005      	beq.n	80024da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d130      	bne.n	800253c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 0201 	and.w	r2, r3, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b03      	cmp	r3, #3
 8002546:	d017      	beq.n	8002578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d123      	bne.n	80025cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80ae 	beq.w	800276a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b5d      	ldr	r3, [pc, #372]	@ (8002788 <HAL_GPIO_Init+0x300>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	4a5c      	ldr	r2, [pc, #368]	@ (8002788 <HAL_GPIO_Init+0x300>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261c:	6453      	str	r3, [r2, #68]	@ 0x44
 800261e:	4b5a      	ldr	r3, [pc, #360]	@ (8002788 <HAL_GPIO_Init+0x300>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a58      	ldr	r2, [pc, #352]	@ (800278c <HAL_GPIO_Init+0x304>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4f      	ldr	r2, [pc, #316]	@ (8002790 <HAL_GPIO_Init+0x308>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d025      	beq.n	80026a2 <HAL_GPIO_Init+0x21a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4e      	ldr	r2, [pc, #312]	@ (8002794 <HAL_GPIO_Init+0x30c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01f      	beq.n	800269e <HAL_GPIO_Init+0x216>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4d      	ldr	r2, [pc, #308]	@ (8002798 <HAL_GPIO_Init+0x310>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d019      	beq.n	800269a <HAL_GPIO_Init+0x212>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4c      	ldr	r2, [pc, #304]	@ (800279c <HAL_GPIO_Init+0x314>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4b      	ldr	r2, [pc, #300]	@ (80027a0 <HAL_GPIO_Init+0x318>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00d      	beq.n	8002692 <HAL_GPIO_Init+0x20a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4a      	ldr	r2, [pc, #296]	@ (80027a4 <HAL_GPIO_Init+0x31c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x206>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a49      	ldr	r2, [pc, #292]	@ (80027a8 <HAL_GPIO_Init+0x320>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_GPIO_Init+0x202>
 8002686:	2306      	movs	r3, #6
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 800268a:	2307      	movs	r3, #7
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x21c>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	@ (800278c <HAL_GPIO_Init+0x304>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c2:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <HAL_GPIO_Init+0x324>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e6:	4a31      	ldr	r2, [pc, #196]	@ (80027ac <HAL_GPIO_Init+0x324>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ec:	4b2f      	ldr	r3, [pc, #188]	@ (80027ac <HAL_GPIO_Init+0x324>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002710:	4a26      	ldr	r2, [pc, #152]	@ (80027ac <HAL_GPIO_Init+0x324>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002716:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <HAL_GPIO_Init+0x324>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <HAL_GPIO_Init+0x324>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002740:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <HAL_GPIO_Init+0x324>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002764:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_GPIO_Init+0x324>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f ae96 	bls.w	80024a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	@ 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40021800 	.word	0x40021800
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e12b      	b.n	8002a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fa00 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	@ 0x24
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002814:	f001 fa10 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8002818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a81      	ldr	r2, [pc, #516]	@ (8002a24 <HAL_I2C_Init+0x274>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d807      	bhi.n	8002834 <HAL_I2C_Init+0x84>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a80      	ldr	r2, [pc, #512]	@ (8002a28 <HAL_I2C_Init+0x278>)
 8002828:	4293      	cmp	r3, r2
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e006      	b.n	8002842 <HAL_I2C_Init+0x92>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a7d      	ldr	r2, [pc, #500]	@ (8002a2c <HAL_I2C_Init+0x27c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	bf94      	ite	ls
 800283c:	2301      	movls	r3, #1
 800283e:	2300      	movhi	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0e7      	b.n	8002a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a78      	ldr	r2, [pc, #480]	@ (8002a30 <HAL_I2C_Init+0x280>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a6a      	ldr	r2, [pc, #424]	@ (8002a24 <HAL_I2C_Init+0x274>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d802      	bhi.n	8002884 <HAL_I2C_Init+0xd4>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	e009      	b.n	8002898 <HAL_I2C_Init+0xe8>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4a69      	ldr	r2, [pc, #420]	@ (8002a34 <HAL_I2C_Init+0x284>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	3301      	adds	r3, #1
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	495c      	ldr	r1, [pc, #368]	@ (8002a24 <HAL_I2C_Init+0x274>)
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d819      	bhi.n	80028ec <HAL_I2C_Init+0x13c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e59      	subs	r1, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028cc:	400b      	ands	r3, r1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_I2C_Init+0x138>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e59      	subs	r1, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e6:	e051      	b.n	800298c <HAL_I2C_Init+0x1dc>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e04f      	b.n	800298c <HAL_I2C_Init+0x1dc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_I2C_Init+0x168>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e012      	b.n	800293e <HAL_I2C_Init+0x18e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Init+0x196>
 8002942:	2301      	movs	r3, #1
 8002944:	e022      	b.n	800298c <HAL_I2C_Init+0x1dc>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10e      	bne.n	800296c <HAL_I2C_Init+0x1bc>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e58      	subs	r0, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296a:	e00f      	b.n	800298c <HAL_I2C_Init+0x1dc>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6809      	ldr	r1, [r1, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6911      	ldr	r1, [r2, #16]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	000186a0 	.word	0x000186a0
 8002a28:	001e847f 	.word	0x001e847f
 8002a2c:	003d08ff 	.word	0x003d08ff
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	10624dd3 	.word	0x10624dd3

08002a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a52:	f7ff fac7 	bl	8001fe4 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	f040 80d9 	bne.w	8002c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2319      	movs	r3, #25
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	496d      	ldr	r1, [pc, #436]	@ (8002c24 <HAL_I2C_Mem_Write+0x1ec>)
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fdb9 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0cc      	b.n	8002c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Mem_Write+0x56>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0c5      	b.n	8002c1a <HAL_I2C_Mem_Write+0x1e2>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d007      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	@ 0x21
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a4d      	ldr	r2, [pc, #308]	@ (8002c28 <HAL_I2C_Mem_Write+0x1f0>)
 8002af4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af6:	88f8      	ldrh	r0, [r7, #6]
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	4603      	mov	r3, r0
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fbf0 	bl	80032ec <I2C_RequestMemoryWrite>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d052      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e081      	b.n	8002c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fe7e 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_I2C_Mem_Write+0x180>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1aa      	bne.n	8002b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fe71 	bl	80038ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d107      	bne.n	8002be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e016      	b.n	8002c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00100002 	.word	0x00100002
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	@ 0x30
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	817b      	strh	r3, [r7, #10]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	813b      	strh	r3, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c46:	f7ff f9cd 	bl	8001fe4 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	f040 8214 	bne.w	8003082 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2319      	movs	r3, #25
 8002c60:	2201      	movs	r2, #1
 8002c62:	497b      	ldr	r1, [pc, #492]	@ (8002e50 <HAL_I2C_Mem_Read+0x224>)
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fcbf 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	e207      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x56>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e200      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d007      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2222      	movs	r2, #34	@ 0x22
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	@ 0x40
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e54 <HAL_I2C_Mem_Read+0x228>)
 8002ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cea:	88f8      	ldrh	r0, [r7, #6]
 8002cec:	893a      	ldrh	r2, [r7, #8]
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fb8c 	bl	8003418 <I2C_RequestMemoryRead>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1bc      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d113      	bne.n	8002d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e190      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d11b      	bne.n	8002d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e170      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d11b      	bne.n	8002dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	e150      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dd0:	e144      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	f200 80f1 	bhi.w	8002fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d123      	bne.n	8002e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fda7 	bl	800393c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e145      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e2a:	e117      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d14e      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4906      	ldr	r1, [pc, #24]	@ (8002e58 <HAL_I2C_Mem_Read+0x22c>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fbd2 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e11a      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
 8002e4e:	bf00      	nop
 8002e50:	00100002 	.word	0x00100002
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ed0:	e0c4      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	496c      	ldr	r1, [pc, #432]	@ (800308c <HAL_I2C_Mem_Read+0x460>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fb83 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cb      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	2200      	movs	r2, #0
 8002f36:	4955      	ldr	r1, [pc, #340]	@ (800308c <HAL_I2C_Mem_Read+0x460>)
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fb55 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e09d      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fbc:	e04e      	b.n	800305c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fcba 	bl	800393c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e058      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d124      	bne.n	800305c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	2b03      	cmp	r3, #3
 8003018:	d107      	bne.n	800302a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003028:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f aeb6 	bne.w	8002dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3728      	adds	r7, #40	@ 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	00010004 	.word	0x00010004

08003090 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7fe ffa0 	bl	8001fe4 <HAL_GetTick>
 80030a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	f040 8111 	bne.w	80032da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2319      	movs	r3, #25
 80030be:	2201      	movs	r2, #1
 80030c0:	4988      	ldr	r1, [pc, #544]	@ (80032e4 <HAL_I2C_IsDeviceReady+0x254>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fa90 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	e104      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_I2C_IsDeviceReady+0x50>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0fd      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d007      	beq.n	8003106 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2224      	movs	r2, #36	@ 0x24
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a70      	ldr	r2, [pc, #448]	@ (80032e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003128:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003138:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa4e 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003160:	d103      	bne.n	800316a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0b6      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800316e:	897b      	ldrh	r3, [r7, #10]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800317c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe ff31 	bl	8001fe4 <HAL_GetTick>
 8003182:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031b2:	e025      	b.n	8003200 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031b4:	f7fe ff16 	bl	8001fe4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d302      	bcc.n	80031ca <HAL_I2C_IsDeviceReady+0x13a>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	22a0      	movs	r2, #160	@ 0xa0
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2ba0      	cmp	r3, #160	@ 0xa0
 800320a:	d005      	beq.n	8003218 <HAL_I2C_IsDeviceReady+0x188>
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_I2C_IsDeviceReady+0x188>
 8003212:	7dbb      	ldrb	r3, [r7, #22]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0cd      	beq.n	80031b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b02      	cmp	r3, #2
 800322c:	d129      	bne.n	8003282 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800323c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2319      	movs	r3, #25
 800325a:	2201      	movs	r2, #1
 800325c:	4921      	ldr	r1, [pc, #132]	@ (80032e4 <HAL_I2C_IsDeviceReady+0x254>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f9c2 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e036      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e02c      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003290:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800329a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2319      	movs	r3, #25
 80032a2:	2201      	movs	r2, #1
 80032a4:	490f      	ldr	r1, [pc, #60]	@ (80032e4 <HAL_I2C_IsDeviceReady+0x254>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f99e 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e012      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f4ff af32 	bcc.w	800312a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	00100002 	.word	0x00100002
 80032e8:	ffff0000 	.word	0xffff0000

080032ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	460b      	mov	r3, r1
 8003300:	813b      	strh	r3, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2200      	movs	r2, #0
 800331e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f960 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333c:	d103      	bne.n	8003346 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e05f      	b.n	800340a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	492d      	ldr	r1, [pc, #180]	@ (8003414 <I2C_RequestMemoryWrite+0x128>)
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f9bb 	bl	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04c      	b.n	800340a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa46 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e02b      	b.n	800340a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b8:	893b      	ldrh	r3, [r7, #8]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	e021      	b.n	8003408 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fa20 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e005      	b.n	800340a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fe:	893b      	ldrh	r3, [r7, #8]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00010002 	.word	0x00010002

08003418 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003440:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	2200      	movs	r2, #0
 800345a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8c2 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003478:	d103      	bne.n	8003482 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0aa      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003486:	897b      	ldrh	r3, [r7, #10]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	4952      	ldr	r1, [pc, #328]	@ (80035e4 <I2C_RequestMemoryRead+0x1cc>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f91d 	bl	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e097      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c4:	6a39      	ldr	r1, [r7, #32]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f9a8 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e076      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f4:	893b      	ldrh	r3, [r7, #8]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	611a      	str	r2, [r3, #16]
 80034fe:	e021      	b.n	8003544 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003500:	893b      	ldrh	r3, [r7, #8]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	b29b      	uxth	r3, r3
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003510:	6a39      	ldr	r1, [r7, #32]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f982 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	2b04      	cmp	r3, #4
 8003524:	d107      	bne.n	8003536 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e050      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800353a:	893b      	ldrh	r3, [r7, #8]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003546:	6a39      	ldr	r1, [r7, #32]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f967 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	2b04      	cmp	r3, #4
 800355a:	d107      	bne.n	800356c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e035      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800357e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2200      	movs	r2, #0
 8003588:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f82b 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a6:	d103      	bne.n	80035b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e013      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	4906      	ldr	r1, [pc, #24]	@ (80035e4 <I2C_RequestMemoryRead+0x1cc>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f886 	bl	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00010002 	.word	0x00010002

080035e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f8:	e048      	b.n	800368c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d044      	beq.n	800368c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fe fcef 	bl	8001fe4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d139      	bne.n	800368c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10d      	bne.n	800363e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	e00c      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x70>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	43da      	mvns	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	d116      	bne.n	800368c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e023      	b.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10d      	bne.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	43da      	mvns	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	e00c      	b.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d093      	beq.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ea:	e071      	b.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fa:	d123      	bne.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0204 	orr.w	r2, r3, #4
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e067      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d041      	beq.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374c:	f7fe fc4a 	bl	8001fe4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d136      	bne.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10c      	bne.n	8003786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e00b      	b.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	43da      	mvns	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4013      	ands	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e021      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d10c      	bne.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e00b      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f af6d 	bne.w	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003828:	e034      	b.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8e3 	bl	80039f6 <I2C_IsAcknowledgeFailed>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e034      	b.n	80038a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d028      	beq.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe fbcf 	bl	8001fe4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11d      	bne.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d016      	beq.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e007      	b.n	80038a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d1c3      	bne.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b8:	e034      	b.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f89b 	bl	80039f6 <I2C_IsAcknowledgeFailed>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e034      	b.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d028      	beq.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7fe fb87 	bl	8001fe4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11d      	bne.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d016      	beq.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e007      	b.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d1c3      	bne.n	80038ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003948:	e049      	b.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b10      	cmp	r3, #16
 8003956:	d119      	bne.n	800398c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0210 	mvn.w	r2, #16
 8003960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e030      	b.n	80039ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe fb2a 	bl	8001fe4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11d      	bne.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b40      	cmp	r3, #64	@ 0x40
 80039ae:	d016      	beq.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e007      	b.n	80039ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d1ae      	bne.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0c:	d11b      	bne.n	8003a46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0cc      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b68      	ldr	r3, [pc, #416]	@ (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d90c      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b65      	ldr	r3, [pc, #404]	@ (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b63      	ldr	r3, [pc, #396]	@ (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b8      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b59      	ldr	r3, [pc, #356]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a58      	ldr	r2, [pc, #352]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac0:	4b53      	ldr	r3, [pc, #332]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b50      	ldr	r3, [pc, #320]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	494d      	ldr	r1, [pc, #308]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d044      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b47      	ldr	r3, [pc, #284]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d119      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e067      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b37      	ldr	r3, [pc, #220]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4934      	ldr	r1, [pc, #208]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fe fa4e 	bl	8001fe4 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe fa4a 	bl	8001fe4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2b      	ldr	r3, [pc, #172]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b25      	ldr	r3, [pc, #148]	@ (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d20c      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b22      	ldr	r3, [pc, #136]	@ (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b20      	ldr	r3, [pc, #128]	@ (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e032      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4916      	ldr	r1, [pc, #88]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490e      	ldr	r1, [pc, #56]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bda:	f000 f855 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	490a      	ldr	r1, [pc, #40]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	5ccb      	ldrb	r3, [r1, r3]
 8003bee:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf2:	4a09      	ldr	r2, [pc, #36]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f9ae 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023c00 	.word	0x40023c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	080058c0 	.word	0x080058c0
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	20000004 	.word	0x20000004

08003c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c24:	4b03      	ldr	r3, [pc, #12]	@ (8003c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000000 	.word	0x20000000

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	@ (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	080058d0 	.word	0x080058d0

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c64:	f7ff ffdc 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0b5b      	lsrs	r3, r3, #13
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	@ (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	080058d0 	.word	0x080058d0

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b0ae      	sub	sp, #184	@ 0xb8
 8003c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cae:	4bcb      	ldr	r3, [pc, #812]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	f200 8206 	bhi.w	80040c8 <HAL_RCC_GetSysClockFreq+0x440>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	080040c9 	.word	0x080040c9
 8003ccc:	080040c9 	.word	0x080040c9
 8003cd0:	080040c9 	.word	0x080040c9
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	080040c9 	.word	0x080040c9
 8003cdc:	080040c9 	.word	0x080040c9
 8003ce0:	080040c9 	.word	0x080040c9
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	080040c9 	.word	0x080040c9
 8003cec:	080040c9 	.word	0x080040c9
 8003cf0:	080040c9 	.word	0x080040c9
 8003cf4:	08003ef9 	.word	0x08003ef9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cfe:	e1e7      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d00:	4bb8      	ldr	r3, [pc, #736]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d06:	e1e3      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d08:	4bb4      	ldr	r3, [pc, #720]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d14:	4bb1      	ldr	r3, [pc, #708]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d071      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d20:	4bae      	ldr	r3, [pc, #696]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	f04f 0000 	mov.w	r0, #0
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	0159      	lsls	r1, r3, #5
 8003d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d58:	0150      	lsls	r0, r2, #5
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4621      	mov	r1, r4
 8003d60:	1a51      	subs	r1, r2, r1
 8003d62:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d64:	4629      	mov	r1, r5
 8003d66:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d78:	4649      	mov	r1, r9
 8003d7a:	018b      	lsls	r3, r1, #6
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d82:	4641      	mov	r1, r8
 8003d84:	018a      	lsls	r2, r1, #6
 8003d86:	4641      	mov	r1, r8
 8003d88:	1a51      	subs	r1, r2, r1
 8003d8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003da0:	4649      	mov	r1, r9
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4641      	mov	r1, r8
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4641      	mov	r1, r8
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4622      	mov	r2, r4
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dba:	462b      	mov	r3, r5
 8003dbc:	460a      	mov	r2, r1
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	024b      	lsls	r3, r1, #9
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dda:	4621      	mov	r1, r4
 8003ddc:	024a      	lsls	r2, r1, #9
 8003dde:	4610      	mov	r0, r2
 8003de0:	4619      	mov	r1, r3
 8003de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003df0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003df4:	f7fc fd96 	bl	8000924 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e02:	e067      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e04:	4b75      	ldr	r3, [pc, #468]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e1e:	2300      	movs	r3, #0
 8003e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e26:	4622      	mov	r2, r4
 8003e28:	462b      	mov	r3, r5
 8003e2a:	f04f 0000 	mov.w	r0, #0
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	0159      	lsls	r1, r3, #5
 8003e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e38:	0150      	lsls	r0, r2, #5
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4621      	mov	r1, r4
 8003e40:	1a51      	subs	r1, r2, r1
 8003e42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e44:	4629      	mov	r1, r5
 8003e46:	eb63 0301 	sbc.w	r3, r3, r1
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e58:	4649      	mov	r1, r9
 8003e5a:	018b      	lsls	r3, r1, #6
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e62:	4641      	mov	r1, r8
 8003e64:	018a      	lsls	r2, r1, #6
 8003e66:	4641      	mov	r1, r8
 8003e68:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e86:	4692      	mov	sl, r2
 8003e88:	469b      	mov	fp, r3
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	eb1a 0303 	adds.w	r3, sl, r3
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	462b      	mov	r3, r5
 8003e94:	eb4b 0303 	adc.w	r3, fp, r3
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	028b      	lsls	r3, r1, #10
 8003eaa:	4621      	mov	r1, r4
 8003eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	028a      	lsls	r2, r1, #10
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ec0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ec2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ec6:	f7fc fd2d 	bl	8000924 <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4613      	mov	r3, r2
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ed4:	4b41      	ldr	r3, [pc, #260]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ef6:	e0eb      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4b38      	ldr	r3, [pc, #224]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f04:	4b35      	ldr	r3, [pc, #212]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d06b      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4b32      	ldr	r3, [pc, #200]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	2200      	movs	r2, #0
 8003f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f24:	2300      	movs	r3, #0
 8003f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	462b      	mov	r3, r5
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	0159      	lsls	r1, r3, #5
 8003f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3e:	0150      	lsls	r0, r2, #5
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4621      	mov	r1, r4
 8003f46:	1a51      	subs	r1, r2, r1
 8003f48:	61b9      	str	r1, [r7, #24]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f5e:	4659      	mov	r1, fp
 8003f60:	018b      	lsls	r3, r1, #6
 8003f62:	4651      	mov	r1, sl
 8003f64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f68:	4651      	mov	r1, sl
 8003f6a:	018a      	lsls	r2, r1, #6
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	ebb2 0801 	subs.w	r8, r2, r1
 8003f72:	4659      	mov	r1, fp
 8003f74:	eb63 0901 	sbc.w	r9, r3, r1
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8c:	4690      	mov	r8, r2
 8003f8e:	4699      	mov	r9, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	eb18 0303 	adds.w	r3, r8, r3
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	462b      	mov	r3, r5
 8003f9a:	eb49 0303 	adc.w	r3, r9, r3
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fac:	4629      	mov	r1, r5
 8003fae:	024b      	lsls	r3, r1, #9
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	024a      	lsls	r2, r1, #9
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003fc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fcc:	f7fc fcaa 	bl	8000924 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fda:	e065      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x420>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	2200      	movs	r2, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ffe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	0159      	lsls	r1, r3, #5
 8004010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004014:	0150      	lsls	r0, r2, #5
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4641      	mov	r1, r8
 800401c:	1a51      	subs	r1, r2, r1
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	4649      	mov	r1, r9
 8004022:	eb63 0301 	sbc.w	r3, r3, r1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004034:	4659      	mov	r1, fp
 8004036:	018b      	lsls	r3, r1, #6
 8004038:	4651      	mov	r1, sl
 800403a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800403e:	4651      	mov	r1, sl
 8004040:	018a      	lsls	r2, r1, #6
 8004042:	4651      	mov	r1, sl
 8004044:	1a54      	subs	r4, r2, r1
 8004046:	4659      	mov	r1, fp
 8004048:	eb63 0501 	sbc.w	r5, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	00eb      	lsls	r3, r5, #3
 8004056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	4643      	mov	r3, r8
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	464b      	mov	r3, r9
 8004068:	eb45 0303 	adc.w	r3, r5, r3
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800407a:	4629      	mov	r1, r5
 800407c:	028b      	lsls	r3, r1, #10
 800407e:	4621      	mov	r1, r4
 8004080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004084:	4621      	mov	r1, r4
 8004086:	028a      	lsls	r2, r1, #10
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004090:	2200      	movs	r2, #0
 8004092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004094:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004096:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800409a:	f7fc fc43 	bl	8000924 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4613      	mov	r3, r2
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040a8:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	0f1b      	lsrs	r3, r3, #28
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80040b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040c6:	e003      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	37b8      	adds	r7, #184	@ 0xb8
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e28d      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 8083 	beq.w	800420e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004108:	4b94      	ldr	r3, [pc, #592]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b04      	cmp	r3, #4
 8004112:	d019      	beq.n	8004148 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004114:	4b91      	ldr	r3, [pc, #580]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
        || \
 800411c:	2b08      	cmp	r3, #8
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004120:	4b8e      	ldr	r3, [pc, #568]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800412c:	d00c      	beq.n	8004148 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412e:	4b8b      	ldr	r3, [pc, #556]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d112      	bne.n	8004160 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413a:	4b88      	ldr	r3, [pc, #544]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004146:	d10b      	bne.n	8004160 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	4b84      	ldr	r3, [pc, #528]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d05b      	beq.n	800420c <HAL_RCC_OscConfig+0x124>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d157      	bne.n	800420c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e25a      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x90>
 800416a:	4b7c      	ldr	r3, [pc, #496]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7b      	ldr	r2, [pc, #492]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e01d      	b.n	80041b4 <HAL_RCC_OscConfig+0xcc>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0xb4>
 8004182:	4b76      	ldr	r3, [pc, #472]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a75      	ldr	r2, [pc, #468]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b73      	ldr	r3, [pc, #460]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a72      	ldr	r2, [pc, #456]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0xcc>
 800419c:	4b6f      	ldr	r3, [pc, #444]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6e      	ldr	r2, [pc, #440]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b6c      	ldr	r3, [pc, #432]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a6b      	ldr	r2, [pc, #428]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd ff12 	bl	8001fe4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd ff0e 	bl	8001fe4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	@ 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e21f      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b61      	ldr	r3, [pc, #388]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0xdc>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fefe 	bl	8001fe4 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd fefa 	bl	8001fe4 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	@ 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e20b      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	4b57      	ldr	r3, [pc, #348]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x104>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06f      	beq.n	80042fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800421a:	4b50      	ldr	r3, [pc, #320]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b00      	cmp	r3, #0
 8004224:	d017      	beq.n	8004256 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004226:	4b4d      	ldr	r3, [pc, #308]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
        || \
 800422e:	2b08      	cmp	r3, #8
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004232:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423e:	4b47      	ldr	r3, [pc, #284]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d11c      	bne.n	8004284 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424a:	4b44      	ldr	r3, [pc, #272]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x186>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1d3      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426e:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4937      	ldr	r1, [pc, #220]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e03a      	b.n	80042fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <HAL_RCC_OscConfig+0x278>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd fea7 	bl	8001fe4 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429a:	f7fd fea3 	bl	8001fe4 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1b4      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	4b2b      	ldr	r3, [pc, #172]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4925      	ldr	r1, [pc, #148]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ce:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <HAL_RCC_OscConfig+0x278>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fe86 	bl	8001fe4 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fd fe82 	bl	8001fe4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e193      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d036      	beq.n	8004374 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <HAL_RCC_OscConfig+0x27c>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd fe66 	bl	8001fe4 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431c:	f7fd fe62 	bl	8001fe4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e173      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 8004330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x234>
 800433a:	e01b      	b.n	8004374 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_OscConfig+0x27c>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd fe4f 	bl	8001fe4 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	e00e      	b.n	8004368 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434a:	f7fd fe4b 	bl	8001fe4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d907      	bls.n	8004368 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e15c      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
 800435c:	40023800 	.word	0x40023800
 8004360:	42470000 	.word	0x42470000
 8004364:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	4b8a      	ldr	r3, [pc, #552]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800436a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ea      	bne.n	800434a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8097 	beq.w	80044b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b83      	ldr	r3, [pc, #524]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	4b7f      	ldr	r3, [pc, #508]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	4a7e      	ldr	r2, [pc, #504]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b2:	4b79      	ldr	r3, [pc, #484]	@ (8004598 <HAL_RCC_OscConfig+0x4b0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d118      	bne.n	80043f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043be:	4b76      	ldr	r3, [pc, #472]	@ (8004598 <HAL_RCC_OscConfig+0x4b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	@ (8004598 <HAL_RCC_OscConfig+0x4b0>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ca:	f7fd fe0b 	bl	8001fe4 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fd fe07 	bl	8001fe4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e118      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004598 <HAL_RCC_OscConfig+0x4b0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x31e>
 80043f8:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fc:	4a65      	ldr	r2, [pc, #404]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	@ 0x70
 8004404:	e01c      	b.n	8004440 <HAL_RCC_OscConfig+0x358>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x340>
 800440e:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	4a60      	ldr	r2, [pc, #384]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	6713      	str	r3, [r2, #112]	@ 0x70
 800441a:	4b5e      	ldr	r3, [pc, #376]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	4a5d      	ldr	r2, [pc, #372]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0x358>
 8004428:	4b5a      	ldr	r3, [pc, #360]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4a59      	ldr	r2, [pc, #356]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	@ 0x70
 8004434:	4b57      	ldr	r3, [pc, #348]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a56      	ldr	r2, [pc, #344]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	f023 0304 	bic.w	r3, r3, #4
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fdcc 	bl	8001fe4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd fdc8 	bl	8001fe4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0d7      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	4b4b      	ldr	r3, [pc, #300]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ee      	beq.n	8004450 <HAL_RCC_OscConfig+0x368>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd fdb6 	bl	8001fe4 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fd fdb2 	bl	8001fe4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0c1      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004492:	4b40      	ldr	r3, [pc, #256]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80ad 	beq.w	8004614 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ba:	4b36      	ldr	r3, [pc, #216]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d060      	beq.n	8004588 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d145      	bne.n	800455a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b33      	ldr	r3, [pc, #204]	@ (800459c <HAL_RCC_OscConfig+0x4b4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fd fd86 	bl	8001fe4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fd fd82 	bl	8001fe4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e093      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	3b01      	subs	r3, #1
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	491b      	ldr	r1, [pc, #108]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452c:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <HAL_RCC_OscConfig+0x4b4>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fd fd57 	bl	8001fe4 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453a:	f7fd fd53 	bl	8001fe4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e064      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x452>
 8004558:	e05c      	b.n	8004614 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <HAL_RCC_OscConfig+0x4b4>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fd40 	bl	8001fe4 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd fd3c 	bl	8001fe4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e04d      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <HAL_RCC_OscConfig+0x4ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x480>
 8004586:	e045      	b.n	8004614 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e040      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
 8004594:	40023800 	.word	0x40023800
 8004598:	40007000 	.word	0x40007000
 800459c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004620 <HAL_RCC_OscConfig+0x538>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d030      	beq.n	8004610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d129      	bne.n	8004610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d122      	bne.n	8004610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045d0:	4013      	ands	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d8:	4293      	cmp	r3, r2
 80045da:	d119      	bne.n	8004610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	3b01      	subs	r3, #1
 80045ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10f      	bne.n	8004610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800

08004624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e042      	b.n	80046bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fb0e 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	@ 0x24
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f973 	bl	8004954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800467c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800468c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800469c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	@ 0x28
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d175      	bne.n	80047d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_Transmit+0x2c>
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e06e      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2221      	movs	r2, #33	@ 0x21
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004702:	f7fd fc6f 	bl	8001fe4 <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d108      	bne.n	8004730 <HAL_UART_Transmit+0x6c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e003      	b.n	8004738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004738:	e02e      	b.n	8004798 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	@ 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f848 	bl	80047da <UART_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e03a      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	3302      	adds	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e007      	b.n	800478a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3301      	adds	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1cb      	bne.n	800473a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2140      	movs	r1, #64	@ 0x40
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f814 	bl	80047da <UART_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	e03b      	b.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d037      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f4:	f7fd fbf6 	bl	8001fe4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <UART_WaitOnFlagUntilTimeout+0x30>
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e03a      	b.n	8004884 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d023      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8a>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b80      	cmp	r3, #128	@ 0x80
 8004820:	d020      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b40      	cmp	r3, #64	@ 0x40
 8004826:	d01d      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b08      	cmp	r3, #8
 8004834:	d116      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f81d 	bl	800488c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2208      	movs	r2, #8
 8004856:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e00f      	b.n	8004884 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	429a      	cmp	r2, r3
 8004880:	d0b4      	beq.n	80047ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b095      	sub	sp, #84	@ 0x54
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80048b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3314      	adds	r3, #20
 80048ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	d119      	bne.n	8004938 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	60bb      	str	r3, [r7, #8]
   return(result);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f023 0310 	bic.w	r3, r3, #16
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004924:	61ba      	str	r2, [r7, #24]
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6979      	ldr	r1, [r7, #20]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	613b      	str	r3, [r7, #16]
   return(result);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004946:	bf00      	nop
 8004948:	3754      	adds	r7, #84	@ 0x54
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b0c0      	sub	sp, #256	@ 0x100
 800495a:	af00      	add	r7, sp, #0
 800495c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	68d9      	ldr	r1, [r3, #12]
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	ea40 0301 	orr.w	r3, r0, r1
 800497c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	431a      	orrs	r2, r3
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	431a      	orrs	r2, r3
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049ac:	f021 010c 	bic.w	r1, r1, #12
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049ba:	430b      	orrs	r3, r1
 80049bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	6999      	ldr	r1, [r3, #24]
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	ea40 0301 	orr.w	r3, r0, r1
 80049da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004c20 <UART_SetConfig+0x2cc>)
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d005      	beq.n	80049f4 <UART_SetConfig+0xa0>
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004c24 <UART_SetConfig+0x2d0>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d104      	bne.n	80049fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049f4:	f7ff f934 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 80049f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049fc:	e003      	b.n	8004a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049fe:	f7ff f91b 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8004a02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a10:	f040 810c 	bne.w	8004c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	1891      	adds	r1, r2, r2
 8004a2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a2e:	415b      	adcs	r3, r3
 8004a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a36:	4621      	mov	r1, r4
 8004a38:	eb12 0801 	adds.w	r8, r2, r1
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	eb43 0901 	adc.w	r9, r3, r1
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a56:	4690      	mov	r8, r2
 8004a58:	4699      	mov	r9, r3
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	eb18 0303 	adds.w	r3, r8, r3
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a64:	462b      	mov	r3, r5
 8004a66:	eb49 0303 	adc.w	r3, r9, r3
 8004a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a82:	460b      	mov	r3, r1
 8004a84:	18db      	adds	r3, r3, r3
 8004a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a88:	4613      	mov	r3, r2
 8004a8a:	eb42 0303 	adc.w	r3, r2, r3
 8004a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a98:	f7fb ff44 	bl	8000924 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4b61      	ldr	r3, [pc, #388]	@ (8004c28 <UART_SetConfig+0x2d4>)
 8004aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	011c      	lsls	r4, r3, #4
 8004aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	1891      	adds	r1, r2, r2
 8004ac2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ac4:	415b      	adcs	r3, r3
 8004ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004acc:	4641      	mov	r1, r8
 8004ace:	eb12 0a01 	adds.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aec:	4692      	mov	sl, r2
 8004aee:	469b      	mov	fp, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	eb1a 0303 	adds.w	r3, sl, r3
 8004af6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004afa:	464b      	mov	r3, r9
 8004afc:	eb4b 0303 	adc.w	r3, fp, r3
 8004b00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	18db      	adds	r3, r3, r3
 8004b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b1e:	4613      	mov	r3, r2
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b2e:	f7fb fef9 	bl	8000924 <__aeabi_uldivmod>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	4b3b      	ldr	r3, [pc, #236]	@ (8004c28 <UART_SetConfig+0x2d4>)
 8004b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2264      	movs	r2, #100	@ 0x64
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	1acb      	subs	r3, r1, r3
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b4e:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <UART_SetConfig+0x2d4>)
 8004b50:	fba3 2302 	umull	r2, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b5c:	441c      	add	r4, r3
 8004b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	1891      	adds	r1, r2, r2
 8004b76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b78:	415b      	adcs	r3, r3
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b80:	4641      	mov	r1, r8
 8004b82:	1851      	adds	r1, r2, r1
 8004b84:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b86:	4649      	mov	r1, r9
 8004b88:	414b      	adcs	r3, r1
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b98:	4659      	mov	r1, fp
 8004b9a:	00cb      	lsls	r3, r1, #3
 8004b9c:	4651      	mov	r1, sl
 8004b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	00ca      	lsls	r2, r1, #3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	4642      	mov	r2, r8
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	eb42 0303 	adc.w	r3, r2, r3
 8004bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	18db      	adds	r3, r3, r3
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bda:	4613      	mov	r3, r2
 8004bdc:	eb42 0303 	adc.w	r3, r2, r3
 8004be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bea:	f7fb fe9b 	bl	8000924 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	@ 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	3332      	adds	r3, #50	@ 0x32
 8004c06:	4a08      	ldr	r2, [pc, #32]	@ (8004c28 <UART_SetConfig+0x2d4>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	f003 0207 	and.w	r2, r3, #7
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4422      	add	r2, r4
 8004c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c1c:	e106      	b.n	8004e2c <UART_SetConfig+0x4d8>
 8004c1e:	bf00      	nop
 8004c20:	40011000 	.word	0x40011000
 8004c24:	40011400 	.word	0x40011400
 8004c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c3e:	4642      	mov	r2, r8
 8004c40:	464b      	mov	r3, r9
 8004c42:	1891      	adds	r1, r2, r2
 8004c44:	6239      	str	r1, [r7, #32]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c4e:	4641      	mov	r1, r8
 8004c50:	1854      	adds	r4, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb43 0501 	adc.w	r5, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	00eb      	lsls	r3, r5, #3
 8004c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c66:	00e2      	lsls	r2, r4, #3
 8004c68:	4614      	mov	r4, r2
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	4643      	mov	r3, r8
 8004c6e:	18e3      	adds	r3, r4, r3
 8004c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c74:	464b      	mov	r3, r9
 8004c76:	eb45 0303 	adc.w	r3, r5, r3
 8004c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	008b      	lsls	r3, r1, #2
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	008a      	lsls	r2, r1, #2
 8004ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cac:	f7fb fe3a 	bl	8000924 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b60      	ldr	r3, [pc, #384]	@ (8004e38 <UART_SetConfig+0x4e4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	61b9      	str	r1, [r7, #24]
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	1851      	adds	r1, r2, r1
 8004ce4:	6139      	str	r1, [r7, #16]
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	414b      	adcs	r3, r1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	00cb      	lsls	r3, r1, #3
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d02:	4651      	mov	r1, sl
 8004d04:	00ca      	lsls	r2, r1, #3
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d14:	464b      	mov	r3, r9
 8004d16:	460a      	mov	r2, r1
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d38:	4649      	mov	r1, r9
 8004d3a:	008b      	lsls	r3, r1, #2
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d42:	4641      	mov	r1, r8
 8004d44:	008a      	lsls	r2, r1, #2
 8004d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d4a:	f7fb fdeb 	bl	8000924 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	4b38      	ldr	r3, [pc, #224]	@ (8004e38 <UART_SetConfig+0x4e4>)
 8004d56:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2264      	movs	r2, #100	@ 0x64
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	3332      	adds	r3, #50	@ 0x32
 8004d68:	4a33      	ldr	r2, [pc, #204]	@ (8004e38 <UART_SetConfig+0x4e4>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d74:	441c      	add	r4, r3
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6039      	str	r1, [r7, #0]
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	460a      	mov	r2, r1
 8004dca:	eb42 0303 	adc.w	r3, r2, r3
 8004dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dda:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004de8:	4649      	mov	r1, r9
 8004dea:	008b      	lsls	r3, r1, #2
 8004dec:	4641      	mov	r1, r8
 8004dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df2:	4641      	mov	r1, r8
 8004df4:	008a      	lsls	r2, r1, #2
 8004df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dfa:	f7fb fd93 	bl	8000924 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <UART_SetConfig+0x4e4>)
 8004e04:	fba3 1302 	umull	r1, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2164      	movs	r1, #100	@ 0x64
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	3332      	adds	r3, #50	@ 0x32
 8004e16:	4a08      	ldr	r2, [pc, #32]	@ (8004e38 <UART_SetConfig+0x4e4>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4422      	add	r2, r4
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e32:	46bd      	mov	sp, r7
 8004e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e38:	51eb851f 	.word	0x51eb851f

08004e3c <std>:
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	4604      	mov	r4, r0
 8004e42:	e9c0 3300 	strd	r3, r3, [r0]
 8004e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e4a:	6083      	str	r3, [r0, #8]
 8004e4c:	8181      	strh	r1, [r0, #12]
 8004e4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e50:	81c2      	strh	r2, [r0, #14]
 8004e52:	6183      	str	r3, [r0, #24]
 8004e54:	4619      	mov	r1, r3
 8004e56:	2208      	movs	r2, #8
 8004e58:	305c      	adds	r0, #92	@ 0x5c
 8004e5a:	f000 f9e7 	bl	800522c <memset>
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <std+0x58>)
 8004e60:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <std+0x5c>)
 8004e64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <std+0x60>)
 8004e68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <std+0x64>)
 8004e6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <std+0x68>)
 8004e70:	6224      	str	r4, [r4, #32]
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d006      	beq.n	8004e84 <std+0x48>
 8004e76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e7a:	4294      	cmp	r4, r2
 8004e7c:	d002      	beq.n	8004e84 <std+0x48>
 8004e7e:	33d0      	adds	r3, #208	@ 0xd0
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d105      	bne.n	8004e90 <std+0x54>
 8004e84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f000 ba46 	b.w	800531c <__retarget_lock_init_recursive>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	bf00      	nop
 8004e94:	0800507d 	.word	0x0800507d
 8004e98:	0800509f 	.word	0x0800509f
 8004e9c:	080050d7 	.word	0x080050d7
 8004ea0:	080050fb 	.word	0x080050fb
 8004ea4:	200001c0 	.word	0x200001c0

08004ea8 <stdio_exit_handler>:
 8004ea8:	4a02      	ldr	r2, [pc, #8]	@ (8004eb4 <stdio_exit_handler+0xc>)
 8004eaa:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <stdio_exit_handler+0x10>)
 8004eac:	4803      	ldr	r0, [pc, #12]	@ (8004ebc <stdio_exit_handler+0x14>)
 8004eae:	f000 b869 	b.w	8004f84 <_fwalk_sglue>
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	0800561d 	.word	0x0800561d
 8004ebc:	2000001c 	.word	0x2000001c

08004ec0 <cleanup_stdio>:
 8004ec0:	6841      	ldr	r1, [r0, #4]
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <cleanup_stdio+0x34>)
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	4604      	mov	r4, r0
 8004eca:	d001      	beq.n	8004ed0 <cleanup_stdio+0x10>
 8004ecc:	f000 fba6 	bl	800561c <_fflush_r>
 8004ed0:	68a1      	ldr	r1, [r4, #8]
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <cleanup_stdio+0x38>)
 8004ed4:	4299      	cmp	r1, r3
 8004ed6:	d002      	beq.n	8004ede <cleanup_stdio+0x1e>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 fb9f 	bl	800561c <_fflush_r>
 8004ede:	68e1      	ldr	r1, [r4, #12]
 8004ee0:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <cleanup_stdio+0x3c>)
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	d004      	beq.n	8004ef0 <cleanup_stdio+0x30>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eec:	f000 bb96 	b.w	800561c <_fflush_r>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200001c0 	.word	0x200001c0
 8004ef8:	20000228 	.word	0x20000228
 8004efc:	20000290 	.word	0x20000290

08004f00 <global_stdio_init.part.0>:
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <global_stdio_init.part.0+0x30>)
 8004f04:	4c0b      	ldr	r4, [pc, #44]	@ (8004f34 <global_stdio_init.part.0+0x34>)
 8004f06:	4a0c      	ldr	r2, [pc, #48]	@ (8004f38 <global_stdio_init.part.0+0x38>)
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2104      	movs	r1, #4
 8004f10:	f7ff ff94 	bl	8004e3c <std>
 8004f14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2109      	movs	r1, #9
 8004f1c:	f7ff ff8e 	bl	8004e3c <std>
 8004f20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f24:	2202      	movs	r2, #2
 8004f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2a:	2112      	movs	r1, #18
 8004f2c:	f7ff bf86 	b.w	8004e3c <std>
 8004f30:	200002f8 	.word	0x200002f8
 8004f34:	200001c0 	.word	0x200001c0
 8004f38:	08004ea9 	.word	0x08004ea9

08004f3c <__sfp_lock_acquire>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__sfp_lock_acquire+0x8>)
 8004f3e:	f000 b9ee 	b.w	800531e <__retarget_lock_acquire_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000301 	.word	0x20000301

08004f48 <__sfp_lock_release>:
 8004f48:	4801      	ldr	r0, [pc, #4]	@ (8004f50 <__sfp_lock_release+0x8>)
 8004f4a:	f000 b9e9 	b.w	8005320 <__retarget_lock_release_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000301 	.word	0x20000301

08004f54 <__sinit>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4604      	mov	r4, r0
 8004f58:	f7ff fff0 	bl	8004f3c <__sfp_lock_acquire>
 8004f5c:	6a23      	ldr	r3, [r4, #32]
 8004f5e:	b11b      	cbz	r3, 8004f68 <__sinit+0x14>
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	f7ff bff0 	b.w	8004f48 <__sfp_lock_release>
 8004f68:	4b04      	ldr	r3, [pc, #16]	@ (8004f7c <__sinit+0x28>)
 8004f6a:	6223      	str	r3, [r4, #32]
 8004f6c:	4b04      	ldr	r3, [pc, #16]	@ (8004f80 <__sinit+0x2c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f5      	bne.n	8004f60 <__sinit+0xc>
 8004f74:	f7ff ffc4 	bl	8004f00 <global_stdio_init.part.0>
 8004f78:	e7f2      	b.n	8004f60 <__sinit+0xc>
 8004f7a:	bf00      	nop
 8004f7c:	08004ec1 	.word	0x08004ec1
 8004f80:	200002f8 	.word	0x200002f8

08004f84 <_fwalk_sglue>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	4607      	mov	r7, r0
 8004f8a:	4688      	mov	r8, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	2600      	movs	r6, #0
 8004f90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f94:	f1b9 0901 	subs.w	r9, r9, #1
 8004f98:	d505      	bpl.n	8004fa6 <_fwalk_sglue+0x22>
 8004f9a:	6824      	ldr	r4, [r4, #0]
 8004f9c:	2c00      	cmp	r4, #0
 8004f9e:	d1f7      	bne.n	8004f90 <_fwalk_sglue+0xc>
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d907      	bls.n	8004fbc <_fwalk_sglue+0x38>
 8004fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <_fwalk_sglue+0x38>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	47c0      	blx	r8
 8004fba:	4306      	orrs	r6, r0
 8004fbc:	3568      	adds	r5, #104	@ 0x68
 8004fbe:	e7e9      	b.n	8004f94 <_fwalk_sglue+0x10>

08004fc0 <_puts_r>:
 8004fc0:	6a03      	ldr	r3, [r0, #32]
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	6884      	ldr	r4, [r0, #8]
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	460e      	mov	r6, r1
 8004fca:	b90b      	cbnz	r3, 8004fd0 <_puts_r+0x10>
 8004fcc:	f7ff ffc2 	bl	8004f54 <__sinit>
 8004fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fd2:	07db      	lsls	r3, r3, #31
 8004fd4:	d405      	bmi.n	8004fe2 <_puts_r+0x22>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	0598      	lsls	r0, r3, #22
 8004fda:	d402      	bmi.n	8004fe2 <_puts_r+0x22>
 8004fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fde:	f000 f99e 	bl	800531e <__retarget_lock_acquire_recursive>
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	0719      	lsls	r1, r3, #28
 8004fe6:	d502      	bpl.n	8004fee <_puts_r+0x2e>
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d135      	bne.n	800505a <_puts_r+0x9a>
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 f8c5 	bl	8005180 <__swsetup_r>
 8004ff6:	b380      	cbz	r0, 800505a <_puts_r+0x9a>
 8004ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ffe:	07da      	lsls	r2, r3, #31
 8005000:	d405      	bmi.n	800500e <_puts_r+0x4e>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	059b      	lsls	r3, r3, #22
 8005006:	d402      	bmi.n	800500e <_puts_r+0x4e>
 8005008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800500a:	f000 f989 	bl	8005320 <__retarget_lock_release_recursive>
 800500e:	4628      	mov	r0, r5
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	2b00      	cmp	r3, #0
 8005014:	da04      	bge.n	8005020 <_puts_r+0x60>
 8005016:	69a2      	ldr	r2, [r4, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	dc17      	bgt.n	800504c <_puts_r+0x8c>
 800501c:	290a      	cmp	r1, #10
 800501e:	d015      	beq.n	800504c <_puts_r+0x8c>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	7019      	strb	r1, [r3, #0]
 8005028:	68a3      	ldr	r3, [r4, #8]
 800502a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800502e:	3b01      	subs	r3, #1
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	2900      	cmp	r1, #0
 8005034:	d1ed      	bne.n	8005012 <_puts_r+0x52>
 8005036:	2b00      	cmp	r3, #0
 8005038:	da11      	bge.n	800505e <_puts_r+0x9e>
 800503a:	4622      	mov	r2, r4
 800503c:	210a      	movs	r1, #10
 800503e:	4628      	mov	r0, r5
 8005040:	f000 f85f 	bl	8005102 <__swbuf_r>
 8005044:	3001      	adds	r0, #1
 8005046:	d0d7      	beq.n	8004ff8 <_puts_r+0x38>
 8005048:	250a      	movs	r5, #10
 800504a:	e7d7      	b.n	8004ffc <_puts_r+0x3c>
 800504c:	4622      	mov	r2, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f857 	bl	8005102 <__swbuf_r>
 8005054:	3001      	adds	r0, #1
 8005056:	d1e7      	bne.n	8005028 <_puts_r+0x68>
 8005058:	e7ce      	b.n	8004ff8 <_puts_r+0x38>
 800505a:	3e01      	subs	r6, #1
 800505c:	e7e4      	b.n	8005028 <_puts_r+0x68>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	220a      	movs	r2, #10
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e7ee      	b.n	8005048 <_puts_r+0x88>
	...

0800506c <puts>:
 800506c:	4b02      	ldr	r3, [pc, #8]	@ (8005078 <puts+0xc>)
 800506e:	4601      	mov	r1, r0
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	f7ff bfa5 	b.w	8004fc0 <_puts_r>
 8005076:	bf00      	nop
 8005078:	20000018 	.word	0x20000018

0800507c <__sread>:
 800507c:	b510      	push	{r4, lr}
 800507e:	460c      	mov	r4, r1
 8005080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005084:	f000 f8fc 	bl	8005280 <_read_r>
 8005088:	2800      	cmp	r0, #0
 800508a:	bfab      	itete	ge
 800508c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800508e:	89a3      	ldrhlt	r3, [r4, #12]
 8005090:	181b      	addge	r3, r3, r0
 8005092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005096:	bfac      	ite	ge
 8005098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800509a:	81a3      	strhlt	r3, [r4, #12]
 800509c:	bd10      	pop	{r4, pc}

0800509e <__swrite>:
 800509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a2:	461f      	mov	r7, r3
 80050a4:	898b      	ldrh	r3, [r1, #12]
 80050a6:	05db      	lsls	r3, r3, #23
 80050a8:	4605      	mov	r5, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	4616      	mov	r6, r2
 80050ae:	d505      	bpl.n	80050bc <__swrite+0x1e>
 80050b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b4:	2302      	movs	r3, #2
 80050b6:	2200      	movs	r2, #0
 80050b8:	f000 f8d0 	bl	800525c <_lseek_r>
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	4632      	mov	r2, r6
 80050ca:	463b      	mov	r3, r7
 80050cc:	4628      	mov	r0, r5
 80050ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d2:	f000 b8e7 	b.w	80052a4 <_write_r>

080050d6 <__sseek>:
 80050d6:	b510      	push	{r4, lr}
 80050d8:	460c      	mov	r4, r1
 80050da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050de:	f000 f8bd 	bl	800525c <_lseek_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	bf15      	itete	ne
 80050e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050f2:	81a3      	strheq	r3, [r4, #12]
 80050f4:	bf18      	it	ne
 80050f6:	81a3      	strhne	r3, [r4, #12]
 80050f8:	bd10      	pop	{r4, pc}

080050fa <__sclose>:
 80050fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fe:	f000 b89d 	b.w	800523c <_close_r>

08005102 <__swbuf_r>:
 8005102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005104:	460e      	mov	r6, r1
 8005106:	4614      	mov	r4, r2
 8005108:	4605      	mov	r5, r0
 800510a:	b118      	cbz	r0, 8005114 <__swbuf_r+0x12>
 800510c:	6a03      	ldr	r3, [r0, #32]
 800510e:	b90b      	cbnz	r3, 8005114 <__swbuf_r+0x12>
 8005110:	f7ff ff20 	bl	8004f54 <__sinit>
 8005114:	69a3      	ldr	r3, [r4, #24]
 8005116:	60a3      	str	r3, [r4, #8]
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	071a      	lsls	r2, r3, #28
 800511c:	d501      	bpl.n	8005122 <__swbuf_r+0x20>
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	b943      	cbnz	r3, 8005134 <__swbuf_r+0x32>
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f82b 	bl	8005180 <__swsetup_r>
 800512a:	b118      	cbz	r0, 8005134 <__swbuf_r+0x32>
 800512c:	f04f 37ff 	mov.w	r7, #4294967295
 8005130:	4638      	mov	r0, r7
 8005132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	6922      	ldr	r2, [r4, #16]
 8005138:	1a98      	subs	r0, r3, r2
 800513a:	6963      	ldr	r3, [r4, #20]
 800513c:	b2f6      	uxtb	r6, r6
 800513e:	4283      	cmp	r3, r0
 8005140:	4637      	mov	r7, r6
 8005142:	dc05      	bgt.n	8005150 <__swbuf_r+0x4e>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fa68 	bl	800561c <_fflush_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d1ed      	bne.n	800512c <__swbuf_r+0x2a>
 8005150:	68a3      	ldr	r3, [r4, #8]
 8005152:	3b01      	subs	r3, #1
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	701e      	strb	r6, [r3, #0]
 800515e:	6962      	ldr	r2, [r4, #20]
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	429a      	cmp	r2, r3
 8005164:	d004      	beq.n	8005170 <__swbuf_r+0x6e>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	07db      	lsls	r3, r3, #31
 800516a:	d5e1      	bpl.n	8005130 <__swbuf_r+0x2e>
 800516c:	2e0a      	cmp	r6, #10
 800516e:	d1df      	bne.n	8005130 <__swbuf_r+0x2e>
 8005170:	4621      	mov	r1, r4
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fa52 	bl	800561c <_fflush_r>
 8005178:	2800      	cmp	r0, #0
 800517a:	d0d9      	beq.n	8005130 <__swbuf_r+0x2e>
 800517c:	e7d6      	b.n	800512c <__swbuf_r+0x2a>
	...

08005180 <__swsetup_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4b29      	ldr	r3, [pc, #164]	@ (8005228 <__swsetup_r+0xa8>)
 8005184:	4605      	mov	r5, r0
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	460c      	mov	r4, r1
 800518a:	b118      	cbz	r0, 8005194 <__swsetup_r+0x14>
 800518c:	6a03      	ldr	r3, [r0, #32]
 800518e:	b90b      	cbnz	r3, 8005194 <__swsetup_r+0x14>
 8005190:	f7ff fee0 	bl	8004f54 <__sinit>
 8005194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005198:	0719      	lsls	r1, r3, #28
 800519a:	d422      	bmi.n	80051e2 <__swsetup_r+0x62>
 800519c:	06da      	lsls	r2, r3, #27
 800519e:	d407      	bmi.n	80051b0 <__swsetup_r+0x30>
 80051a0:	2209      	movs	r2, #9
 80051a2:	602a      	str	r2, [r5, #0]
 80051a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a8:	81a3      	strh	r3, [r4, #12]
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	e033      	b.n	8005218 <__swsetup_r+0x98>
 80051b0:	0758      	lsls	r0, r3, #29
 80051b2:	d512      	bpl.n	80051da <__swsetup_r+0x5a>
 80051b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051b6:	b141      	cbz	r1, 80051ca <__swsetup_r+0x4a>
 80051b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051bc:	4299      	cmp	r1, r3
 80051be:	d002      	beq.n	80051c6 <__swsetup_r+0x46>
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 f8af 	bl	8005324 <_free_r>
 80051c6:	2300      	movs	r3, #0
 80051c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	2300      	movs	r3, #0
 80051d4:	6063      	str	r3, [r4, #4]
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f043 0308 	orr.w	r3, r3, #8
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	b94b      	cbnz	r3, 80051fa <__swsetup_r+0x7a>
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f0:	d003      	beq.n	80051fa <__swsetup_r+0x7a>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 fa5f 	bl	80056b8 <__smakebuf_r>
 80051fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fe:	f013 0201 	ands.w	r2, r3, #1
 8005202:	d00a      	beq.n	800521a <__swsetup_r+0x9a>
 8005204:	2200      	movs	r2, #0
 8005206:	60a2      	str	r2, [r4, #8]
 8005208:	6962      	ldr	r2, [r4, #20]
 800520a:	4252      	negs	r2, r2
 800520c:	61a2      	str	r2, [r4, #24]
 800520e:	6922      	ldr	r2, [r4, #16]
 8005210:	b942      	cbnz	r2, 8005224 <__swsetup_r+0xa4>
 8005212:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005216:	d1c5      	bne.n	80051a4 <__swsetup_r+0x24>
 8005218:	bd38      	pop	{r3, r4, r5, pc}
 800521a:	0799      	lsls	r1, r3, #30
 800521c:	bf58      	it	pl
 800521e:	6962      	ldrpl	r2, [r4, #20]
 8005220:	60a2      	str	r2, [r4, #8]
 8005222:	e7f4      	b.n	800520e <__swsetup_r+0x8e>
 8005224:	2000      	movs	r0, #0
 8005226:	e7f7      	b.n	8005218 <__swsetup_r+0x98>
 8005228:	20000018 	.word	0x20000018

0800522c <memset>:
 800522c:	4402      	add	r2, r0
 800522e:	4603      	mov	r3, r0
 8005230:	4293      	cmp	r3, r2
 8005232:	d100      	bne.n	8005236 <memset+0xa>
 8005234:	4770      	bx	lr
 8005236:	f803 1b01 	strb.w	r1, [r3], #1
 800523a:	e7f9      	b.n	8005230 <memset+0x4>

0800523c <_close_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	@ (8005258 <_close_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fc fdc0 	bl	8001dcc <_close>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_close_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_close_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	200002fc 	.word	0x200002fc

0800525c <_lseek_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	@ (800527c <_lseek_r+0x20>)
 8005260:	4604      	mov	r4, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fc fdd5 	bl	8001e1a <_lseek>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_lseek_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_lseek_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	200002fc 	.word	0x200002fc

08005280 <_read_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	@ (80052a0 <_read_r+0x20>)
 8005284:	4604      	mov	r4, r0
 8005286:	4608      	mov	r0, r1
 8005288:	4611      	mov	r1, r2
 800528a:	2200      	movs	r2, #0
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f7fc fd63 	bl	8001d5a <_read>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_read_r+0x1e>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_read_r+0x1e>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	200002fc 	.word	0x200002fc

080052a4 <_write_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d07      	ldr	r5, [pc, #28]	@ (80052c4 <_write_r+0x20>)
 80052a8:	4604      	mov	r4, r0
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	2200      	movs	r2, #0
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f7fc fd6e 	bl	8001d94 <_write>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_write_r+0x1e>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_write_r+0x1e>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	200002fc 	.word	0x200002fc

080052c8 <__errno>:
 80052c8:	4b01      	ldr	r3, [pc, #4]	@ (80052d0 <__errno+0x8>)
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000018 	.word	0x20000018

080052d4 <__libc_init_array>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4d0d      	ldr	r5, [pc, #52]	@ (800530c <__libc_init_array+0x38>)
 80052d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005310 <__libc_init_array+0x3c>)
 80052da:	1b64      	subs	r4, r4, r5
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	2600      	movs	r6, #0
 80052e0:	42a6      	cmp	r6, r4
 80052e2:	d109      	bne.n	80052f8 <__libc_init_array+0x24>
 80052e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005314 <__libc_init_array+0x40>)
 80052e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005318 <__libc_init_array+0x44>)
 80052e8:	f000 fad2 	bl	8005890 <_init>
 80052ec:	1b64      	subs	r4, r4, r5
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	2600      	movs	r6, #0
 80052f2:	42a6      	cmp	r6, r4
 80052f4:	d105      	bne.n	8005302 <__libc_init_array+0x2e>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fc:	4798      	blx	r3
 80052fe:	3601      	adds	r6, #1
 8005300:	e7ee      	b.n	80052e0 <__libc_init_array+0xc>
 8005302:	f855 3b04 	ldr.w	r3, [r5], #4
 8005306:	4798      	blx	r3
 8005308:	3601      	adds	r6, #1
 800530a:	e7f2      	b.n	80052f2 <__libc_init_array+0x1e>
 800530c:	080058e8 	.word	0x080058e8
 8005310:	080058e8 	.word	0x080058e8
 8005314:	080058e8 	.word	0x080058e8
 8005318:	080058ec 	.word	0x080058ec

0800531c <__retarget_lock_init_recursive>:
 800531c:	4770      	bx	lr

0800531e <__retarget_lock_acquire_recursive>:
 800531e:	4770      	bx	lr

08005320 <__retarget_lock_release_recursive>:
 8005320:	4770      	bx	lr
	...

08005324 <_free_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4605      	mov	r5, r0
 8005328:	2900      	cmp	r1, #0
 800532a:	d041      	beq.n	80053b0 <_free_r+0x8c>
 800532c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005330:	1f0c      	subs	r4, r1, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	bfb8      	it	lt
 8005336:	18e4      	addlt	r4, r4, r3
 8005338:	f000 f8e0 	bl	80054fc <__malloc_lock>
 800533c:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <_free_r+0x90>)
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	b933      	cbnz	r3, 8005350 <_free_r+0x2c>
 8005342:	6063      	str	r3, [r4, #4]
 8005344:	6014      	str	r4, [r2, #0]
 8005346:	4628      	mov	r0, r5
 8005348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800534c:	f000 b8dc 	b.w	8005508 <__malloc_unlock>
 8005350:	42a3      	cmp	r3, r4
 8005352:	d908      	bls.n	8005366 <_free_r+0x42>
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	1821      	adds	r1, r4, r0
 8005358:	428b      	cmp	r3, r1
 800535a:	bf01      	itttt	eq
 800535c:	6819      	ldreq	r1, [r3, #0]
 800535e:	685b      	ldreq	r3, [r3, #4]
 8005360:	1809      	addeq	r1, r1, r0
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	e7ed      	b.n	8005342 <_free_r+0x1e>
 8005366:	461a      	mov	r2, r3
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b10b      	cbz	r3, 8005370 <_free_r+0x4c>
 800536c:	42a3      	cmp	r3, r4
 800536e:	d9fa      	bls.n	8005366 <_free_r+0x42>
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	1850      	adds	r0, r2, r1
 8005374:	42a0      	cmp	r0, r4
 8005376:	d10b      	bne.n	8005390 <_free_r+0x6c>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	4401      	add	r1, r0
 800537c:	1850      	adds	r0, r2, r1
 800537e:	4283      	cmp	r3, r0
 8005380:	6011      	str	r1, [r2, #0]
 8005382:	d1e0      	bne.n	8005346 <_free_r+0x22>
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	6053      	str	r3, [r2, #4]
 800538a:	4408      	add	r0, r1
 800538c:	6010      	str	r0, [r2, #0]
 800538e:	e7da      	b.n	8005346 <_free_r+0x22>
 8005390:	d902      	bls.n	8005398 <_free_r+0x74>
 8005392:	230c      	movs	r3, #12
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	e7d6      	b.n	8005346 <_free_r+0x22>
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	1821      	adds	r1, r4, r0
 800539c:	428b      	cmp	r3, r1
 800539e:	bf04      	itt	eq
 80053a0:	6819      	ldreq	r1, [r3, #0]
 80053a2:	685b      	ldreq	r3, [r3, #4]
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	bf04      	itt	eq
 80053a8:	1809      	addeq	r1, r1, r0
 80053aa:	6021      	streq	r1, [r4, #0]
 80053ac:	6054      	str	r4, [r2, #4]
 80053ae:	e7ca      	b.n	8005346 <_free_r+0x22>
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	bf00      	nop
 80053b4:	20000308 	.word	0x20000308

080053b8 <sbrk_aligned>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4e0f      	ldr	r6, [pc, #60]	@ (80053f8 <sbrk_aligned+0x40>)
 80053bc:	460c      	mov	r4, r1
 80053be:	6831      	ldr	r1, [r6, #0]
 80053c0:	4605      	mov	r5, r0
 80053c2:	b911      	cbnz	r1, 80053ca <sbrk_aligned+0x12>
 80053c4:	f000 f9d6 	bl	8005774 <_sbrk_r>
 80053c8:	6030      	str	r0, [r6, #0]
 80053ca:	4621      	mov	r1, r4
 80053cc:	4628      	mov	r0, r5
 80053ce:	f000 f9d1 	bl	8005774 <_sbrk_r>
 80053d2:	1c43      	adds	r3, r0, #1
 80053d4:	d103      	bne.n	80053de <sbrk_aligned+0x26>
 80053d6:	f04f 34ff 	mov.w	r4, #4294967295
 80053da:	4620      	mov	r0, r4
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	1cc4      	adds	r4, r0, #3
 80053e0:	f024 0403 	bic.w	r4, r4, #3
 80053e4:	42a0      	cmp	r0, r4
 80053e6:	d0f8      	beq.n	80053da <sbrk_aligned+0x22>
 80053e8:	1a21      	subs	r1, r4, r0
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f9c2 	bl	8005774 <_sbrk_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d1f2      	bne.n	80053da <sbrk_aligned+0x22>
 80053f4:	e7ef      	b.n	80053d6 <sbrk_aligned+0x1e>
 80053f6:	bf00      	nop
 80053f8:	20000304 	.word	0x20000304

080053fc <_malloc_r>:
 80053fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005400:	1ccd      	adds	r5, r1, #3
 8005402:	f025 0503 	bic.w	r5, r5, #3
 8005406:	3508      	adds	r5, #8
 8005408:	2d0c      	cmp	r5, #12
 800540a:	bf38      	it	cc
 800540c:	250c      	movcc	r5, #12
 800540e:	2d00      	cmp	r5, #0
 8005410:	4606      	mov	r6, r0
 8005412:	db01      	blt.n	8005418 <_malloc_r+0x1c>
 8005414:	42a9      	cmp	r1, r5
 8005416:	d904      	bls.n	8005422 <_malloc_r+0x26>
 8005418:	230c      	movs	r3, #12
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	2000      	movs	r0, #0
 800541e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054f8 <_malloc_r+0xfc>
 8005426:	f000 f869 	bl	80054fc <__malloc_lock>
 800542a:	f8d8 3000 	ldr.w	r3, [r8]
 800542e:	461c      	mov	r4, r3
 8005430:	bb44      	cbnz	r4, 8005484 <_malloc_r+0x88>
 8005432:	4629      	mov	r1, r5
 8005434:	4630      	mov	r0, r6
 8005436:	f7ff ffbf 	bl	80053b8 <sbrk_aligned>
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	4604      	mov	r4, r0
 800543e:	d158      	bne.n	80054f2 <_malloc_r+0xf6>
 8005440:	f8d8 4000 	ldr.w	r4, [r8]
 8005444:	4627      	mov	r7, r4
 8005446:	2f00      	cmp	r7, #0
 8005448:	d143      	bne.n	80054d2 <_malloc_r+0xd6>
 800544a:	2c00      	cmp	r4, #0
 800544c:	d04b      	beq.n	80054e6 <_malloc_r+0xea>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	4639      	mov	r1, r7
 8005452:	4630      	mov	r0, r6
 8005454:	eb04 0903 	add.w	r9, r4, r3
 8005458:	f000 f98c 	bl	8005774 <_sbrk_r>
 800545c:	4581      	cmp	r9, r0
 800545e:	d142      	bne.n	80054e6 <_malloc_r+0xea>
 8005460:	6821      	ldr	r1, [r4, #0]
 8005462:	1a6d      	subs	r5, r5, r1
 8005464:	4629      	mov	r1, r5
 8005466:	4630      	mov	r0, r6
 8005468:	f7ff ffa6 	bl	80053b8 <sbrk_aligned>
 800546c:	3001      	adds	r0, #1
 800546e:	d03a      	beq.n	80054e6 <_malloc_r+0xea>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	442b      	add	r3, r5
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	f8d8 3000 	ldr.w	r3, [r8]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	bb62      	cbnz	r2, 80054d8 <_malloc_r+0xdc>
 800547e:	f8c8 7000 	str.w	r7, [r8]
 8005482:	e00f      	b.n	80054a4 <_malloc_r+0xa8>
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	1b52      	subs	r2, r2, r5
 8005488:	d420      	bmi.n	80054cc <_malloc_r+0xd0>
 800548a:	2a0b      	cmp	r2, #11
 800548c:	d917      	bls.n	80054be <_malloc_r+0xc2>
 800548e:	1961      	adds	r1, r4, r5
 8005490:	42a3      	cmp	r3, r4
 8005492:	6025      	str	r5, [r4, #0]
 8005494:	bf18      	it	ne
 8005496:	6059      	strne	r1, [r3, #4]
 8005498:	6863      	ldr	r3, [r4, #4]
 800549a:	bf08      	it	eq
 800549c:	f8c8 1000 	streq.w	r1, [r8]
 80054a0:	5162      	str	r2, [r4, r5]
 80054a2:	604b      	str	r3, [r1, #4]
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 f82f 	bl	8005508 <__malloc_unlock>
 80054aa:	f104 000b 	add.w	r0, r4, #11
 80054ae:	1d23      	adds	r3, r4, #4
 80054b0:	f020 0007 	bic.w	r0, r0, #7
 80054b4:	1ac2      	subs	r2, r0, r3
 80054b6:	bf1c      	itt	ne
 80054b8:	1a1b      	subne	r3, r3, r0
 80054ba:	50a3      	strne	r3, [r4, r2]
 80054bc:	e7af      	b.n	800541e <_malloc_r+0x22>
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	bf0c      	ite	eq
 80054c4:	f8c8 2000 	streq.w	r2, [r8]
 80054c8:	605a      	strne	r2, [r3, #4]
 80054ca:	e7eb      	b.n	80054a4 <_malloc_r+0xa8>
 80054cc:	4623      	mov	r3, r4
 80054ce:	6864      	ldr	r4, [r4, #4]
 80054d0:	e7ae      	b.n	8005430 <_malloc_r+0x34>
 80054d2:	463c      	mov	r4, r7
 80054d4:	687f      	ldr	r7, [r7, #4]
 80054d6:	e7b6      	b.n	8005446 <_malloc_r+0x4a>
 80054d8:	461a      	mov	r2, r3
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	42a3      	cmp	r3, r4
 80054de:	d1fb      	bne.n	80054d8 <_malloc_r+0xdc>
 80054e0:	2300      	movs	r3, #0
 80054e2:	6053      	str	r3, [r2, #4]
 80054e4:	e7de      	b.n	80054a4 <_malloc_r+0xa8>
 80054e6:	230c      	movs	r3, #12
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 f80c 	bl	8005508 <__malloc_unlock>
 80054f0:	e794      	b.n	800541c <_malloc_r+0x20>
 80054f2:	6005      	str	r5, [r0, #0]
 80054f4:	e7d6      	b.n	80054a4 <_malloc_r+0xa8>
 80054f6:	bf00      	nop
 80054f8:	20000308 	.word	0x20000308

080054fc <__malloc_lock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	@ (8005504 <__malloc_lock+0x8>)
 80054fe:	f7ff bf0e 	b.w	800531e <__retarget_lock_acquire_recursive>
 8005502:	bf00      	nop
 8005504:	20000300 	.word	0x20000300

08005508 <__malloc_unlock>:
 8005508:	4801      	ldr	r0, [pc, #4]	@ (8005510 <__malloc_unlock+0x8>)
 800550a:	f7ff bf09 	b.w	8005320 <__retarget_lock_release_recursive>
 800550e:	bf00      	nop
 8005510:	20000300 	.word	0x20000300

08005514 <__sflush_r>:
 8005514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551c:	0716      	lsls	r6, r2, #28
 800551e:	4605      	mov	r5, r0
 8005520:	460c      	mov	r4, r1
 8005522:	d454      	bmi.n	80055ce <__sflush_r+0xba>
 8005524:	684b      	ldr	r3, [r1, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	dc02      	bgt.n	8005530 <__sflush_r+0x1c>
 800552a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	dd48      	ble.n	80055c2 <__sflush_r+0xae>
 8005530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005532:	2e00      	cmp	r6, #0
 8005534:	d045      	beq.n	80055c2 <__sflush_r+0xae>
 8005536:	2300      	movs	r3, #0
 8005538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800553c:	682f      	ldr	r7, [r5, #0]
 800553e:	6a21      	ldr	r1, [r4, #32]
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	d030      	beq.n	80055a6 <__sflush_r+0x92>
 8005544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	0759      	lsls	r1, r3, #29
 800554a:	d505      	bpl.n	8005558 <__sflush_r+0x44>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005552:	b10b      	cbz	r3, 8005558 <__sflush_r+0x44>
 8005554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	2300      	movs	r3, #0
 800555a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800555c:	6a21      	ldr	r1, [r4, #32]
 800555e:	4628      	mov	r0, r5
 8005560:	47b0      	blx	r6
 8005562:	1c43      	adds	r3, r0, #1
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	d106      	bne.n	8005576 <__sflush_r+0x62>
 8005568:	6829      	ldr	r1, [r5, #0]
 800556a:	291d      	cmp	r1, #29
 800556c:	d82b      	bhi.n	80055c6 <__sflush_r+0xb2>
 800556e:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <__sflush_r+0x104>)
 8005570:	40ca      	lsrs	r2, r1
 8005572:	07d6      	lsls	r6, r2, #31
 8005574:	d527      	bpl.n	80055c6 <__sflush_r+0xb2>
 8005576:	2200      	movs	r2, #0
 8005578:	6062      	str	r2, [r4, #4]
 800557a:	04d9      	lsls	r1, r3, #19
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	6022      	str	r2, [r4, #0]
 8005580:	d504      	bpl.n	800558c <__sflush_r+0x78>
 8005582:	1c42      	adds	r2, r0, #1
 8005584:	d101      	bne.n	800558a <__sflush_r+0x76>
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	b903      	cbnz	r3, 800558c <__sflush_r+0x78>
 800558a:	6560      	str	r0, [r4, #84]	@ 0x54
 800558c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800558e:	602f      	str	r7, [r5, #0]
 8005590:	b1b9      	cbz	r1, 80055c2 <__sflush_r+0xae>
 8005592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005596:	4299      	cmp	r1, r3
 8005598:	d002      	beq.n	80055a0 <__sflush_r+0x8c>
 800559a:	4628      	mov	r0, r5
 800559c:	f7ff fec2 	bl	8005324 <_free_r>
 80055a0:	2300      	movs	r3, #0
 80055a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80055a4:	e00d      	b.n	80055c2 <__sflush_r+0xae>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	4602      	mov	r2, r0
 80055ae:	1c50      	adds	r0, r2, #1
 80055b0:	d1c9      	bne.n	8005546 <__sflush_r+0x32>
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0c6      	beq.n	8005546 <__sflush_r+0x32>
 80055b8:	2b1d      	cmp	r3, #29
 80055ba:	d001      	beq.n	80055c0 <__sflush_r+0xac>
 80055bc:	2b16      	cmp	r3, #22
 80055be:	d11e      	bne.n	80055fe <__sflush_r+0xea>
 80055c0:	602f      	str	r7, [r5, #0]
 80055c2:	2000      	movs	r0, #0
 80055c4:	e022      	b.n	800560c <__sflush_r+0xf8>
 80055c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	e01b      	b.n	8005606 <__sflush_r+0xf2>
 80055ce:	690f      	ldr	r7, [r1, #16]
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	d0f6      	beq.n	80055c2 <__sflush_r+0xae>
 80055d4:	0793      	lsls	r3, r2, #30
 80055d6:	680e      	ldr	r6, [r1, #0]
 80055d8:	bf08      	it	eq
 80055da:	694b      	ldreq	r3, [r1, #20]
 80055dc:	600f      	str	r7, [r1, #0]
 80055de:	bf18      	it	ne
 80055e0:	2300      	movne	r3, #0
 80055e2:	eba6 0807 	sub.w	r8, r6, r7
 80055e6:	608b      	str	r3, [r1, #8]
 80055e8:	f1b8 0f00 	cmp.w	r8, #0
 80055ec:	dde9      	ble.n	80055c2 <__sflush_r+0xae>
 80055ee:	6a21      	ldr	r1, [r4, #32]
 80055f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055f2:	4643      	mov	r3, r8
 80055f4:	463a      	mov	r2, r7
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b0      	blx	r6
 80055fa:	2800      	cmp	r0, #0
 80055fc:	dc08      	bgt.n	8005610 <__sflush_r+0xfc>
 80055fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005606:	81a3      	strh	r3, [r4, #12]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005610:	4407      	add	r7, r0
 8005612:	eba8 0800 	sub.w	r8, r8, r0
 8005616:	e7e7      	b.n	80055e8 <__sflush_r+0xd4>
 8005618:	20400001 	.word	0x20400001

0800561c <_fflush_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	690b      	ldr	r3, [r1, #16]
 8005620:	4605      	mov	r5, r0
 8005622:	460c      	mov	r4, r1
 8005624:	b913      	cbnz	r3, 800562c <_fflush_r+0x10>
 8005626:	2500      	movs	r5, #0
 8005628:	4628      	mov	r0, r5
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	b118      	cbz	r0, 8005636 <_fflush_r+0x1a>
 800562e:	6a03      	ldr	r3, [r0, #32]
 8005630:	b90b      	cbnz	r3, 8005636 <_fflush_r+0x1a>
 8005632:	f7ff fc8f 	bl	8004f54 <__sinit>
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f3      	beq.n	8005626 <_fflush_r+0xa>
 800563e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005640:	07d0      	lsls	r0, r2, #31
 8005642:	d404      	bmi.n	800564e <_fflush_r+0x32>
 8005644:	0599      	lsls	r1, r3, #22
 8005646:	d402      	bmi.n	800564e <_fflush_r+0x32>
 8005648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800564a:	f7ff fe68 	bl	800531e <__retarget_lock_acquire_recursive>
 800564e:	4628      	mov	r0, r5
 8005650:	4621      	mov	r1, r4
 8005652:	f7ff ff5f 	bl	8005514 <__sflush_r>
 8005656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005658:	07da      	lsls	r2, r3, #31
 800565a:	4605      	mov	r5, r0
 800565c:	d4e4      	bmi.n	8005628 <_fflush_r+0xc>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	059b      	lsls	r3, r3, #22
 8005662:	d4e1      	bmi.n	8005628 <_fflush_r+0xc>
 8005664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005666:	f7ff fe5b 	bl	8005320 <__retarget_lock_release_recursive>
 800566a:	e7dd      	b.n	8005628 <_fflush_r+0xc>

0800566c <__swhatbuf_r>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	460c      	mov	r4, r1
 8005670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005674:	2900      	cmp	r1, #0
 8005676:	b096      	sub	sp, #88	@ 0x58
 8005678:	4615      	mov	r5, r2
 800567a:	461e      	mov	r6, r3
 800567c:	da0d      	bge.n	800569a <__swhatbuf_r+0x2e>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	bf14      	ite	ne
 800568a:	2340      	movne	r3, #64	@ 0x40
 800568c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005690:	2000      	movs	r0, #0
 8005692:	6031      	str	r1, [r6, #0]
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	b016      	add	sp, #88	@ 0x58
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	466a      	mov	r2, sp
 800569c:	f000 f848 	bl	8005730 <_fstat_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dbec      	blt.n	800567e <__swhatbuf_r+0x12>
 80056a4:	9901      	ldr	r1, [sp, #4]
 80056a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056ae:	4259      	negs	r1, r3
 80056b0:	4159      	adcs	r1, r3
 80056b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056b6:	e7eb      	b.n	8005690 <__swhatbuf_r+0x24>

080056b8 <__smakebuf_r>:
 80056b8:	898b      	ldrh	r3, [r1, #12]
 80056ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056bc:	079d      	lsls	r5, r3, #30
 80056be:	4606      	mov	r6, r0
 80056c0:	460c      	mov	r4, r1
 80056c2:	d507      	bpl.n	80056d4 <__smakebuf_r+0x1c>
 80056c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	2301      	movs	r3, #1
 80056ce:	6163      	str	r3, [r4, #20]
 80056d0:	b003      	add	sp, #12
 80056d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d4:	ab01      	add	r3, sp, #4
 80056d6:	466a      	mov	r2, sp
 80056d8:	f7ff ffc8 	bl	800566c <__swhatbuf_r>
 80056dc:	9f00      	ldr	r7, [sp, #0]
 80056de:	4605      	mov	r5, r0
 80056e0:	4639      	mov	r1, r7
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7ff fe8a 	bl	80053fc <_malloc_r>
 80056e8:	b948      	cbnz	r0, 80056fe <__smakebuf_r+0x46>
 80056ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ee:	059a      	lsls	r2, r3, #22
 80056f0:	d4ee      	bmi.n	80056d0 <__smakebuf_r+0x18>
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	f043 0302 	orr.w	r3, r3, #2
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	e7e2      	b.n	80056c4 <__smakebuf_r+0xc>
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	6020      	str	r0, [r4, #0]
 8005702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800570e:	b15b      	cbz	r3, 8005728 <__smakebuf_r+0x70>
 8005710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005714:	4630      	mov	r0, r6
 8005716:	f000 f81d 	bl	8005754 <_isatty_r>
 800571a:	b128      	cbz	r0, 8005728 <__smakebuf_r+0x70>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	431d      	orrs	r5, r3
 800572c:	81a5      	strh	r5, [r4, #12]
 800572e:	e7cf      	b.n	80056d0 <__smakebuf_r+0x18>

08005730 <_fstat_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	@ (8005750 <_fstat_r+0x20>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	f7fc fb51 	bl	8001de4 <_fstat>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d102      	bne.n	800574c <_fstat_r+0x1c>
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	b103      	cbz	r3, 800574c <_fstat_r+0x1c>
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	bf00      	nop
 8005750:	200002fc 	.word	0x200002fc

08005754 <_isatty_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	@ (8005770 <_isatty_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fc fb50 	bl	8001e04 <_isatty>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_isatty_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_isatty_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	200002fc 	.word	0x200002fc

08005774 <_sbrk_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d06      	ldr	r5, [pc, #24]	@ (8005790 <_sbrk_r+0x1c>)
 8005778:	2300      	movs	r3, #0
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	f7fc fb58 	bl	8001e34 <_sbrk>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_sbrk_r+0x1a>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_sbrk_r+0x1a>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200002fc 	.word	0x200002fc
 8005794:	00000000 	.word	0x00000000

08005798 <floor>:
 8005798:	ec51 0b10 	vmov	r0, r1, d0
 800579c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80057a8:	2e13      	cmp	r6, #19
 80057aa:	460c      	mov	r4, r1
 80057ac:	4605      	mov	r5, r0
 80057ae:	4680      	mov	r8, r0
 80057b0:	dc34      	bgt.n	800581c <floor+0x84>
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	da17      	bge.n	80057e6 <floor+0x4e>
 80057b6:	a332      	add	r3, pc, #200	@ (adr r3, 8005880 <floor+0xe8>)
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f7fa fe54 	bl	8000468 <__adddf3>
 80057c0:	2200      	movs	r2, #0
 80057c2:	2300      	movs	r3, #0
 80057c4:	f7fb f884 	bl	80008d0 <__aeabi_dcmpgt>
 80057c8:	b150      	cbz	r0, 80057e0 <floor+0x48>
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	da55      	bge.n	800587a <floor+0xe2>
 80057ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80057d2:	432c      	orrs	r4, r5
 80057d4:	2500      	movs	r5, #0
 80057d6:	42ac      	cmp	r4, r5
 80057d8:	4c2b      	ldr	r4, [pc, #172]	@ (8005888 <floor+0xf0>)
 80057da:	bf08      	it	eq
 80057dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80057e0:	4621      	mov	r1, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	e023      	b.n	800582e <floor+0x96>
 80057e6:	4f29      	ldr	r7, [pc, #164]	@ (800588c <floor+0xf4>)
 80057e8:	4137      	asrs	r7, r6
 80057ea:	ea01 0307 	and.w	r3, r1, r7
 80057ee:	4303      	orrs	r3, r0
 80057f0:	d01d      	beq.n	800582e <floor+0x96>
 80057f2:	a323      	add	r3, pc, #140	@ (adr r3, 8005880 <floor+0xe8>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fa fe36 	bl	8000468 <__adddf3>
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	f7fb f866 	bl	80008d0 <__aeabi_dcmpgt>
 8005804:	2800      	cmp	r0, #0
 8005806:	d0eb      	beq.n	80057e0 <floor+0x48>
 8005808:	2c00      	cmp	r4, #0
 800580a:	bfbe      	ittt	lt
 800580c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005810:	4133      	asrlt	r3, r6
 8005812:	18e4      	addlt	r4, r4, r3
 8005814:	ea24 0407 	bic.w	r4, r4, r7
 8005818:	2500      	movs	r5, #0
 800581a:	e7e1      	b.n	80057e0 <floor+0x48>
 800581c:	2e33      	cmp	r6, #51	@ 0x33
 800581e:	dd0a      	ble.n	8005836 <floor+0x9e>
 8005820:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005824:	d103      	bne.n	800582e <floor+0x96>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	f7fa fe1d 	bl	8000468 <__adddf3>
 800582e:	ec41 0b10 	vmov	d0, r0, r1
 8005832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005836:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800583a:	f04f 37ff 	mov.w	r7, #4294967295
 800583e:	40df      	lsrs	r7, r3
 8005840:	4207      	tst	r7, r0
 8005842:	d0f4      	beq.n	800582e <floor+0x96>
 8005844:	a30e      	add	r3, pc, #56	@ (adr r3, 8005880 <floor+0xe8>)
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	f7fa fe0d 	bl	8000468 <__adddf3>
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	f7fb f83d 	bl	80008d0 <__aeabi_dcmpgt>
 8005856:	2800      	cmp	r0, #0
 8005858:	d0c2      	beq.n	80057e0 <floor+0x48>
 800585a:	2c00      	cmp	r4, #0
 800585c:	da0a      	bge.n	8005874 <floor+0xdc>
 800585e:	2e14      	cmp	r6, #20
 8005860:	d101      	bne.n	8005866 <floor+0xce>
 8005862:	3401      	adds	r4, #1
 8005864:	e006      	b.n	8005874 <floor+0xdc>
 8005866:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800586a:	2301      	movs	r3, #1
 800586c:	40b3      	lsls	r3, r6
 800586e:	441d      	add	r5, r3
 8005870:	4545      	cmp	r5, r8
 8005872:	d3f6      	bcc.n	8005862 <floor+0xca>
 8005874:	ea25 0507 	bic.w	r5, r5, r7
 8005878:	e7b2      	b.n	80057e0 <floor+0x48>
 800587a:	2500      	movs	r5, #0
 800587c:	462c      	mov	r4, r5
 800587e:	e7af      	b.n	80057e0 <floor+0x48>
 8005880:	8800759c 	.word	0x8800759c
 8005884:	7e37e43c 	.word	0x7e37e43c
 8005888:	bff00000 	.word	0xbff00000
 800588c:	000fffff 	.word	0x000fffff

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
